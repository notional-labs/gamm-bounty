{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0","program":"/home/pegasus/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","cranelift_bforest","--edition=2018","/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=bdcc208ed1769b3c","-C","extra-filename=-bdcc208ed1769b3c","--out-dir","/home/pegasus/ibc-gamm-contract/target/rls/debug/deps","-L","dependency=/home/pegasus/ibc-gamm-contract/target/rls/debug/deps","--extern","cranelift_entity=/home/pegasus/ibc-gamm-contract/target/rls/debug/deps/libcranelift_entity-2a64c5f83e719f16.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/pegasus/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/pegasus/ibc-gamm-contract/target/rls/debug/deps/libcranelift_bforest-bdcc208ed1769b3c.rmeta"},"prelude":{"crate_id":{"name":"cranelift_bforest","disambiguator":[13659091840712201015,0]},"crate_root":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src","external_crates":[{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14103892008453412088,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7315200403670056403,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11207136553210754998,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","num":4,"id":{"name":"cranelift_entity","disambiguator":[10182080851710473171,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[607384006361738202,0]}}],"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":0,"byte_end":5757,"line_start":1,"line_end":198,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":526},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":1497,"byte_end":1500,"line_start":50,"line_end":50,"column_start":21,"column_end":24},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":97},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":1502,"byte_end":1511,"line_start":50,"line_end":50,"column_start":26,"column_end":35},"alias_span":null,"name":"MapCursor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":61},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":1513,"byte_end":1522,"line_start":50,"line_end":50,"column_start":37,"column_end":46},"alias_span":null,"name":"MapForest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":1524,"byte_end":1531,"line_start":50,"line_end":50,"column_start":48,"column_end":55},"alias_span":null,"name":"MapIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":555},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":1554,"byte_end":1557,"line_start":51,"line_end":51,"column_start":21,"column_end":24},"alias_span":null,"name":"Set","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":432},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":1559,"byte_end":1568,"line_start":51,"line_end":51,"column_start":26,"column_end":35},"alias_span":null,"name":"SetCursor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":1570,"byte_end":1579,"line_start":51,"line_end":51,"column_start":37,"column_end":46},"alias_span":null,"name":"SetForest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":458},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":1581,"byte_end":1588,"line_start":51,"line_end":51,"column_start":48,"column_end":55},"alias_span":null,"name":"SetIter","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":0,"byte_end":5757,"line_start":1,"line_end":198,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":141},{"krate":0,"index":227},{"krate":0,"index":316},{"krate":0,"index":355},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":490},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":522},{"krate":0,"index":524}],"decl_id":null,"docs":" A forest of B+-trees.","sig":null,"attributes":[{"value":"/ A forest of B+-trees.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":0,"byte_end":25,"line_start":1,"line_end":1,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":26,"byte_end":29,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides a data structures representing a set of small ordered sets or maps.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":30,"byte_end":121,"line_start":3,"line_end":3,"column_start":1,"column_end":92}},{"value":"/ It is implemented as a forest of B+-trees all allocating nodes out of the same pool.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":122,"byte_end":210,"line_start":4,"line_end":4,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":211,"byte_end":214,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ **These are not general purpose data structures that are somehow magically faster that the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":215,"byte_end":309,"line_start":6,"line_end":6,"column_start":1,"column_end":95}},{"value":"/ standard library's `BTreeSet` and `BTreeMap` types.**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":310,"byte_end":367,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":368,"byte_end":371,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The tradeoffs are different:","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":372,"byte_end":404,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":405,"byte_end":408,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ - Keys and values are expected to be small and copyable. We optimize for 32-bit types.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":409,"byte_end":499,"line_start":11,"line_end":11,"column_start":1,"column_end":91}},{"value":"/ - A comparator object is used to compare keys, allowing smaller \"context free\" keys.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":500,"byte_end":588,"line_start":12,"line_end":12,"column_start":1,"column_end":89}},{"value":"/ - Empty trees have a very small 32-bit footprint.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":589,"byte_end":642,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"/ - All the trees in a forest can be cleared in constant time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":643,"byte_end":707,"line_start":14,"line_end":14,"column_start":1,"column_end":65}},{"value":"deny(missing_docs, trivial_numeric_casts, unused_extern_crates)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":709,"byte_end":776,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"warn(unused_import_braces)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":777,"byte_end":807,"line_start":17,"line_end":17,"column_start":1,"column_end":31}},{"value":"no_std","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":1238,"byte_end":1248,"line_start":32,"line_end":32,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":61},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6534,"byte_end":6543,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"MapForest","qualname":"::map::MapForest","value":"MapForest {  }","parent":null,"children":[{"krate":0,"index":64}],"decl_id":null,"docs":" Memory pool for a forest of `Map` instances.\n","sig":null,"attributes":[{"value":"/ Memory pool for a forest of `Map` instances.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6474,"byte_end":6522,"line_start":33,"line_end":33,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6731,"byte_end":6734,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<MapForest<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty forest.\n","sig":null,"attributes":[{"value":"/ Create a new empty forest.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6689,"byte_end":6719,"line_start":47,"line_end":47,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6968,"byte_end":6973,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"clear","qualname":"<MapForest<K, V>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear all maps in the forest.","sig":null,"attributes":[{"value":"/ Clear all maps in the forest.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6819,"byte_end":6852,"line_start":54,"line_end":54,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6857,"byte_end":6860,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ All `Map` instances belong to this forest are invalidated and should no longer be used.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6865,"byte_end":6956,"line_start":56,"line_end":56,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":526},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7473,"byte_end":7476,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"Map","qualname":"::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530}],"decl_id":null,"docs":" B-tree mapping from `K` to `V`.","sig":null,"attributes":[{"value":"/ B-tree mapping from `K` to `V`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7024,"byte_end":7059,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7060,"byte_end":7063,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This is not a general-purpose replacement for `BTreeMap`. See the [module","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7064,"byte_end":7141,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"/ documentation](index.html) for more information about design tradeoffs.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7142,"byte_end":7217,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7218,"byte_end":7221,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Maps can be cloned, but that operation should only be used as part of cloning the whole forest","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7222,"byte_end":7320,"line_start":67,"line_end":67,"column_start":1,"column_end":99}},{"value":"/ they belong to. *Cloning a map does not allocate new memory for the clone*. It creates an alias","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7321,"byte_end":7420,"line_start":68,"line_end":68,"column_start":1,"column_end":100}},{"value":"/ of the same memory.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7421,"byte_end":7444,"line_start":69,"line_end":69,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7676,"byte_end":7679,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make an empty map.\n","sig":null,"attributes":[{"value":"/ Make an empty map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7642,"byte_end":7664,"line_start":85,"line_end":85,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7829,"byte_end":7837,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Map<K, V>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an empty map?\n","sig":null,"attributes":[{"value":"/ Is this an empty map?","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7792,"byte_end":7817,"line_start":93,"line_end":93,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7941,"byte_end":7944,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"get","qualname":"<Map<K, V>>::get","value":"pub fn get<C: Comparator<K>>(&Self, K, &MapForest<K, V>, &C) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Get the value stored for `key`.\n","sig":null,"attributes":[{"value":"/ Get the value stored for `key`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7894,"byte_end":7929,"line_start":98,"line_end":98,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8466,"byte_end":8477,"line_start":112,"line_end":112,"column_start":12,"column_end":23},"name":"get_or_less","qualname":"<Map<K, V>>::get_or_less","value":"pub fn get_or_less<C: Comparator<K>>(&Self, K, &MapForest<K, V>, &C)\n-> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Look up the value stored for `key`.","sig":null,"attributes":[{"value":"/ Look up the value stored for `key`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8163,"byte_end":8202,"line_start":105,"line_end":105,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8207,"byte_end":8210,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ If it exists, return the stored key-value pair.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8215,"byte_end":8266,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8271,"byte_end":8274,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Otherwise, return the last key-value pair with a key that is less than or equal to `key`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8279,"byte_end":8372,"line_start":109,"line_end":109,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8377,"byte_end":8380,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ If no stored keys are less than or equal to `key`, return `None`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8385,"byte_end":8454,"line_start":111,"line_end":111,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8991,"byte_end":8997,"line_start":128,"line_end":128,"column_start":12,"column_end":18},"name":"insert","qualname":"<Map<K, V>>::insert","value":"pub fn insert<C: Comparator<K>>(&mut Self, K, V, &mut MapForest<K, V>, &C)\n-> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert `key, value` into the map and return the old value stored for `key`, if any.\n","sig":null,"attributes":[{"value":"/ Insert `key, value` into the map and return the old value stored for `key`, if any.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":8892,"byte_end":8979,"line_start":127,"line_end":127,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":9300,"byte_end":9306,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"remove","qualname":"<Map<K, V>>::remove","value":"pub fn remove<C: Comparator<K>>(&mut Self, K, &mut MapForest<K, V>, &C)\n-> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from the map and return the removed value for `key`, if any.\n","sig":null,"attributes":[{"value":"/ Remove `key` from the map and return the removed value for `key`, if any.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":9211,"byte_end":9288,"line_start":138,"line_end":138,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":9633,"byte_end":9638,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map<K, V>>::clear","value":"pub fn clear(&mut Self, &mut MapForest<K, V>)","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries.\n","sig":null,"attributes":[{"value":"/ Remove all entries.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":9598,"byte_end":9621,"line_start":153,"line_end":153,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":10020,"byte_end":10026,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"retain","qualname":"<Map<K, V>>::retain","value":"pub fn retain<F>(&mut Self, &mut MapForest<K, V>, F) where F: FnMut(K, &mut V)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":9792,"byte_end":9849,"line_start":160,"line_end":160,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":9854,"byte_end":9857,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Remove all key-value pairs where the predicate returns false.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":9862,"byte_end":9927,"line_start":162,"line_end":162,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":9932,"byte_end":9935,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ The predicate is allowed to update the values stored in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":9940,"byte_end":10008,"line_start":164,"line_end":164,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":10816,"byte_end":10822,"line_start":188,"line_end":188,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Map<K, V>>::cursor","value":"pub fn cursor<'a,\n              C: Comparator<K>>(&'a mut Self, &'a mut MapForest<K, V>, &'a C)\n-> MapCursor","parent":null,"children":[],"decl_id":null,"docs":" Create a cursor for navigating this map. The cursor is initially positioned off the end of\n the map.\n","sig":null,"attributes":[{"value":"/ Create a cursor for navigating this map. The cursor is initially positioned off the end of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":10693,"byte_end":10787,"line_start":186,"line_end":186,"column_start":5,"column_end":99}},{"value":"/ the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":10792,"byte_end":10804,"line_start":187,"line_end":187,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":11104,"byte_end":11108,"line_start":197,"line_end":197,"column_start":12,"column_end":16},"name":"iter","qualname":"<Map<K, V>>::iter","value":"pub fn iter<'a>(&'a Self, &'a MapForest<K, V>) -> MapIter","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator traversing this map. The iterator type is `(K, V)`.\n","sig":null,"attributes":[{"value":"/ Create an iterator traversing this map. The iterator type is `(K, V)`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":11018,"byte_end":11092,"line_start":196,"line_end":196,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":97},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":12479,"byte_end":12488,"line_start":250,"line_end":250,"column_start":12,"column_end":21},"name":"MapCursor","qualname":"::map::MapCursor","value":"MapCursor {  }","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"decl_id":null,"docs":" A position in a `Map` used to navigate and modify the ordered map.","sig":null,"attributes":[{"value":"/ A position in a `Map` used to navigate and modify the ordered map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":12260,"byte_end":12330,"line_start":246,"line_end":246,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":12331,"byte_end":12334,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ A cursor always points at a key-value pair in the map, or \"off the end\" which is a position","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":12335,"byte_end":12430,"line_start":248,"line_end":248,"column_start":1,"column_end":96}},{"value":"/ after the last entry in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":12431,"byte_end":12467,"line_start":249,"line_end":249,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13185,"byte_end":13193,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<MapCursor>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing to an empty map?\n","sig":null,"attributes":[{"value":"/ Is this cursor pointing to an empty map?","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13129,"byte_end":13173,"line_start":278,"line_end":278,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13519,"byte_end":13523,"line_start":288,"line_end":288,"column_start":12,"column_end":16},"name":"next","qualname":"<MapCursor>::next","value":"pub fn next(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the next key-value pair and return it.","sig":null,"attributes":[{"value":"/ Move cursor to the next key-value pair and return it.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13250,"byte_end":13307,"line_start":283,"line_end":283,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13312,"byte_end":13315,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ If the cursor reaches the end, return `None` and leave the cursor at the off-the-end","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13320,"byte_end":13408,"line_start":285,"line_end":285,"column_start":5,"column_end":93}},{"value":"/ position.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13413,"byte_end":13426,"line_start":286,"line_end":286,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13777,"byte_end":13781,"line_start":295,"line_end":295,"column_start":12,"column_end":16},"name":"prev","qualname":"<MapCursor>::prev","value":"pub fn prev(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the previous key-value pair and return it.","sig":null,"attributes":[{"value":"/ Move cursor to the previous key-value pair and return it.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13600,"byte_end":13661,"line_start":292,"line_end":292,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13666,"byte_end":13669,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ If the cursor is already pointing at the first entry, leave it there and return `None`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13674,"byte_end":13765,"line_start":294,"line_end":294,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14001,"byte_end":14004,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"key","qualname":"<MapCursor>::key","value":"pub fn key(&Self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Get the current key, or `None` if the cursor is at the end.\n","sig":null,"attributes":[{"value":"/ Get the current key, or `None` if the cursor is at the end.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":13926,"byte_end":13989,"line_start":301,"line_end":301,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14248,"byte_end":14253,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"name":"value","qualname":"<MapCursor>::value","value":"pub fn value(&Self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Get the current value, or `None` if the cursor is at the end.\n","sig":null,"attributes":[{"value":"/ Get the current value, or `None` if the cursor is at the end.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14171,"byte_end":14236,"line_start":308,"line_end":308,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14520,"byte_end":14529,"line_start":316,"line_end":316,"column_start":12,"column_end":21},"name":"value_mut","qualname":"<MapCursor>::value_mut","value":"pub fn value_mut(&mut Self) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the current value, or `None` if the cursor is at the end.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the current value, or `None` if the cursor is at the end.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14420,"byte_end":14508,"line_start":315,"line_end":315,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14981,"byte_end":14985,"line_start":328,"line_end":328,"column_start":12,"column_end":16},"name":"goto","qualname":"<MapCursor>::goto","value":"pub fn goto(&mut Self, K) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to `key`.","sig":null,"attributes":[{"value":"/ Move this cursor to `key`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14709,"byte_end":14739,"line_start":322,"line_end":322,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14744,"byte_end":14747,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ If `key` is in the map, place the cursor at `key` and return the corresponding value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14752,"byte_end":14841,"line_start":324,"line_end":324,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14846,"byte_end":14849,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ If `key` is not in the set, place the cursor at the next larger element (or the end) and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14854,"byte_end":14946,"line_start":326,"line_end":326,"column_start":5,"column_end":97}},{"value":"/ return `None`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":14951,"byte_end":14969,"line_start":327,"line_end":327,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":15317,"byte_end":15327,"line_start":339,"line_end":339,"column_start":12,"column_end":22},"name":"goto_first","qualname":"<MapCursor>::goto_first","value":"pub fn goto_first(&mut Self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to the first element.\n","sig":null,"attributes":[{"value":"/ Move this cursor to the first element.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":15263,"byte_end":15305,"line_start":338,"line_end":338,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":15694,"byte_end":15700,"line_start":348,"line_end":348,"column_start":12,"column_end":18},"name":"insert","qualname":"<MapCursor>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert `(key, value))` into the map and leave the cursor at the inserted pair.","sig":null,"attributes":[{"value":"/ Insert `(key, value))` into the map and leave the cursor at the inserted pair.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":15430,"byte_end":15512,"line_start":343,"line_end":343,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":15517,"byte_end":15520,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ If the map did not contain `key`, return `None`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":15525,"byte_end":15577,"line_start":345,"line_end":345,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":15582,"byte_end":15585,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ If `key` is already present, replace the existing with `value` and return the old value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":15590,"byte_end":15682,"line_start":347,"line_end":347,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":16632,"byte_end":16638,"line_start":371,"line_end":371,"column_start":12,"column_end":18},"name":"remove","qualname":"<MapCursor>::remove","value":"pub fn remove(&mut Self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the current entry (if any) and return the mapped value.\n This advances the cursor to the next entry after the removed one.\n","sig":null,"attributes":[{"value":"/ Remove the current entry (if any) and return the mapped value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":16480,"byte_end":16546,"line_start":369,"line_end":369,"column_start":5,"column_end":71}},{"value":"/ This advances the cursor to the next entry after the removed one.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":16551,"byte_end":16620,"line_start":370,"line_end":370,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":16890,"byte_end":16897,"line_start":381,"line_end":381,"column_start":12,"column_end":19},"name":"MapIter","qualname":"::map::MapIter","value":"MapIter {  }","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"decl_id":null,"docs":" An iterator visiting the key-value pairs of a `Map`.\n","sig":null,"attributes":[{"value":"/ An iterator visiting the key-value pairs of a `Map`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":16822,"byte_end":16878,"line_start":380,"line_end":380,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":403},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104591,"byte_end":104600,"line_start":33,"line_end":33,"column_start":12,"column_end":21},"name":"SetForest","qualname":"::set::SetForest","value":"SetForest {  }","parent":null,"children":[{"krate":0,"index":405}],"decl_id":null,"docs":" Memory pool for a forest of `Set` instances.\n","sig":null,"attributes":[{"value":"/ Memory pool for a forest of `Set` instances.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104531,"byte_end":104579,"line_start":32,"line_end":32,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104750,"byte_end":104753,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<SetForest<K>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty forest.\n","sig":null,"attributes":[{"value":"/ Create a new empty forest.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104708,"byte_end":104738,"line_start":44,"line_end":44,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104987,"byte_end":104992,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"clear","qualname":"<SetForest<K>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear all sets in the forest.","sig":null,"attributes":[{"value":"/ Clear all sets in the forest.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104838,"byte_end":104871,"line_start":51,"line_end":51,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104876,"byte_end":104879,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ All `Set` instances belong to this forest are invalidated and should no longer be used.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104884,"byte_end":104975,"line_start":53,"line_end":53,"column_start":5,"column_end":96}}]},{"kind":"Struct","id":{"krate":0,"index":555},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105537,"byte_end":105540,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"Set","qualname":"::set::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558}],"decl_id":null,"docs":" B-tree representing an ordered set of `K`s using `C` for comparing elements.","sig":null,"attributes":[{"value":"/ B-tree representing an ordered set of `K`s using `C` for comparing elements.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105043,"byte_end":105123,"line_start":59,"line_end":59,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105124,"byte_end":105127,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This is not a general-purpose replacement for `BTreeSet`. See the [module","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105128,"byte_end":105205,"line_start":61,"line_end":61,"column_start":1,"column_end":78}},{"value":"/ documentation](index.html) for more information about design tradeoffs.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105206,"byte_end":105281,"line_start":62,"line_end":62,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105282,"byte_end":105285,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ Sets can be cloned, but that operation should only be used as part of cloning the whole forest","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105286,"byte_end":105384,"line_start":64,"line_end":64,"column_start":1,"column_end":99}},{"value":"/ they belong to. *Cloning a set does not allocate new memory for the clone*. It creates an alias","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105385,"byte_end":105484,"line_start":65,"line_end":65,"column_start":1,"column_end":100}},{"value":"/ of the same memory.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105485,"byte_end":105508,"line_start":66,"line_end":66,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105700,"byte_end":105703,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<Set<K>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Make an empty set.\n","sig":null,"attributes":[{"value":"/ Make an empty set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105666,"byte_end":105688,"line_start":80,"line_end":80,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105853,"byte_end":105861,"line_start":89,"line_end":89,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Set<K>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this an empty set?\n","sig":null,"attributes":[{"value":"/ Is this an empty set?","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105816,"byte_end":105841,"line_start":88,"line_end":88,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105962,"byte_end":105970,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"contains","qualname":"<Set<K>>::contains","value":"pub fn contains<C: Comparator<K>>(&Self, K, &SetForest<K>, &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Does the set contain `key`?.\n","sig":null,"attributes":[{"value":"/ Does the set contain `key`?.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105918,"byte_end":105950,"line_start":93,"line_end":93,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106414,"byte_end":106420,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"insert","qualname":"<Set<K>>::insert","value":"pub fn insert<C: Comparator<K>>(&mut Self, K, &mut SetForest<K>, &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to insert `key` into the set.","sig":null,"attributes":[{"value":"/ Try to insert `key` into the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106204,"byte_end":106241,"line_start":101,"line_end":101,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106246,"byte_end":106249,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ If the set did not contain `key`, insert it and return true.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106254,"byte_end":106318,"line_start":103,"line_end":103,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106323,"byte_end":106326,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ If `key` is already present, don't change the set and return false.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106331,"byte_end":106402,"line_start":105,"line_end":105,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106726,"byte_end":106732,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"remove","qualname":"<Set<K>>::remove","value":"pub fn remove<C: Comparator<K>>(&mut Self, K, &mut SetForest<K>, &C) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove `key` from the set and return true.","sig":null,"attributes":[{"value":"/ Remove `key` from the set and return true.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106601,"byte_end":106647,"line_start":115,"line_end":115,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106652,"byte_end":106655,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ If `key` was not present in the set, return false.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":106660,"byte_end":106714,"line_start":117,"line_end":117,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":107060,"byte_end":107065,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"clear","qualname":"<Set<K>>::clear","value":"pub fn clear(&mut Self, &mut SetForest<K>)","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries.\n","sig":null,"attributes":[{"value":"/ Remove all entries.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":107025,"byte_end":107048,"line_start":133,"line_end":133,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":107356,"byte_end":107362,"line_start":143,"line_end":143,"column_start":12,"column_end":18},"name":"retain","qualname":"<Set<K>>::retain","value":"pub fn retain<F>(&mut Self, &mut SetForest<K>, F) where F: FnMut(K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":107216,"byte_end":107273,"line_start":140,"line_end":140,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":107278,"byte_end":107281,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ Remove all elements where the predicate returns false.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":107286,"byte_end":107344,"line_start":142,"line_end":142,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108027,"byte_end":108033,"line_start":162,"line_end":162,"column_start":12,"column_end":18},"name":"cursor","qualname":"<Set<K>>::cursor","value":"pub fn cursor<'a, C: Comparator<K>>(&'a mut Self, &'a mut SetForest<K>, &'a C)\n-> SetCursor","parent":null,"children":[],"decl_id":null,"docs":" Create a cursor for navigating this set. The cursor is initially positioned off the end of\n the set.\n","sig":null,"attributes":[{"value":"/ Create a cursor for navigating this set. The cursor is initially positioned off the end of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":107904,"byte_end":107998,"line_start":160,"line_end":160,"column_start":5,"column_end":99}},{"value":"/ the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108003,"byte_end":108015,"line_start":161,"line_end":161,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108304,"byte_end":108308,"line_start":171,"line_end":171,"column_start":12,"column_end":16},"name":"iter","qualname":"<Set<K>>::iter","value":"pub fn iter<'a>(&'a Self, &'a SetForest<K>) -> SetIter","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator traversing this set. The iterator type is `K`.\n","sig":null,"attributes":[{"value":"/ Create an iterator traversing this set. The iterator type is `K`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108223,"byte_end":108292,"line_start":170,"line_end":170,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108822,"byte_end":108831,"line_start":193,"line_end":193,"column_start":12,"column_end":21},"name":"SetCursor","qualname":"::set::SetCursor","value":"SetCursor {  }","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439}],"decl_id":null,"docs":" A position in a `Set` used to navigate and modify the ordered set.","sig":null,"attributes":[{"value":"/ A position in a `Set` used to navigate and modify the ordered set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108607,"byte_end":108677,"line_start":189,"line_end":189,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108678,"byte_end":108681,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ A cursor always points at an element in the set, or \"off the end\" which is a position after the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108682,"byte_end":108781,"line_start":191,"line_end":191,"column_start":1,"column_end":100}},{"value":"/ last element in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108782,"byte_end":108810,"line_start":192,"line_end":192,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109472,"byte_end":109480,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SetCursor>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this cursor pointing to an empty set?\n","sig":null,"attributes":[{"value":"/ Is this cursor pointing to an empty set?","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109416,"byte_end":109460,"line_start":219,"line_end":219,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109799,"byte_end":109803,"line_start":229,"line_end":229,"column_start":12,"column_end":16},"name":"next","qualname":"<SetCursor>::next","value":"pub fn next(&mut Self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the next element and return it.","sig":null,"attributes":[{"value":"/ Move cursor to the next element and return it.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109537,"byte_end":109587,"line_start":224,"line_end":224,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109592,"byte_end":109595,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ If the cursor reaches the end, return `None` and leave the cursor at the off-the-end","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109600,"byte_end":109688,"line_start":226,"line_end":226,"column_start":5,"column_end":93}},{"value":"/ position.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109693,"byte_end":109706,"line_start":227,"line_end":227,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110063,"byte_end":110067,"line_start":236,"line_end":236,"column_start":12,"column_end":16},"name":"prev","qualname":"<SetCursor>::prev","value":"pub fn prev(&mut Self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move cursor to the previous element and return it.","sig":null,"attributes":[{"value":"/ Move cursor to the previous element and return it.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109891,"byte_end":109945,"line_start":233,"line_end":233,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109950,"byte_end":109953,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ If the cursor is already pointing at the first element, leave it there and return `None`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109958,"byte_end":110051,"line_start":235,"line_end":235,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110302,"byte_end":110306,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"elem","qualname":"<SetCursor>::elem","value":"pub fn elem(&Self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Get the current element, or `None` if the cursor is at the end.\n","sig":null,"attributes":[{"value":"/ Get the current element, or `None` if the cursor is at the end.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110223,"byte_end":110290,"line_start":242,"line_end":242,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110729,"byte_end":110733,"line_start":255,"line_end":255,"column_start":12,"column_end":16},"name":"goto","qualname":"<SetCursor>::goto","value":"pub fn goto(&mut Self, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to `elem`.","sig":null,"attributes":[{"value":"/ Move this cursor to `elem`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110473,"byte_end":110504,"line_start":249,"line_end":249,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110509,"byte_end":110512,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If `elem` is in the set, place the cursor at `elem` and return true.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110517,"byte_end":110589,"line_start":251,"line_end":251,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110594,"byte_end":110597,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ If `elem` is not in the set, place the cursor at the next larger element (or the end) and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110602,"byte_end":110695,"line_start":253,"line_end":253,"column_start":5,"column_end":98}},{"value":"/ return false.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":110700,"byte_end":110717,"line_start":254,"line_end":254,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":111169,"byte_end":111179,"line_start":270,"line_end":270,"column_start":12,"column_end":22},"name":"goto_first","qualname":"<SetCursor>::goto_first","value":"pub fn goto_first(&mut Self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Move this cursor to the first element.\n","sig":null,"attributes":[{"value":"/ Move this cursor to the first element.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":111115,"byte_end":111157,"line_start":269,"line_end":269,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":111583,"byte_end":111589,"line_start":280,"line_end":280,"column_start":12,"column_end":18},"name":"insert","qualname":"<SetCursor>::insert","value":"pub fn insert(&mut Self, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to insert `elem` into the set and leave the cursor at the inserted element.","sig":null,"attributes":[{"value":"/ Try to insert `elem` into the set and leave the cursor at the inserted element.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":111282,"byte_end":111365,"line_start":274,"line_end":274,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":111370,"byte_end":111373,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ If the set did not contain `elem`, insert it and return true.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":111378,"byte_end":111443,"line_start":276,"line_end":276,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":111448,"byte_end":111451,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ If `elem` is already present, don't change the set, place the cursor at `goto(elem)`, and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":111456,"byte_end":111549,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ return false.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":111554,"byte_end":111571,"line_start":279,"line_end":279,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":112449,"byte_end":112455,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"remove","qualname":"<SetCursor>::remove","value":"pub fn remove(&mut Self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the current element (if any) and return it.\n This advances the cursor to the next element after the removed one.\n","sig":null,"attributes":[{"value":"/ Remove the current element (if any) and return it.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":112307,"byte_end":112361,"line_start":300,"line_end":300,"column_start":5,"column_end":59}},{"value":"/ This advances the cursor to the next element after the removed one.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":112366,"byte_end":112437,"line_start":301,"line_end":301,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":458},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":113111,"byte_end":113118,"line_start":330,"line_end":330,"column_start":12,"column_end":19},"name":"SetIter","qualname":"::set::SetIter","value":"SetIter {  }","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463}],"decl_id":null,"docs":" An iterator visiting the elements of a `Set`.\n","sig":null,"attributes":[{"value":"/ An iterator visiting the elements of a `Set`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":113050,"byte_end":113099,"line_start":329,"line_end":329,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":507},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2246,"byte_end":2256,"line_start":70,"line_end":70,"column_start":11,"column_end":21},"name":"Comparator","qualname":"::Comparator","value":"Comparator<K>","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510}],"decl_id":null,"docs":" Key comparator.","sig":null,"attributes":[{"value":"/ Key comparator.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2083,"byte_end":2102,"line_start":66,"line_end":66,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2103,"byte_end":2106,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Keys don't need to implement `Ord`. They are compared using a comparator object which","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2107,"byte_end":2196,"line_start":68,"line_end":68,"column_start":1,"column_end":90}},{"value":"/ provides a context for comparison.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2197,"byte_end":2235,"line_start":69,"line_end":69,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2400,"byte_end":2403,"line_start":77,"line_end":77,"column_start":8,"column_end":11},"name":"cmp","qualname":"::Comparator::cmp","value":"pub fn cmp(&Self, K, K) -> Ordering","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" Compare keys `a` and `b`.","sig":null,"attributes":[{"value":"/ Compare keys `a` and `b`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2285,"byte_end":2314,"line_start":74,"line_end":74,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2319,"byte_end":2322,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This relation must provide a total ordering or the key space.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2327,"byte_end":2392,"line_start":76,"line_end":76,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2755,"byte_end":2761,"line_start":85,"line_end":85,"column_start":8,"column_end":14},"name":"search","qualname":"::Comparator::search","value":"pub fn search(&Self, K, &[K]) -> Result<usize, usize>","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" Binary search for `k` in an ordered slice.","sig":null,"attributes":[{"value":"/ Binary search for `k` in an ordered slice.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2441,"byte_end":2487,"line_start":79,"line_end":79,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2492,"byte_end":2495,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Assume that `s` is already sorted according to this ordering, search for the key `k`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2500,"byte_end":2589,"line_start":81,"line_end":81,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2594,"byte_end":2597,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(idx)` if `k` was found in the slice or `Err(idx)` with the position where it","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2602,"byte_end":2694,"line_start":83,"line_end":83,"column_start":5,"column_end":97}},{"value":"/ should be inserted to preserve the ordering.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":2699,"byte_end":2747,"line_start":84,"line_end":84,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":516},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":3210,"byte_end":3213,"line_start":103,"line_end":103,"column_start":10,"column_end":13},"name":"Key","qualname":"::Forest::Key","value":"type Key: Copy;","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" The key type is present for both sets and maps.\n","sig":null,"attributes":[{"value":"/ The key type is present for both sets and maps.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":3149,"byte_end":3200,"line_start":102,"line_end":102,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":517},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":3272,"byte_end":3277,"line_start":106,"line_end":106,"column_start":10,"column_end":15},"name":"Value","qualname":"::Forest::Value","value":"type Value: Copy;","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" The value type is `()` for sets.\n","sig":null,"attributes":[{"value":"/ The value type is `()` for sets.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":3226,"byte_end":3262,"line_start":105,"line_end":105,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":518},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":3340,"byte_end":3348,"line_start":109,"line_end":109,"column_start":10,"column_end":18},"name":"LeafKeys","qualname":"::Forest::LeafKeys","value":"type LeafKeys: Copy + BorrowMut<[Self::Key]>;","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" An array of keys for the leaf nodes.\n","sig":null,"attributes":[{"value":"/ An array of keys for the leaf nodes.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":3290,"byte_end":3330,"line_start":108,"line_end":108,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":519},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":3438,"byte_end":3448,"line_start":112,"line_end":112,"column_start":10,"column_end":20},"name":"LeafValues","qualname":"::Forest::LeafValues","value":"type LeafValues: Copy + BorrowMut<[Self::Value]>;","parent":{"krate":0,"index":515},"children":[],"decl_id":null,"docs":" An array of values for the leaf nodes.\n","sig":null,"attributes":[{"value":"/ An array of values for the leaf nodes.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/lib.rs","byte_start":3386,"byte_end":3428,"line_start":111,"line_end":111,"column_start":5,"column_end":47}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6110,"byte_end":6118,"line_start":14,"line_end":14,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6635,"byte_end":6644,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7594,"byte_end":7597,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":11332,"byte_end":11335,"line_start":206,"line_end":206,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":12725,"byte_end":12734,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":17085,"byte_end":17092,"line_start":391,"line_end":391,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":36505,"byte_end":36513,"line_start":48,"line_end":48,"column_start":26,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":36546,"byte_end":36554,"line_start":49,"line_end":49,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":36629,"byte_end":36637,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":54434,"byte_end":54441,"line_start":520,"line_end":520,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":55025,"byte_end":55033,"line_start":542,"line_end":542,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":55156,"byte_end":55157,"line_start":548,"line_end":548,"column_start":35,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":55287,"byte_end":55295,"line_start":554,"line_end":554,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/path.rs","byte_start":64704,"byte_end":64708,"line_start":24,"line_end":24,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/path.rs","byte_start":64918,"byte_end":64922,"line_start":35,"line_end":35,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/pool.rs","byte_start":96385,"byte_end":96393,"line_start":17,"line_end":17,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/pool.rs","byte_start":103506,"byte_end":103514,"line_start":208,"line_end":208,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":350},{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/pool.rs","byte_start":103680,"byte_end":103688,"line_start":216,"line_end":216,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104153,"byte_end":104161,"line_start":14,"line_end":14,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104670,"byte_end":104679,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105634,"byte_end":105637,"line_start":76,"line_end":76,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108523,"byte_end":108526,"line_start":180,"line_end":180,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109038,"byte_end":109047,"line_start":204,"line_end":204,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":113276,"byte_end":113283,"line_start":339,"line_end":339,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6110,"byte_end":6118,"line_start":14,"line_end":14,"column_start":23,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":43},"to":{"krate":0,"index":515}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":6635,"byte_end":6644,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":61},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":7594,"byte_end":7597,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":526},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":11332,"byte_end":11335,"line_start":206,"line_end":206,"column_start":24,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":526},"to":{"krate":1,"index":2995}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":12725,"byte_end":12734,"line_start":262,"line_end":262,"column_start":19,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":97},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/map.rs","byte_start":17085,"byte_end":17092,"line_start":391,"line_end":391,"column_start":29,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":128},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":36505,"byte_end":36513,"line_start":48,"line_end":48,"column_start":26,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":171},"to":{"krate":1,"index":3027}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":36546,"byte_end":36554,"line_start":49,"line_end":49,"column_start":27,"column_end":35},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":171},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":36629,"byte_end":36637,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":54434,"byte_end":54441,"line_start":520,"line_end":520,"column_start":6,"column_end":13},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":55025,"byte_end":55033,"line_start":542,"line_end":542,"column_start":18,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":588},"to":{"krate":0,"index":217}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":55156,"byte_end":55157,"line_start":548,"line_end":548,"column_start":35,"column_end":36},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":222},"to":{"krate":0,"index":217}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/node.rs","byte_start":55287,"byte_end":55295,"line_start":554,"line_end":554,"column_start":26,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":171},"to":{"krate":1,"index":9555}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/path.rs","byte_start":64704,"byte_end":64708,"line_start":24,"line_end":24,"column_start":29,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":262},"to":{"krate":1,"index":2995}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/path.rs","byte_start":64918,"byte_end":64922,"line_start":35,"line_end":35,"column_start":17,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/pool.rs","byte_start":96385,"byte_end":96393,"line_start":17,"line_end":17,"column_start":17,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/pool.rs","byte_start":103506,"byte_end":103514,"line_start":208,"line_end":208,"column_start":33,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":337},"to":{"krate":1,"index":3317}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/pool.rs","byte_start":103680,"byte_end":103688,"line_start":216,"line_end":216,"column_start":36,"column_end":44},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":337},"to":{"krate":1,"index":3321}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104153,"byte_end":104161,"line_start":14,"line_end":14,"column_start":20,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":387},"to":{"krate":0,"index":515}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":104670,"byte_end":104679,"line_start":40,"line_end":40,"column_start":9,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":105634,"byte_end":105637,"line_start":76,"line_end":76,"column_start":9,"column_end":12},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":108523,"byte_end":108526,"line_start":180,"line_end":180,"column_start":21,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":555},"to":{"krate":1,"index":2995}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":109038,"byte_end":109047,"line_start":204,"line_end":204,"column_start":16,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-bforest-0.76.0/src/set.rs","byte_start":113276,"byte_end":113283,"line_start":339,"line_end":339,"column_start":26,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":458},"to":{"krate":1,"index":7820}}]}