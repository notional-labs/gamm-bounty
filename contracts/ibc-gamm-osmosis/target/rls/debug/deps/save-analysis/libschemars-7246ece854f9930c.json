{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6","program":"/home/pegasus/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","schemars","--edition=2018","/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"derive\"","--cfg","feature=\"schemars_derive\"","-C","metadata=7246ece854f9930c","-C","extra-filename=-7246ece854f9930c","--out-dir","/home/pegasus/ibc-gamm-contract/ibc-reflect/target/rls/debug/deps","-L","dependency=/home/pegasus/ibc-gamm-contract/ibc-reflect/target/rls/debug/deps","--extern","dyn_clone=/home/pegasus/ibc-gamm-contract/ibc-reflect/target/rls/debug/deps/libdyn_clone-8eb384d5be6d523c.rmeta","--extern","schemars_derive=/home/pegasus/ibc-gamm-contract/ibc-reflect/target/rls/debug/deps/libschemars_derive-4a9920a695d55cac.so","--extern","serde=/home/pegasus/ibc-gamm-contract/ibc-reflect/target/rls/debug/deps/libserde-9efeaa965d30d6e2.rmeta","--extern","serde_json=/home/pegasus/ibc-gamm-contract/ibc-reflect/target/rls/debug/deps/libserde_json-b5cdeb4ab8feb8f3.rmeta","--cap-lints","allow","--cfg","std_atomic64","--cfg","std_atomic","--error-format=json","--sysroot","/home/pegasus/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/pegasus/ibc-gamm-contract/ibc-reflect/target/rls/debug/deps/libschemars-7246ece854f9930c.rmeta"},"prelude":{"crate_id":{"name":"schemars","disambiguator":[2843726790842278858,0]},"crate_root":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src","external_crates":[{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[18008874376135235901,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14103892008453412088,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7315200403670056403,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11207136553210754998,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[607384006361738202,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[3311393420855710976,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16337070767718955233,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11949973796169789986,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[5564804802555933627,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12742144956194682096,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8655233451211981834,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13232350330095090153,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[350047506610901640,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16835669804620715697,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[12515180981479917405,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[16254306877963802483,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[8770506875580860113,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[2137987193762846224,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2391863862182092207,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","num":20,"id":{"name":"schemars_derive","disambiguator":[12967166779860933165,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","num":21,"id":{"name":"serde_json","disambiguator":[6532001585783556738,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","num":22,"id":{"name":"serde","disambiguator":[15013803239269233867,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","num":23,"id":{"name":"serde_derive","disambiguator":[68729331767806002,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","num":24,"id":{"name":"itoa","disambiguator":[14192373228791872193,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","num":25,"id":{"name":"ryu","disambiguator":[13056903353933179430,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","num":26,"id":{"name":"dyn_clone","disambiguator":[13100049144307428382,0]}}],"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":0,"byte_end":12103,"line_start":1,"line_end":396,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9581,"byte_end":9582,"line_start":315,"line_end":315,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"JsonSchema","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":0},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9659,"byte_end":9669,"line_start":319,"line_end":319,"column_start":9,"column_end":19},"alias_span":null,"name":"_serde_json","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":0,"byte_end":12103,"line_start":1,"line_end":396,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":12},{"krate":0,"index":47},{"krate":0,"index":284},{"krate":0,"index":411},{"krate":0,"index":414},{"krate":0,"index":437},{"krate":0,"index":521},{"krate":0,"index":575},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":623}],"decl_id":null,"docs":"Generate JSON Schema documents from Rust code","sig":null,"attributes":[{"value":"forbid(unsafe_code)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":0,"byte_end":23,"line_start":1,"line_end":1,"column_start":1,"column_end":24}},{"value":"*\nGenerate JSON Schema documents from Rust code\n\n## Basic Usage\n\nIf you don't really care about the specifics, the easiest way to generate a JSON schema for your types is to `#[derive(JsonSchema)]` and use the `schema_for!` macro. All fields of the type must also implement `JsonSchema` - Schemars implements this for many standard library types.\n\n```rust\nuse schemars::{schema_for, JsonSchema};\n\n#[derive(JsonSchema)]\npub struct MyStruct {\n    pub my_int: i32,\n    pub my_bool: bool,\n    pub my_nullable_enum: Option<MyEnum>,\n}\n\n#[derive(JsonSchema)]\npub enum MyEnum {\n    StringNewType(String),\n    StructVariant { floats: Vec<f32> },\n}\n\nlet schema = schema_for!(MyStruct);\nprintln!(\"{}\", serde_json::to_string_pretty(&schema).unwrap());\n```\n\n<details>\n<summary>Click to see the output JSON schema...</summary>\n\n```json\n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"title\": \"MyStruct\",\n    \"type\": \"object\",\n    \"required\": [\n        \"my_bool\",\n        \"my_int\"\n    ],\n    \"properties\": {\n        \"my_bool\": {\n            \"type\": \"boolean\"\n        },\n        \"my_int\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n        },\n        \"my_nullable_enum\": {\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/definitions/MyEnum\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        }\n    },\n    \"definitions\": {\n        \"MyEnum\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"StringNewType\"\n                    ],\n                    \"properties\": {\n                        \"StringNewType\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"additionalProperties\": false\n                },\n                {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"StructVariant\"\n                    ],\n                    \"properties\": {\n                        \"StructVariant\": {\n                            \"type\": \"object\",\n                            \"required\": [\n                                \"floats\"\n                            ],\n                            \"properties\": {\n                                \"floats\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"number\",\n                                        \"format\": \"float\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"additionalProperties\": false\n                }\n            ]\n        }\n    }\n}\n```\n</details>\n\n### Serde Compatibility\n\nOne of the main aims of this library is compatibility with [Serde](https://github.com/serde-rs/serde). Any generated schema *should* match how [serde_json](https://github.com/serde-rs/json) would serialize/deserialize to/from JSON. To support this, Schemars will check for any `#[serde(...)]` attributes on types that derive `JsonSchema`, and adjust the generated schema accordingly.\n\n```rust\nuse schemars::{schema_for, JsonSchema};\nuse serde::{Deserialize, Serialize};\n\n#[derive(Deserialize, Serialize, JsonSchema)]\n#[serde(rename_all = \"camelCase\", deny_unknown_fields)]\npub struct MyStruct {\n    #[serde(rename = \"myNumber\")]\n    pub my_int: i32,\n    pub my_bool: bool,\n    #[serde(default)]\n    pub my_nullable_enum: Option<MyEnum>,\n}\n\n#[derive(Deserialize, Serialize, JsonSchema)]\n#[serde(untagged)]\npub enum MyEnum {\n    StringNewType(String),\n    StructVariant { floats: Vec<f32> },\n}\n\nlet schema = schema_for!(MyStruct);\nprintln!(\"{}\", serde_json::to_string_pretty(&schema).unwrap());\n```\n\n<details>\n<summary>Click to see the output JSON schema...</summary>\n\n```json\n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"title\": \"MyStruct\",\n    \"type\": \"object\",\n    \"required\": [\n        \"myBool\",\n        \"myNumber\"\n    ],\n    \"properties\": {\n        \"myBool\": {\n            \"type\": \"boolean\"\n        },\n        \"myNullableEnum\": {\n            \"default\": null,\n            \"anyOf\": [\n                {\n                    \"$ref\": \"#/definitions/MyEnum\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ]\n        },\n        \"myNumber\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n        }\n    },\n    \"additionalProperties\": false,\n    \"definitions\": {\n        \"MyEnum\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"floats\"\n                    ],\n                    \"properties\": {\n                        \"floats\": {\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"number\",\n                                \"format\": \"float\"\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n```\n</details>\n\n`#[serde(...)]` attributes can be overriden using `#[schemars(...)]` attributes, which behave identically (e.g. `#[schemars(rename_all = \"camelCase\")]`). You may find this useful if you want to change the generated schema without affecting Serde's behaviour, or if you're just not using Serde.\n\n### Schema from Example Value\n\nIf you want a schema for a type that can't/doesn't implement `JsonSchema`, but does implement `serde::Serialize`, then you can generate a JSON schema from a value of that type. However, this schema will generally be less precise than if the type implemented `JsonSchema` - particularly when it involves enums, since schemars will not make any assumptions about the structure of an enum based on a single variant.\n\n```rust\nuse schemars::schema_for_value;\nuse serde::Serialize;\n\n#[derive(Serialize)]\npub struct MyStruct {\n    pub my_int: i32,\n    pub my_bool: bool,\n    pub my_nullable_enum: Option<MyEnum>,\n}\n\n#[derive(Serialize)]\npub enum MyEnum {\n    StringNewType(String),\n    StructVariant { floats: Vec<f32> },\n}\n\nlet schema = schema_for_value!(MyStruct {\n    my_int: 123,\n    my_bool: true,\n    my_nullable_enum: Some(MyEnum::StringNewType(\"foo\".to_string()))\n});\nprintln!(\"{}\", serde_json::to_string_pretty(&schema).unwrap());\n```\n\n<details>\n<summary>Click to see the output JSON schema...</summary>\n\n```json\n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n    \"title\": \"MyStruct\",\n    \"examples\": [\n        {\n            \"my_bool\": true,\n            \"my_int\": 123,\n            \"my_nullable_enum\": {\n                \"StringNewType\": \"foo\"\n            }\n        }\n    ],\n    \"type\": \"object\",\n    \"properties\": {\n        \"my_bool\": {\n            \"type\": \"boolean\"\n        },\n        \"my_int\": {\n            \"type\": \"integer\"\n        },\n        \"my_nullable_enum\": true\n    }\n}\n```\n</details>\n\n## Feature Flags\n- `derive` (enabled by default) - provides `#[derive(JsonSchema)]` macro\n- `impl_json_schema` - implements `JsonSchema` for Schemars types themselves\n- `preserve_order` - keep the order of struct fields in `Schema` and `SchemaObject`\n\n## Optional Dependencies\nSchemars can implement `JsonSchema` on types from several popular crates, enabled via optional dependencies (dependency versions are shown in brackets):\n- [`chrono`](https://crates.io/crates/chrono) (^0.4)\n- [`indexmap`](https://crates.io/crates/indexmap) (^1.2)\n- [`either`](https://crates.io/crates/either) (^1.3)\n- [`uuid`](https://crates.io/crates/uuid) (^0.8)\n- [`smallvec`](https://crates.io/crates/smallvec) (^1.0)\n- [`arrayvec`](https://crates.io/crates/arrayvec) (^0.5)\n- [`url`](https://crates.io/crates/url) (^2.0)\n- [`bytes`](https://crates.io/crates/bytes) (^1.0)\n*/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":24,"byte_end":7980,"line_start":2,"line_end":272,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":3},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8321,"byte_end":8324,"line_start":280,"line_end":280,"column_start":10,"column_end":13},"name":"Map","qualname":"::Map","value":"std::collections::BTreeMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":" The map type used by schemars types.","sig":null,"attributes":[{"value":"/ The map type used by schemars types.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":7982,"byte_end":8022,"line_start":274,"line_end":274,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8023,"byte_end":8026,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ Currently a `BTreeMap` or `IndexMap` can be used, but this may change to a different implementation","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8027,"byte_end":8130,"line_start":276,"line_end":276,"column_start":1,"column_end":104}},{"value":"/ with a similar interface in a future version of schemars.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8131,"byte_end":8192,"line_start":277,"line_end":277,"column_start":1,"column_end":62}},{"value":"/ The `IndexMap` will be used when the `preserve_order` feature flag is set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8193,"byte_end":8271,"line_start":278,"line_end":278,"column_start":1,"column_end":79}},{"value":"cfg(not(feature = \"preserve_order\"))","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8272,"byte_end":8311,"line_start":279,"line_end":279,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":6},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8643,"byte_end":8646,"line_start":287,"line_end":287,"column_start":10,"column_end":13},"name":"Set","qualname":"::Set","value":"std::collections::BTreeSet<T>","parent":null,"children":[],"decl_id":null,"docs":" The set type used by schemars types.","sig":null,"attributes":[{"value":"/ The set type used by schemars types.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8449,"byte_end":8489,"line_start":283,"line_end":283,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8490,"byte_end":8493,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ Currently a `BTreeSet`, but this may change to a different implementation","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8494,"byte_end":8571,"line_start":285,"line_end":285,"column_start":1,"column_end":78}},{"value":"/ with a similar interface in a future version of schemars.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8572,"byte_end":8633,"line_start":286,"line_end":286,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":8},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8961,"byte_end":8969,"line_start":294,"line_end":294,"column_start":10,"column_end":18},"name":"MapEntry","qualname":"::MapEntry","value":"std::collections::btree_map::Entry","parent":null,"children":[],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.\n This is constructed from the `entry` method on `BTreeMap` or `IndexMap`,\n depending on whether the `preserve_order` feature flag is set.\n","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8684,"byte_end":8764,"line_start":289,"line_end":289,"column_start":1,"column_end":81}},{"value":"/ This is constructed from the `entry` method on `BTreeMap` or `IndexMap`,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8768,"byte_end":8844,"line_start":291,"line_end":291,"column_start":1,"column_end":77}},{"value":"/ depending on whether the `preserve_order` feature flag is set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8845,"byte_end":8911,"line_start":292,"line_end":292,"column_start":1,"column_end":67}},{"value":"cfg(not(feature = \"preserve_order\"))","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":8912,"byte_end":8951,"line_start":293,"line_end":293,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":12724,"byte_end":12731,"line_start":9,"line_end":9,"column_start":12,"column_end":19},"name":"flatten","qualname":"<Schema>::flatten","value":"pub fn flatten(Self, Self) -> Schema","parent":null,"children":[],"decl_id":null,"docs":" This function is only public for use by schemars_derive.","sig":null,"attributes":[{"value":"/ This function is only public for use by schemars_derive.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":12565,"byte_end":12625,"line_start":5,"line_end":5,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":12630,"byte_end":12633,"line_start":6,"line_end":6,"column_start":5,"column_end":8}},{"value":"/ It should not be considered part of the public API.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":12638,"byte_end":12693,"line_start":7,"line_end":7,"column_start":5,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":414},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/_private.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"_private","qualname":"::_private","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/_private.rs","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":436}],"decl_id":null,"docs":" This module is only public for use by `schemars_derive`. It should not need to be used by code\n outside of `schemars`, and should not be considered part of the public API.\n","sig":null,"attributes":[{"value":"/ This module is only public for use by `schemars_derive`. It should not need to be used by code","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9197,"byte_end":9295,"line_start":304,"line_end":304,"column_start":1,"column_end":99}},{"value":"/ outside of `schemars`, and should not be considered part of the public API.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9296,"byte_end":9375,"line_start":305,"line_end":305,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":434},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/_private.rs","byte_start":63750,"byte_end":63773,"line_start":7,"line_end":7,"column_start":8,"column_end":31},"name":"json_schema_for_flatten","qualname":"::_private::json_schema_for_flatten","value":"pub fn json_schema_for_flatten<T: ?Sized +\n                               JsonSchema>(&mut SchemaGenerator, bool)\n-> Schema","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":436},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/_private.rs","byte_start":64222,"byte_end":64236,"line_start":26,"line_end":26,"column_start":8,"column_end":22},"name":"apply_metadata","qualname":"::_private::apply_metadata","value":"pub fn apply_metadata(Schema, Metadata) -> Schema","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":437},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gen","qualname":"::gen","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":1467},{"krate":0,"index":1475},{"krate":0,"index":1477},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":1479},{"krate":0,"index":1483},{"krate":0,"index":1485},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":516},{"krate":0,"index":1487},{"krate":0,"index":1490},{"krate":0,"index":1493},{"krate":0,"index":1496},{"krate":0,"index":518}],"decl_id":null,"docs":"JSON Schema generator and settings.","sig":null,"attributes":[{"value":"*\nJSON Schema generator and settings.\n\nThis module is useful if you want more control over how the schema generated than the [`schema_for!`] macro gives you.\nThere are two main types in this module:two main types in this module:\n* [`SchemaSettings`], which defines what JSON Schema features should be used when generating schemas (for example, how `Option`s should be represented).\n* [`SchemaGenerator`], which manages the generation of a schema document.\n*/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":64566,"byte_end":65026,"line_start":1,"line_end":8,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1467},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65646,"byte_end":65660,"line_start":21,"line_end":21,"column_start":12,"column_end":26},"name":"SchemaSettings","qualname":"::gen::SchemaSettings","value":"SchemaSettings { option_nullable, option_add_null_type, definitions_path, meta_schema, visitors, inline_subschemas }","parent":null,"children":[{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474}],"decl_id":null,"docs":" Settings to customize how Schemas are generated.","sig":null,"attributes":[{"value":"/ Settings to customize how Schemas are generated.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65193,"byte_end":65245,"line_start":16,"line_end":16,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65246,"byte_end":65249,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The default settings currently conform to [JSON Schema Draft 7](https://json-schema.org/specification-links.html#draft-7), but this is liable to change in a future version of Schemars if support for other JSON Schema versions is added.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65250,"byte_end":65489,"line_start":18,"line_end":18,"column_start":1,"column_end":240}},{"value":"/ If you require your generated schemas to conform to draft 7, consider using the [`draft07`](#method.draft07) method.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65490,"byte_end":65610,"line_start":19,"line_end":19,"column_start":1,"column_end":121}}]},{"kind":"Field","id":{"krate":0,"index":1468},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65895,"byte_end":65910,"line_start":27,"line_end":27,"column_start":9,"column_end":24},"name":"option_nullable","qualname":"::gen::SchemaSettings::option_nullable","value":"bool","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":" If `true`, schemas for [`Option<T>`](Option) will include a `nullable` property.","sig":null,"attributes":[{"value":"/ If `true`, schemas for [`Option<T>`](Option) will include a `nullable` property.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65667,"byte_end":65751,"line_start":22,"line_end":22,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65756,"byte_end":65759,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ This is not part of the JSON Schema spec, but is used in Swagger/OpenAPI schemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65764,"byte_end":65849,"line_start":24,"line_end":24,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65854,"byte_end":65857,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ Defaults to `false`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65862,"byte_end":65886,"line_start":26,"line_end":26,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":1469},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66119,"byte_end":66139,"line_start":31,"line_end":31,"column_start":9,"column_end":29},"name":"option_add_null_type","qualname":"::gen::SchemaSettings::option_add_null_type","value":"bool","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":" If `true`, schemas for [`Option<T>`](Option) will have `null` added to their [`type`](../schema/struct.SchemaObject.html#structfield.instance_type).","sig":null,"attributes":[{"value":"/ If `true`, schemas for [`Option<T>`](Option) will have `null` added to their [`type`](../schema/struct.SchemaObject.html#structfield.instance_type).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":65922,"byte_end":66074,"line_start":28,"line_end":28,"column_start":5,"column_end":157}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66079,"byte_end":66082,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Defaults to `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66087,"byte_end":66110,"line_start":30,"line_end":30,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1470},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66313,"byte_end":66329,"line_start":35,"line_end":35,"column_start":9,"column_end":25},"name":"definitions_path","qualname":"::gen::SchemaSettings::definitions_path","value":"std::string::String","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":" A JSON pointer to the expected location of referenceable subschemas within the resulting root schema.","sig":null,"attributes":[{"value":"/ A JSON pointer to the expected location of referenceable subschemas within the resulting root schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66151,"byte_end":66256,"line_start":32,"line_end":32,"column_start":5,"column_end":110}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66261,"byte_end":66264,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ Defaults to `\"#/definitions/\"`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66269,"byte_end":66304,"line_start":34,"line_end":34,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1471},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66506,"byte_end":66517,"line_start":39,"line_end":39,"column_start":9,"column_end":20},"name":"meta_schema","qualname":"::gen::SchemaSettings::meta_schema","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":" The URI of the meta-schema describing the structure of the generated schemas.","sig":null,"attributes":[{"value":"/ The URI of the meta-schema describing the structure of the generated schemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66343,"byte_end":66424,"line_start":36,"line_end":36,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66429,"byte_end":66432,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ Defaults to `\"http://json-schema.org/draft-07/schema#\"`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66437,"byte_end":66497,"line_start":38,"line_end":38,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":1472},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66618,"byte_end":66626,"line_start":41,"line_end":41,"column_start":9,"column_end":17},"name":"visitors","qualname":"::gen::SchemaSettings::visitors","value":"std::vec::Vec<std::boxed::Box<(dyn gen::GenVisitor + 'static)>>","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":" A list of visitors that get applied to all generated root schemas.\n","sig":null,"attributes":[{"value":"/ A list of visitors that get applied to all generated root schemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66539,"byte_end":66609,"line_start":40,"line_end":40,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1473},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66845,"byte_end":66862,"line_start":47,"line_end":47,"column_start":9,"column_end":26},"name":"inline_subschemas","qualname":"::gen::SchemaSettings::inline_subschemas","value":"bool","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":" Inline all subschemas instead of using references.","sig":null,"attributes":[{"value":"/ Inline all subschemas instead of using references.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66658,"byte_end":66712,"line_start":42,"line_end":42,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66717,"byte_end":66720,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Some references may still be generated in schemas for recursive types.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66725,"byte_end":66799,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66804,"byte_end":66807,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Defaults to `false`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66812,"byte_end":66836,"line_start":46,"line_end":46,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":67167,"byte_end":67174,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"draft07","qualname":"<SchemaSettings>::draft07","value":"pub fn draft07() -> SchemaSettings","parent":null,"children":[],"decl_id":null,"docs":" Creates `SchemaSettings` that conform to [JSON Schema Draft 7](https://json-schema.org/specification-links.html#draft-7).\n","sig":null,"attributes":[{"value":"/ Creates `SchemaSettings` that conform to [JSON Schema Draft 7](https://json-schema.org/specification-links.html#draft-7).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":67030,"byte_end":67155,"line_start":58,"line_end":58,"column_start":5,"column_end":130}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":67746,"byte_end":67758,"line_start":72,"line_end":72,"column_start":12,"column_end":24},"name":"draft2019_09","qualname":"<SchemaSettings>::draft2019_09","value":"pub fn draft2019_09() -> SchemaSettings","parent":null,"children":[],"decl_id":null,"docs":" Creates `SchemaSettings` that conform to [JSON Schema 2019-09](https://json-schema.org/specification-links.html#2019-09-formerly-known-as-draft-8).\n","sig":null,"attributes":[{"value":"/ Creates `SchemaSettings` that conform to [JSON Schema 2019-09](https://json-schema.org/specification-links.html#2019-09-formerly-known-as-draft-8).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":67583,"byte_end":67734,"line_start":71,"line_end":71,"column_start":5,"column_end":156}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":68313,"byte_end":68321,"line_start":85,"line_end":85,"column_start":12,"column_end":20},"name":"openapi3","qualname":"<SchemaSettings>::openapi3","value":"pub fn openapi3() -> SchemaSettings","parent":null,"children":[],"decl_id":null,"docs":" Creates `SchemaSettings` that conform to [OpenAPI 3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject).\n","sig":null,"attributes":[{"value":"/ Creates `SchemaSettings` that conform to [OpenAPI 3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":68153,"byte_end":68301,"line_start":84,"line_end":84,"column_start":5,"column_end":153}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69475,"byte_end":69479,"line_start":120,"line_end":120,"column_start":12,"column_end":16},"name":"with","qualname":"<SchemaSettings>::with","value":"pub fn with<impl FnOnce(&mut Self): FnOnce(&mut Self) ->\n            ()>(Self, impl FnOnce(&mut Self)) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Modifies the `SchemaSettings` by calling the given function.","sig":null,"attributes":[{"value":"/ Modifies the `SchemaSettings` by calling the given function.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69080,"byte_end":69144,"line_start":108,"line_end":108,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69149,"byte_end":69152,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69157,"byte_end":69170,"line_start":110,"line_end":110,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69175,"byte_end":69182,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"/ use schemars::gen::{SchemaGenerator, SchemaSettings};","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69187,"byte_end":69244,"line_start":112,"line_end":112,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69249,"byte_end":69252,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ let settings = SchemaSettings::default().with(|s| {","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69257,"byte_end":69312,"line_start":114,"line_end":114,"column_start":5,"column_end":60}},{"value":"/     s.option_nullable = true;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69317,"byte_end":69350,"line_start":115,"line_end":115,"column_start":5,"column_end":38}},{"value":"/     s.option_add_null_type = false;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69355,"byte_end":69394,"line_start":116,"line_end":116,"column_start":5,"column_end":44}},{"value":"/ });","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69399,"byte_end":69406,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ let gen = settings.into_generator();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69411,"byte_end":69451,"line_start":118,"line_end":118,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69456,"byte_end":69463,"line_start":119,"line_end":119,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69716,"byte_end":69728,"line_start":126,"line_end":126,"column_start":12,"column_end":24},"name":"with_visitor","qualname":"<SchemaSettings>::with_visitor","value":"pub fn with_visitor<impl Visitor + Debug + Clone + 'static: Visitor + Debug +\n                    Clone +\n                    'static>(Self, impl Visitor + Debug + Clone + 'static)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Appends the given visitor to the list of [visitors](SchemaSettings::visitors) for these `SchemaSettings`.\n","sig":null,"attributes":[{"value":"/ Appends the given visitor to the list of [visitors](SchemaSettings::visitors) for these `SchemaSettings`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69595,"byte_end":69704,"line_start":125,"line_end":125,"column_start":5,"column_end":114}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69940,"byte_end":69954,"line_start":132,"line_end":132,"column_start":12,"column_end":26},"name":"into_generator","qualname":"<SchemaSettings>::into_generator","value":"pub fn into_generator(Self) -> SchemaGenerator","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`SchemaGenerator`] using these settings.\n","sig":null,"attributes":[{"value":"/ Creates a new [`SchemaGenerator`] using these settings.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":69869,"byte_end":69928,"line_start":131,"line_end":131,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1479},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70379,"byte_end":70394,"line_start":152,"line_end":152,"column_start":12,"column_end":27},"name":"SchemaGenerator","qualname":"::gen::SchemaGenerator","value":"SchemaGenerator {  }","parent":null,"children":[{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482}],"decl_id":null,"docs":" The main type used to generate JSON Schemas.","sig":null,"attributes":[{"value":"/ The main type used to generate JSON Schemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70026,"byte_end":70074,"line_start":137,"line_end":137,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70075,"byte_end":70078,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70079,"byte_end":70092,"line_start":139,"line_end":139,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70093,"byte_end":70100,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/ use schemars::{JsonSchema, gen::SchemaGenerator};","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70101,"byte_end":70154,"line_start":141,"line_end":141,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70155,"byte_end":70158,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ #[derive(JsonSchema)]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70159,"byte_end":70184,"line_start":143,"line_end":143,"column_start":1,"column_end":26}},{"value":"/ struct MyStruct {","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70185,"byte_end":70206,"line_start":144,"line_end":144,"column_start":1,"column_end":22}},{"value":"/     foo: i32,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70207,"byte_end":70224,"line_start":145,"line_end":145,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70225,"byte_end":70230,"line_start":146,"line_end":146,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70231,"byte_end":70234,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ let gen = SchemaGenerator::default();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70235,"byte_end":70276,"line_start":148,"line_end":148,"column_start":1,"column_end":42}},{"value":"/ let schema = gen.into_root_schema_for::<MyStruct>();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70277,"byte_end":70333,"line_start":149,"line_end":149,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70334,"byte_end":70341,"line_start":150,"line_end":150,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70993,"byte_end":70996,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<SchemaGenerator>::new","value":"pub fn new(SchemaSettings) -> SchemaGenerator","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `SchemaGenerator` using the given settings.\n","sig":null,"attributes":[{"value":"/ Creates a new `SchemaGenerator` using the given settings.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70920,"byte_end":70981,"line_start":175,"line_end":175,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71482,"byte_end":71490,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"settings","qualname":"<SchemaGenerator>::settings","value":"pub fn settings(&Self) -> &SchemaSettings","parent":null,"children":[],"decl_id":null,"docs":" Borrows the [`SchemaSettings`] being used by this `SchemaGenerator`.","sig":null,"attributes":[{"value":"/ Borrows the [`SchemaSettings`] being used by this `SchemaGenerator`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71146,"byte_end":71218,"line_start":183,"line_end":183,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71223,"byte_end":71226,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71231,"byte_end":71244,"line_start":185,"line_end":185,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71249,"byte_end":71256,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ use schemars::gen::SchemaGenerator;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71261,"byte_end":71300,"line_start":187,"line_end":187,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71305,"byte_end":71308,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ let gen = SchemaGenerator::default();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71313,"byte_end":71354,"line_start":189,"line_end":189,"column_start":5,"column_end":46}},{"value":"/ let settings = gen.settings();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71359,"byte_end":71393,"line_start":190,"line_end":190,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71398,"byte_end":71401,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(settings.option_add_null_type, true);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71406,"byte_end":71458,"line_start":192,"line_end":192,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71463,"byte_end":71470,"line_start":193,"line_end":193,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71620,"byte_end":71635,"line_start":199,"line_end":199,"column_start":12,"column_end":27},"name":"make_extensible","qualname":"<SchemaGenerator>::make_extensible","value":"pub fn make_extensible(&Self, &mut SchemaObject)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated = \"This method no longer has any effect.\"","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71553,"byte_end":71608,"line_start":198,"line_end":198,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71741,"byte_end":71755,"line_start":202,"line_end":202,"column_start":12,"column_end":26},"name":"schema_for_any","qualname":"<SchemaGenerator>::schema_for_any","value":"pub fn schema_for_any(&Self) -> Schema","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated = \"Use `Schema::Bool(true)` instead\"","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71679,"byte_end":71729,"line_start":201,"line_end":201,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71876,"byte_end":71891,"line_start":207,"line_end":207,"column_start":12,"column_end":27},"name":"schema_for_none","qualname":"<SchemaGenerator>::schema_for_none","value":"pub fn schema_for_none(&Self) -> Schema","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated = \"Use `Schema::Bool(false)` instead\"","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71813,"byte_end":71864,"line_start":206,"line_end":206,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":72545,"byte_end":72558,"line_start":218,"line_end":218,"column_start":12,"column_end":25},"name":"subschema_for","qualname":"<SchemaGenerator>::subschema_for","value":"pub fn subschema_for<T: ?Sized + JsonSchema>(&mut Self) -> Schema","parent":null,"children":[],"decl_id":null,"docs":" Generates a JSON Schema for the type `T`, and returns either the schema itself or a `$ref` schema referencing `T`'s schema.","sig":null,"attributes":[{"value":"/ Generates a JSON Schema for the type `T`, and returns either the schema itself or a `$ref` schema referencing `T`'s schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":71950,"byte_end":72077,"line_start":211,"line_end":211,"column_start":5,"column_end":132}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":72082,"byte_end":72085,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ If `T` is [referenceable](JsonSchema::is_referenceable), this will add `T`'s schema to this generator's definitions, and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":72090,"byte_end":72214,"line_start":213,"line_end":213,"column_start":5,"column_end":129}},{"value":"/ return a `$ref` schema referencing that schema. Otherwise, this method behaves identically to [`JsonSchema::json_schema`].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":72219,"byte_end":72345,"line_start":214,"line_end":214,"column_start":5,"column_end":131}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":72350,"byte_end":72353,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ If `T`'s schema depends on any [referenceable](JsonSchema::is_referenceable) schemas, then this method will","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":72358,"byte_end":72469,"line_start":216,"line_end":216,"column_start":5,"column_end":116}},{"value":"/ add them to the `SchemaGenerator`'s schema definitions.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":72474,"byte_end":72533,"line_start":217,"line_end":217,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":73806,"byte_end":73817,"line_start":248,"line_end":248,"column_start":12,"column_end":23},"name":"definitions","qualname":"<SchemaGenerator>::definitions","value":"pub fn definitions(&Self) -> &Map<String, Schema>","parent":null,"children":[],"decl_id":null,"docs":" Borrows the collection of all [referenceable](JsonSchema::is_referenceable) schemas that have been generated.","sig":null,"attributes":[{"value":"/ Borrows the collection of all [referenceable](JsonSchema::is_referenceable) schemas that have been generated.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":73534,"byte_end":73647,"line_start":244,"line_end":244,"column_start":5,"column_end":118}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":73652,"byte_end":73655,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ The keys of the returned `Map` are the [schema names](JsonSchema::schema_name), and the values are the schemas","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":73660,"byte_end":73774,"line_start":246,"line_end":246,"column_start":5,"column_end":119}},{"value":"/ themselves.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":73779,"byte_end":73794,"line_start":247,"line_end":247,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74168,"byte_end":74183,"line_start":256,"line_end":256,"column_start":12,"column_end":27},"name":"definitions_mut","qualname":"<SchemaGenerator>::definitions_mut","value":"pub fn definitions_mut(&mut Self) -> &mut Map<String, Schema>","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrows the collection of all [referenceable](JsonSchema::is_referenceable) schemas that have been generated.","sig":null,"attributes":[{"value":"/ Mutably borrows the collection of all [referenceable](JsonSchema::is_referenceable) schemas that have been generated.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":73888,"byte_end":74009,"line_start":252,"line_end":252,"column_start":5,"column_end":126}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74014,"byte_end":74017,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ The keys of the returned `Map` are the [schema names](JsonSchema::schema_name), and the values are the schemas","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74022,"byte_end":74136,"line_start":254,"line_end":254,"column_start":5,"column_end":119}},{"value":"/ themselves.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74141,"byte_end":74156,"line_start":255,"line_end":255,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74581,"byte_end":74597,"line_start":265,"line_end":265,"column_start":12,"column_end":28},"name":"take_definitions","qualname":"<SchemaGenerator>::take_definitions","value":"pub fn take_definitions(&mut Self) -> Map<String, Schema>","parent":null,"children":[],"decl_id":null,"docs":" Returns the collection of all [referenceable](JsonSchema::is_referenceable) schemas that have been generated,\n leaving an empty map in its place.","sig":null,"attributes":[{"value":"/ Returns the collection of all [referenceable](JsonSchema::is_referenceable) schemas that have been generated,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74266,"byte_end":74379,"line_start":260,"line_end":260,"column_start":5,"column_end":118}},{"value":"/ leaving an empty map in its place.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74384,"byte_end":74422,"line_start":261,"line_end":261,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74427,"byte_end":74430,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ The keys of the returned `Map` are the [schema names](JsonSchema::schema_name), and the values are the schemas","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74435,"byte_end":74549,"line_start":263,"line_end":263,"column_start":5,"column_end":119}},{"value":"/ themselves.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74554,"byte_end":74569,"line_start":264,"line_end":264,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74829,"byte_end":74841,"line_start":270,"line_end":270,"column_start":12,"column_end":24},"name":"visitors_mut","qualname":"<SchemaGenerator>::visitors_mut","value":"pub fn visitors_mut(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the [visitors](SchemaSettings::visitors) being used by this `SchemaGenerator`.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the [visitors](SchemaSettings::visitors) being used by this `SchemaGenerator`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74710,"byte_end":74817,"line_start":269,"line_end":269,"column_start":5,"column_end":112}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":75352,"byte_end":75367,"line_start":279,"line_end":279,"column_start":12,"column_end":27},"name":"root_schema_for","qualname":"<SchemaGenerator>::root_schema_for","value":"pub fn root_schema_for<T: ?Sized + JsonSchema>(&mut Self) -> RootSchema","parent":null,"children":[],"decl_id":null,"docs":" Generates a root JSON Schema for the type `T`.","sig":null,"attributes":[{"value":"/ Generates a root JSON Schema for the type `T`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":74973,"byte_end":75023,"line_start":274,"line_end":274,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":75028,"byte_end":75031,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ If `T`'s schema depends on any [referenceable](JsonSchema::is_referenceable) schemas, then this method will","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":75036,"byte_end":75147,"line_start":276,"line_end":276,"column_start":5,"column_end":116}},{"value":"/ add them to the `SchemaGenerator`'s schema definitions and include them in the returned `SchemaObject`'s","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":75152,"byte_end":75260,"line_start":277,"line_end":277,"column_start":5,"column_end":113}},{"value":"/ [`definitions`](../schema/struct.Metadata.html#structfield.definitions)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":75265,"byte_end":75340,"line_start":278,"line_end":278,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":76235,"byte_end":76255,"line_start":300,"line_end":300,"column_start":12,"column_end":32},"name":"into_root_schema_for","qualname":"<SchemaGenerator>::into_root_schema_for","value":"pub fn into_root_schema_for<T: ?Sized + JsonSchema>(Self) -> RootSchema","parent":null,"children":[],"decl_id":null,"docs":" Consumes `self` and generates a root JSON Schema for the type `T`.","sig":null,"attributes":[{"value":"/ Consumes `self` and generates a root JSON Schema for the type `T`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":75903,"byte_end":75973,"line_start":296,"line_end":296,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":75978,"byte_end":75981,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ If `T`'s schema depends on any [referenceable](JsonSchema::is_referenceable) schemas, then this method will","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":75986,"byte_end":76097,"line_start":298,"line_end":298,"column_start":5,"column_end":116}},{"value":"/ include them in the returned `SchemaObject`'s [`definitions`](../schema/struct.Metadata.html#structfield.definitions)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":76102,"byte_end":76223,"line_start":299,"line_end":299,"column_start":5,"column_end":126}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":77108,"byte_end":77129,"line_start":321,"line_end":321,"column_start":12,"column_end":33},"name":"root_schema_for_value","qualname":"<SchemaGenerator>::root_schema_for_value","value":"pub fn root_schema_for_value<T: ?Sized + Serialize>(&mut Self, &T)\n-> Result<RootSchema, serde_json::Error>","parent":null,"children":[],"decl_id":null,"docs":" Generates a root JSON Schema for the given example value.","sig":null,"attributes":[{"value":"/ Generates a root JSON Schema for the given example value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":76774,"byte_end":76835,"line_start":317,"line_end":317,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":76840,"byte_end":76843,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ If the value implements [`JsonSchema`](crate::JsonSchema), then prefer using the [`root_schema_for()`](Self::root_schema_for())","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":76848,"byte_end":76979,"line_start":319,"line_end":319,"column_start":5,"column_end":136}},{"value":"/ function which will generally produce a more precise schema, particularly when the value contains any enums.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":76984,"byte_end":77096,"line_start":320,"line_end":320,"column_start":5,"column_end":117}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":78239,"byte_end":78265,"line_start":353,"line_end":353,"column_start":12,"column_end":38},"name":"into_root_schema_for_value","qualname":"<SchemaGenerator>::into_root_schema_for_value","value":"pub fn into_root_schema_for_value<T: ?Sized + Serialize>(Self, &T)\n-> Result<RootSchema, serde_json::Error>","parent":null,"children":[],"decl_id":null,"docs":" Consumes `self` and generates a root JSON Schema for the given example value.","sig":null,"attributes":[{"value":"/ Consumes `self` and generates a root JSON Schema for the given example value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":77873,"byte_end":77954,"line_start":349,"line_end":349,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":77959,"byte_end":77962,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ If the value  implements [`JsonSchema`](crate::JsonSchema), then prefer using the [`into_root_schema_for()!`](Self::into_root_schema_for())","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":77967,"byte_end":78110,"line_start":351,"line_end":351,"column_start":5,"column_end":148}},{"value":"/ function which will generally produce a more precise schema, particularly when the value contains any enums.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":78115,"byte_end":78227,"line_start":352,"line_end":352,"column_start":5,"column_end":117}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79936,"byte_end":79947,"line_start":406,"line_end":406,"column_start":12,"column_end":23},"name":"dereference","qualname":"<SchemaGenerator>::dereference","value":"pub fn dereference<'a>(&'a Self, &Schema) -> Option<&'a Schema>","parent":null,"children":[],"decl_id":null,"docs":" Attemps to find the schema that the given `schema` is referencing.","sig":null,"attributes":[{"value":"/ Attemps to find the schema that the given `schema` is referencing.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":78997,"byte_end":79067,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79072,"byte_end":79075,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ If the given `schema` has a [`$ref`](../schema/struct.SchemaObject.html#structfield.reference) property which refers","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79080,"byte_end":79200,"line_start":383,"line_end":383,"column_start":5,"column_end":125}},{"value":"/ to another schema in `self`'s schema definitions, the referenced schema will be returned. Otherwise, returns `None`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79205,"byte_end":79325,"line_start":384,"line_end":384,"column_start":5,"column_end":125}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79330,"byte_end":79333,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79338,"byte_end":79351,"line_start":386,"line_end":386,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79356,"byte_end":79363,"line_start":387,"line_end":387,"column_start":5,"column_end":12}},{"value":"/ use schemars::{JsonSchema, gen::SchemaGenerator};","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79368,"byte_end":79421,"line_start":388,"line_end":388,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79426,"byte_end":79429,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ #[derive(JsonSchema)]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79434,"byte_end":79459,"line_start":390,"line_end":390,"column_start":5,"column_end":30}},{"value":"/ struct MyStruct {","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79464,"byte_end":79485,"line_start":391,"line_end":391,"column_start":5,"column_end":26}},{"value":"/     foo: i32,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79490,"byte_end":79507,"line_start":392,"line_end":392,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79512,"byte_end":79517,"line_start":393,"line_end":393,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79522,"byte_end":79525,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let mut gen = SchemaGenerator::default();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79530,"byte_end":79575,"line_start":395,"line_end":395,"column_start":5,"column_end":50}},{"value":"/ let ref_schema = gen.subschema_for::<MyStruct>();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79580,"byte_end":79633,"line_start":396,"line_end":396,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79638,"byte_end":79641,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ assert!(ref_schema.is_ref());","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79646,"byte_end":79679,"line_start":398,"line_end":398,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79684,"byte_end":79687,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ let dereferenced = gen.dereference(&ref_schema);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79692,"byte_end":79744,"line_start":400,"line_end":400,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79749,"byte_end":79752,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ assert!(dereferenced.is_some());","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79757,"byte_end":79793,"line_start":402,"line_end":402,"column_start":5,"column_end":41}},{"value":"/ assert!(!dereferenced.unwrap().is_ref());","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79798,"byte_end":79843,"line_start":403,"line_end":403,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(dereferenced, gen.definitions().get(\"MyStruct\"));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79848,"byte_end":79912,"line_start":404,"line_end":404,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":79917,"byte_end":79924,"line_start":405,"line_end":405,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":516},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":82016,"byte_end":82026,"line_start":472,"line_end":472,"column_start":11,"column_end":21},"name":"GenVisitor","qualname":"::gen::GenVisitor","value":"GenVisitor: Visitor + Debug + DynClone + Any","parent":null,"children":[{"krate":0,"index":517}],"decl_id":null,"docs":" A [Visitor](Visitor) which implements additional traits required to be included in a [SchemaSettings].","sig":null,"attributes":[{"value":"/ A [Visitor](Visitor) which implements additional traits required to be included in a [SchemaSettings].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81352,"byte_end":81458,"line_start":451,"line_end":451,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81459,"byte_end":81462,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ You will rarely need to use this trait directly as it is automatically implemented for any type which implements all of:","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81463,"byte_end":81587,"line_start":453,"line_end":453,"column_start":1,"column_end":125}},{"value":"/ - [`Visitor`]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81588,"byte_end":81605,"line_start":454,"line_end":454,"column_start":1,"column_end":18}},{"value":"/ - [`std::fmt::Debug`]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81606,"byte_end":81631,"line_start":455,"line_end":455,"column_start":1,"column_end":26}},{"value":"/ - [`std::any::Any`] (implemented for all `'static` types)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81632,"byte_end":81693,"line_start":456,"line_end":456,"column_start":1,"column_end":62}},{"value":"/ - [`std::clone::Clone`]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81694,"byte_end":81721,"line_start":457,"line_end":457,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81722,"byte_end":81725,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81726,"byte_end":81739,"line_start":459,"line_end":459,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81740,"byte_end":81747,"line_start":460,"line_end":460,"column_start":1,"column_end":8}},{"value":"/ use schemars::visit::Visitor;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81748,"byte_end":81781,"line_start":461,"line_end":461,"column_start":1,"column_end":34}},{"value":"/ use schemars::gen::GenVisitor;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81782,"byte_end":81816,"line_start":462,"line_end":462,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81817,"byte_end":81820,"line_start":463,"line_end":463,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Clone)]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81821,"byte_end":81848,"line_start":464,"line_end":464,"column_start":1,"column_end":28}},{"value":"/ struct MyVisitor;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81849,"byte_end":81870,"line_start":465,"line_end":465,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81871,"byte_end":81874,"line_start":466,"line_end":466,"column_start":1,"column_end":4}},{"value":"/ impl Visitor for MyVisitor { }","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81875,"byte_end":81909,"line_start":467,"line_end":467,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81910,"byte_end":81913,"line_start":468,"line_end":468,"column_start":1,"column_end":4}},{"value":"/ let v: &dyn GenVisitor = &MyVisitor;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81914,"byte_end":81954,"line_start":469,"line_end":469,"column_start":1,"column_end":41}},{"value":"/ assert!(v.as_any().is::<MyVisitor>());","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81955,"byte_end":81997,"line_start":470,"line_end":470,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81998,"byte_end":82005,"line_start":471,"line_end":471,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":82183,"byte_end":82189,"line_start":474,"line_end":474,"column_start":8,"column_end":14},"name":"as_any","qualname":"::gen::GenVisitor::as_any","value":"pub fn as_any(&Self) -> &dyn Any","parent":{"krate":0,"index":516},"children":[],"decl_id":null,"docs":" Upcasts this visitor into an `Any`, which can be used to inspect and manipulate it as its concrete type.\n","sig":null,"attributes":[{"value":"/ Upcasts this visitor into an `Any`, which can be used to inspect and manipulate it as its concrete type.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":82067,"byte_end":82175,"line_start":473,"line_end":473,"column_start":5,"column_end":113}}]},{"kind":"Mod","id":{"krate":0,"index":521},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"schema","qualname":"::schema","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":526},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":1520},{"krate":0,"index":1499},{"krate":0,"index":1505},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1517},{"krate":0,"index":542},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":1613},{"krate":0,"index":1527},{"krate":0,"index":1533},{"krate":0,"index":1603},{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1611},{"krate":0,"index":1718},{"krate":0,"index":1617},{"krate":0,"index":1623},{"krate":0,"index":1708},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1713},{"krate":0,"index":1716},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":563},{"krate":0,"index":1827},{"krate":0,"index":1737},{"krate":0,"index":1743},{"krate":0,"index":1817},{"krate":0,"index":1819},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":565},{"krate":0,"index":1905},{"krate":0,"index":1836},{"krate":0,"index":1842},{"krate":0,"index":1895},{"krate":0,"index":1897},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":1903},{"krate":0,"index":1978},{"krate":0,"index":1913},{"krate":0,"index":1919},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1976},{"krate":0,"index":2045},{"krate":0,"index":1984},{"krate":0,"index":1990},{"krate":0,"index":2035},{"krate":0,"index":2037},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2043},{"krate":0,"index":2116},{"krate":0,"index":2049},{"krate":0,"index":2055},{"krate":0,"index":2106},{"krate":0,"index":2108},{"krate":0,"index":2110},{"krate":0,"index":2111},{"krate":0,"index":2114},{"krate":0,"index":2192},{"krate":0,"index":2123},{"krate":0,"index":2129},{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2190},{"krate":0,"index":2273},{"krate":0,"index":2200},{"krate":0,"index":2206},{"krate":0,"index":2255},{"krate":0,"index":2257},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2266},{"krate":0,"index":2268},{"krate":0,"index":2270},{"krate":0,"index":2326},{"krate":0,"index":2288},{"krate":0,"index":2295},{"krate":0,"index":2303},{"krate":0,"index":2306},{"krate":0,"index":2309},{"krate":0,"index":2311},{"krate":0,"index":2315},{"krate":0,"index":2317},{"krate":0,"index":2320},{"krate":0,"index":2323},{"krate":0,"index":566},{"krate":0,"index":569},{"krate":0,"index":572}],"decl_id":null,"docs":"JSON Schema types.\n","sig":null,"attributes":[{"value":"*\nJSON Schema types.\n*/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":82872,"byte_end":82897,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1521},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83540,"byte_end":83544,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"Bool","qualname":"::schema::Schema::Bool","value":"Schema::Bool(bool)","parent":{"krate":0,"index":1520},"children":[],"decl_id":null,"docs":" A trivial boolean JSON Schema.","sig":null,"attributes":[{"value":"/ A trivial boolean JSON Schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83342,"byte_end":83376,"line_start":20,"line_end":20,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83381,"byte_end":83384,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ The schema `true` matches everything (always passes validation), whereas the schema `false`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83389,"byte_end":83484,"line_start":22,"line_end":22,"column_start":5,"column_end":100}},{"value":"/ matches nothing (always fails validation).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83489,"byte_end":83535,"line_start":23,"line_end":23,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1524},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83586,"byte_end":83592,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Object","qualname":"::schema::Schema::Object","value":"Schema::Object(SchemaObject)","parent":{"krate":0,"index":1520},"children":[],"decl_id":null,"docs":" A JSON Schema object.\n","sig":null,"attributes":[{"value":"/ A JSON Schema object.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83556,"byte_end":83581,"line_start":25,"line_end":25,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":1520},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83329,"byte_end":83335,"line_start":19,"line_end":19,"column_start":10,"column_end":16},"name":"Schema","qualname":"::schema::Schema","value":"pub enum Schema { Bool(bool), Object(SchemaObject), }","parent":null,"children":[{"krate":0,"index":1521},{"krate":0,"index":1524}],"decl_id":null,"docs":" A JSON Schema.\n","sig":null,"attributes":[{"value":"/ A JSON Schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83124,"byte_end":83142,"line_start":14,"line_end":14,"column_start":1,"column_end":19}},{"value":"allow(clippy :: large_enum_variant)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83143,"byte_end":83179,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"serde(untagged)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83301,"byte_end":83319,"line_start":18,"line_end":18,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83868,"byte_end":83875,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"new_ref","qualname":"<Schema>::new_ref","value":"pub fn new_ref(String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `$ref` schema.","sig":null,"attributes":[{"value":"/ Creates a new `$ref` schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83629,"byte_end":83661,"line_start":30,"line_end":30,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83666,"byte_end":83669,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ The given reference string should be a URI reference. This will usually be a JSON Pointer","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83674,"byte_end":83767,"line_start":32,"line_end":32,"column_start":5,"column_end":98}},{"value":"/ in [URI Fragment representation](https://tools.ietf.org/html/rfc6901#section-6).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83772,"byte_end":83856,"line_start":33,"line_end":33,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84208,"byte_end":84214,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"is_ref","qualname":"<Schema>::is_ref","value":"pub fn is_ref(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` is a `$ref` schema.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is a `$ref` schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83964,"byte_end":84012,"line_start":38,"line_end":38,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84017,"byte_end":84020,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ If `self` is a [`SchemaObject`] with `Some` [`reference`](struct.SchemaObject.html#structfield.reference) set, this returns `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84025,"byte_end":84160,"line_start":40,"line_end":40,"column_start":5,"column_end":140}},{"value":"/ Otherwise, returns `false`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84165,"byte_end":84196,"line_start":41,"line_end":41,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84768,"byte_end":84779,"line_start":61,"line_end":61,"column_start":12,"column_end":23},"name":"into_object","qualname":"<Schema>::into_object","value":"pub fn into_object(Self) -> SchemaObject","parent":null,"children":[],"decl_id":null,"docs":" Converts the given schema (if it is a boolean schema) into an equivalent schema object.","sig":null,"attributes":[{"value":"/ Converts the given schema (if it is a boolean schema) into an equivalent schema object.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84343,"byte_end":84434,"line_start":49,"line_end":49,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84439,"byte_end":84442,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ If the given schema is already a schema object, this has no effect.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84447,"byte_end":84518,"line_start":51,"line_end":51,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84523,"byte_end":84526,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84531,"byte_end":84544,"line_start":53,"line_end":53,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84549,"byte_end":84556,"line_start":54,"line_end":54,"column_start":5,"column_end":12}},{"value":"/ use schemars::schema::{Schema, SchemaObject};","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84561,"byte_end":84610,"line_start":55,"line_end":55,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84615,"byte_end":84618,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ let bool_schema = Schema::Bool(true);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84623,"byte_end":84664,"line_start":57,"line_end":57,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84669,"byte_end":84672,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(bool_schema.into_object(), SchemaObject::default());","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84677,"byte_end":84744,"line_start":59,"line_end":59,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":84749,"byte_end":84756,"line_start":60,"line_end":60,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1613},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85677,"byte_end":85687,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"RootSchema","qualname":"::schema::RootSchema","value":"RootSchema { meta_schema, schema, definitions }","parent":null,"children":[{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1616}],"decl_id":null,"docs":" The root object of a JSON Schema document.\n","sig":null,"attributes":[{"value":"/ The root object of a JSON Schema document.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85445,"byte_end":85491,"line_start":88,"line_end":88,"column_start":1,"column_end":47}},{"value":"serde(rename_all = \"camelCase\", default)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85622,"byte_end":85665,"line_start":91,"line_end":91,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1614},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85940,"byte_end":85951,"line_start":97,"line_end":97,"column_start":9,"column_end":20},"name":"meta_schema","qualname":"::schema::RootSchema::meta_schema","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1613},"children":[],"decl_id":null,"docs":" The `$schema` keyword.","sig":null,"attributes":[{"value":"/ The `$schema` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85694,"byte_end":85720,"line_start":93,"line_end":93,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85725,"byte_end":85728,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 8.1.1. The \"$schema\" Keyword](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-8.1.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85733,"byte_end":85857,"line_start":95,"line_end":95,"column_start":5,"column_end":129}},{"value":"serde(rename = \"$schema\", skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85862,"byte_end":85931,"line_start":96,"line_end":96,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":1615},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86031,"byte_end":86037,"line_start":100,"line_end":100,"column_start":9,"column_end":15},"name":"schema","qualname":"::schema::RootSchema::schema","value":"schema::SchemaObject","parent":{"krate":0,"index":1613},"children":[],"decl_id":null,"docs":" The root schema itself.\n","sig":null,"attributes":[{"value":"/ The root schema itself.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85973,"byte_end":86000,"line_start":98,"line_end":98,"column_start":5,"column_end":32}},{"value":"serde(flatten)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86005,"byte_end":86022,"line_start":99,"line_end":99,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":1616},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86628,"byte_end":86639,"line_start":109,"line_end":109,"column_start":9,"column_end":20},"name":"definitions","qualname":"::schema::RootSchema::definitions","value":"std::collections::BTreeMap<std::string::String, schema::Schema>","parent":{"krate":0,"index":1613},"children":[],"decl_id":null,"docs":" The `definitions` keyword.","sig":null,"attributes":[{"value":"/ The `definitions` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86057,"byte_end":86087,"line_start":101,"line_end":101,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86092,"byte_end":86095,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ In JSON Schema draft 2019-09 this was replaced by $defs, but in Schemars this is still","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86100,"byte_end":86190,"line_start":103,"line_end":103,"column_start":5,"column_end":95}},{"value":"/ serialized as `definitions` for backward-compatibility.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86195,"byte_end":86254,"line_start":104,"line_end":104,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86259,"byte_end":86262,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 8.2.5. Schema Re-Use With \"$defs\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-8.2.5),","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86267,"byte_end":86396,"line_start":106,"line_end":106,"column_start":5,"column_end":134}},{"value":"/ and [JSON Schema (draft 07) 9. Schema Re-Use With \"definitions\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-9).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86401,"byte_end":86550,"line_start":107,"line_end":107,"column_start":5,"column_end":154}},{"value":"serde(alias = \"$defs\", skip_serializing_if = \"Map::is_empty\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86555,"byte_end":86619,"line_start":108,"line_end":108,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1718},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86876,"byte_end":86888,"line_start":116,"line_end":116,"column_start":12,"column_end":24},"name":"SchemaObject","qualname":"::schema::SchemaObject","value":"SchemaObject { metadata, instance_type, format, enum_values, const_value, subschemas, number, string, array, object, reference, extensions }","parent":null,"children":[{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730}],"decl_id":null,"docs":" A JSON Schema object.\n","sig":null,"attributes":[{"value":"/ A JSON Schema object.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86665,"byte_end":86690,"line_start":112,"line_end":112,"column_start":1,"column_end":26}},{"value":"serde(rename_all = \"camelCase\", default)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86821,"byte_end":86864,"line_start":115,"line_end":115,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1719},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87099,"byte_end":87107,"line_start":119,"line_end":119,"column_start":9,"column_end":17},"name":"metadata","qualname":"::schema::SchemaObject::metadata","value":"std::option::Option<std::boxed::Box<schema::Metadata>>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Properties which annotate the [`SchemaObject`] which typically have no effect when an object is being validated against the schema.\n","sig":null,"attributes":[{"value":"/ Properties which annotate the [`SchemaObject`] which typically have no effect when an object is being validated against the schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":86895,"byte_end":87030,"line_start":117,"line_end":117,"column_start":5,"column_end":140}},{"value":"serde(flatten, deserialize_with = \"skip_if_default\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87035,"byte_end":87090,"line_start":118,"line_end":118,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1720},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87509,"byte_end":87522,"line_start":125,"line_end":125,"column_start":9,"column_end":22},"name":"instance_type","qualname":"::schema::SchemaObject::instance_type","value":"std::option::Option<schema::SingleOrVec<schema::InstanceType>>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" The `type` keyword.","sig":null,"attributes":[{"value":"/ The `type` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87136,"byte_end":87159,"line_start":120,"line_end":120,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87164,"byte_end":87167,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.1.1. \"type\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.1.1)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87172,"byte_end":87302,"line_start":122,"line_end":122,"column_start":5,"column_end":135}},{"value":"/ and [JSON Schema 4.2.1. Instance Data Model](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-4.2.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87307,"byte_end":87429,"line_start":123,"line_end":123,"column_start":5,"column_end":127}},{"value":"serde(rename = \"type\", skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87434,"byte_end":87500,"line_start":124,"line_end":124,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1721},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87828,"byte_end":87834,"line_start":130,"line_end":130,"column_start":9,"column_end":15},"name":"format","qualname":"::schema::SchemaObject::format","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" The `format` keyword.","sig":null,"attributes":[{"value":"/ The `format` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87563,"byte_end":87588,"line_start":126,"line_end":126,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87593,"byte_end":87596,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 7. A Vocabulary for Semantic Content With \"format\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-7).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87601,"byte_end":87765,"line_start":128,"line_end":128,"column_start":5,"column_end":169}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87770,"byte_end":87819,"line_start":129,"line_end":129,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1722},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88102,"byte_end":88113,"line_start":135,"line_end":135,"column_start":9,"column_end":20},"name":"enum_values","qualname":"::schema::SchemaObject::enum_values","value":"std::option::Option<std::vec::Vec<serde_json::Value>>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" The `enum` keyword.","sig":null,"attributes":[{"value":"/ The `enum` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87856,"byte_end":87879,"line_start":131,"line_end":131,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87884,"byte_end":87887,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.1.2. \"enum\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.1.2)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":87892,"byte_end":88022,"line_start":133,"line_end":133,"column_start":5,"column_end":135}},{"value":"serde(rename = \"enum\", skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88027,"byte_end":88093,"line_start":134,"line_end":134,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1723},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88451,"byte_end":88462,"line_start":144,"line_end":144,"column_start":9,"column_end":20},"name":"const_value","qualname":"::schema::SchemaObject::const_value","value":"std::option::Option<serde_json::Value>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" The `const` keyword.","sig":null,"attributes":[{"value":"/ The `const` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88139,"byte_end":88163,"line_start":136,"line_end":136,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88168,"byte_end":88171,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.1.3. \"const\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.1.3)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88176,"byte_end":88307,"line_start":138,"line_end":138,"column_start":5,"column_end":136}},{"value":"serde(rename = \"const\", skip_serializing_if = \"Option::is_none\",\n        deserialize_with = \"allow_null\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88312,"byte_end":88442,"line_start":139,"line_end":143,"column_start":5,"column_end":7}}]},{"kind":"Field","id":{"krate":0,"index":1724},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88652,"byte_end":88662,"line_start":147,"line_end":147,"column_start":9,"column_end":19},"name":"subschemas","qualname":"::schema::SchemaObject::subschemas","value":"std::option::Option<std::boxed::Box<schema::SubschemaValidation>>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Properties of the [`SchemaObject`] which define validation assertions in terms of other schemas.\n","sig":null,"attributes":[{"value":"/ Properties of the [`SchemaObject`] which define validation assertions in terms of other schemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88483,"byte_end":88583,"line_start":145,"line_end":145,"column_start":5,"column_end":105}},{"value":"serde(flatten, deserialize_with = \"skip_if_default\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88588,"byte_end":88643,"line_start":146,"line_end":146,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1725},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88857,"byte_end":88863,"line_start":150,"line_end":150,"column_start":9,"column_end":15},"name":"number","qualname":"::schema::SchemaObject::number","value":"std::option::Option<std::boxed::Box<schema::NumberValidation>>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Properties of the [`SchemaObject`] which define validation assertions for numbers.\n","sig":null,"attributes":[{"value":"/ Properties of the [`SchemaObject`] which define validation assertions for numbers.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88702,"byte_end":88788,"line_start":148,"line_end":148,"column_start":5,"column_end":91}},{"value":"serde(flatten, deserialize_with = \"skip_if_default\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88793,"byte_end":88848,"line_start":149,"line_end":149,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1726},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89055,"byte_end":89061,"line_start":153,"line_end":153,"column_start":9,"column_end":15},"name":"string","qualname":"::schema::SchemaObject::string","value":"std::option::Option<std::boxed::Box<schema::StringValidation>>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Properties of the [`SchemaObject`] which define validation assertions for strings.\n","sig":null,"attributes":[{"value":"/ Properties of the [`SchemaObject`] which define validation assertions for strings.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88900,"byte_end":88986,"line_start":151,"line_end":151,"column_start":5,"column_end":91}},{"value":"serde(flatten, deserialize_with = \"skip_if_default\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":88991,"byte_end":89046,"line_start":152,"line_end":152,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1727},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89252,"byte_end":89257,"line_start":156,"line_end":156,"column_start":9,"column_end":14},"name":"array","qualname":"::schema::SchemaObject::array","value":"std::option::Option<std::boxed::Box<schema::ArrayValidation>>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Properties of the [`SchemaObject`] which define validation assertions for arrays.\n","sig":null,"attributes":[{"value":"/ Properties of the [`SchemaObject`] which define validation assertions for arrays.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89098,"byte_end":89183,"line_start":154,"line_end":154,"column_start":5,"column_end":90}},{"value":"serde(flatten, deserialize_with = \"skip_if_default\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89188,"byte_end":89243,"line_start":155,"line_end":155,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1728},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89448,"byte_end":89454,"line_start":159,"line_end":159,"column_start":9,"column_end":15},"name":"object","qualname":"::schema::SchemaObject::object","value":"std::option::Option<std::boxed::Box<schema::ObjectValidation>>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Properties of the [`SchemaObject`] which define validation assertions for objects.\n","sig":null,"attributes":[{"value":"/ Properties of the [`SchemaObject`] which define validation assertions for objects.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89293,"byte_end":89379,"line_start":157,"line_end":157,"column_start":5,"column_end":91}},{"value":"serde(flatten, deserialize_with = \"skip_if_default\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89384,"byte_end":89439,"line_start":158,"line_end":158,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1729},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89743,"byte_end":89752,"line_start":164,"line_end":164,"column_start":9,"column_end":18},"name":"reference","qualname":"::schema::SchemaObject::reference","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" The `$ref` keyword.","sig":null,"attributes":[{"value":"/ The `$ref` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89491,"byte_end":89514,"line_start":160,"line_end":160,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89519,"byte_end":89522,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 8.2.4.1. Direct References with \"$ref\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-8.2.4.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89527,"byte_end":89663,"line_start":162,"line_end":162,"column_start":5,"column_end":141}},{"value":"serde(rename = \"$ref\", skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89668,"byte_end":89734,"line_start":163,"line_end":163,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1730},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89926,"byte_end":89936,"line_start":167,"line_end":167,"column_start":9,"column_end":19},"name":"extensions","qualname":"::schema::SchemaObject::extensions","value":"std::collections::BTreeMap<std::string::String, serde_json::Value>","parent":{"krate":0,"index":1718},"children":[],"decl_id":null,"docs":" Arbitrary extra properties which are not part of the JSON Schema specification, or which `schemars` does not support.\n","sig":null,"attributes":[{"value":"/ Arbitrary extra properties which are not part of the JSON Schema specification, or which `schemars` does not support.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89774,"byte_end":89895,"line_start":165,"line_end":165,"column_start":5,"column_end":126}},{"value":"serde(flatten)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":89900,"byte_end":89917,"line_start":166,"line_end":166,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":559},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91452,"byte_end":91459,"line_start":219,"line_end":219,"column_start":12,"column_end":19},"name":"new_ref","qualname":"<SchemaObject>::new_ref","value":"pub fn new_ref(String) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `$ref` schema.","sig":null,"attributes":[{"value":"/ Creates a new `$ref` schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91213,"byte_end":91245,"line_start":215,"line_end":215,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91250,"byte_end":91253,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ The given reference string should be a URI reference. This will usually be a JSON Pointer","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91258,"byte_end":91351,"line_start":217,"line_end":217,"column_start":5,"column_end":98}},{"value":"/ in [URI Fragment representation](https://tools.ietf.org/html/rfc6901#section-6).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91356,"byte_end":91440,"line_start":218,"line_end":218,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91827,"byte_end":91833,"line_start":230,"line_end":230,"column_start":12,"column_end":18},"name":"is_ref","qualname":"<SchemaObject>::is_ref","value":"pub fn is_ref(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` is a `$ref` schema.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is a `$ref` schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91606,"byte_end":91654,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91659,"byte_end":91662,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ If `self` has `Some` [`reference`](struct.SchemaObject.html#structfield.reference) set, this returns `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91667,"byte_end":91779,"line_start":228,"line_end":228,"column_start":5,"column_end":117}},{"value":"/ Otherwise, returns `false`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91784,"byte_end":91815,"line_start":229,"line_end":229,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92265,"byte_end":92273,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"has_type","qualname":"<SchemaObject>::has_type","value":"pub fn has_type(&Self, InstanceType) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` accepts values of the given type, according to the [`instance_type`] field.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` accepts values of the given type, according to the [`instance_type`] field.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91895,"byte_end":91999,"line_start":234,"line_end":234,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92004,"byte_end":92007,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ This is a basic check that always returns `true` if no `instance_type` is specified on the schema,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92012,"byte_end":92114,"line_start":236,"line_end":236,"column_start":5,"column_end":107}},{"value":"/ and does not check any subschemas. Because of this, both `{}` and  `{\"not\": {}}` accept any type according","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92119,"byte_end":92229,"line_start":237,"line_end":237,"column_start":5,"column_end":115}},{"value":"/ to this method.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92234,"byte_end":92253,"line_start":238,"line_end":238,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1731},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92442,"byte_end":92450,"line_start":245,"line_end":245,"column_start":31,"column_end":39},"name":"metadata","qualname":"<SchemaObject>::metadata","value":"pub fn metadata(&mut Self) -> &mut Metadata","parent":null,"children":[],"decl_id":null,"docs":"Returns a mutable reference to this schema's [`Metadata`](#structfield.metadata), creating it if it was `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92493,"byte_end":92503,"line_start":246,"line_end":246,"column_start":31,"column_end":41},"name":"subschemas","qualname":"<SchemaObject>::subschemas","value":"pub fn subschemas(&mut Self) -> &mut SubschemaValidation","parent":null,"children":[],"decl_id":null,"docs":"Returns a mutable reference to this schema's [`SubschemaValidation`](#structfield.subschemas), creating it if it was `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1733},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92557,"byte_end":92563,"line_start":247,"line_end":247,"column_start":31,"column_end":37},"name":"number","qualname":"<SchemaObject>::number","value":"pub fn number(&mut Self) -> &mut NumberValidation","parent":null,"children":[],"decl_id":null,"docs":"Returns a mutable reference to this schema's [`NumberValidation`](#structfield.number), creating it if it was `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92614,"byte_end":92620,"line_start":248,"line_end":248,"column_start":31,"column_end":37},"name":"string","qualname":"<SchemaObject>::string","value":"pub fn string(&mut Self) -> &mut StringValidation","parent":null,"children":[],"decl_id":null,"docs":"Returns a mutable reference to this schema's [`StringValidation`](#structfield.string), creating it if it was `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1735},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92671,"byte_end":92676,"line_start":249,"line_end":249,"column_start":31,"column_end":36},"name":"array","qualname":"<SchemaObject>::array","value":"pub fn array(&mut Self) -> &mut ArrayValidation","parent":null,"children":[],"decl_id":null,"docs":"Returns a mutable reference to this schema's [`ArrayValidation`](#structfield.array), creating it if it was `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92726,"byte_end":92732,"line_start":250,"line_end":250,"column_start":31,"column_end":37},"name":"object","qualname":"<SchemaObject>::object","value":"pub fn object(&mut Self) -> &mut ObjectValidation","parent":null,"children":[],"decl_id":null,"docs":"Returns a mutable reference to this schema's [`ObjectValidation`](#structfield.object), creating it if it was `None`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1827},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93188,"byte_end":93196,"line_start":263,"line_end":263,"column_start":12,"column_end":20},"name":"Metadata","qualname":"::schema::Metadata","value":"Metadata { id, title, description, default, deprecated, read_only, write_only, examples }","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835}],"decl_id":null,"docs":" Properties which annotate a [`SchemaObject`] which typically have no effect when an object is being validated against the schema.\n","sig":null,"attributes":[{"value":"/ Properties which annotate a [`SchemaObject`] which typically have no effect when an object is being validated against the schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92869,"byte_end":93002,"line_start":259,"line_end":259,"column_start":1,"column_end":134}},{"value":"serde(rename_all = \"camelCase\", default)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93133,"byte_end":93176,"line_start":262,"line_end":262,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1828},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93437,"byte_end":93439,"line_start":268,"line_end":268,"column_start":9,"column_end":11},"name":"id","qualname":"::schema::Metadata::id","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":" The `$id` keyword.","sig":null,"attributes":[{"value":"/ The `$id` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93203,"byte_end":93225,"line_start":264,"line_end":264,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93230,"byte_end":93233,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 8.2.2. The \"$id\" Keyword](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-8.2.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93238,"byte_end":93358,"line_start":266,"line_end":266,"column_start":5,"column_end":125}},{"value":"serde(rename = \"$id\", skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93363,"byte_end":93428,"line_start":267,"line_end":267,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":1829},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93707,"byte_end":93712,"line_start":273,"line_end":273,"column_start":9,"column_end":14},"name":"title","qualname":"::schema::Metadata::title","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":" The `title` keyword.","sig":null,"attributes":[{"value":"/ The `title` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93461,"byte_end":93485,"line_start":269,"line_end":269,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93490,"byte_end":93493,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 9.1. \"title\" and \"description\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-9.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93498,"byte_end":93644,"line_start":271,"line_end":271,"column_start":5,"column_end":151}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93649,"byte_end":93698,"line_start":272,"line_end":272,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1830},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93986,"byte_end":93997,"line_start":278,"line_end":278,"column_start":9,"column_end":20},"name":"description","qualname":"::schema::Metadata::description","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":" The `description` keyword.","sig":null,"attributes":[{"value":"/ The `description` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93734,"byte_end":93764,"line_start":274,"line_end":274,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93769,"byte_end":93772,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 9.1. \"title\" and \"description\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-9.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93777,"byte_end":93923,"line_start":276,"line_end":276,"column_start":5,"column_end":151}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":93928,"byte_end":93977,"line_start":277,"line_end":277,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1831},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94306,"byte_end":94313,"line_start":286,"line_end":286,"column_start":9,"column_end":16},"name":"default","qualname":"::schema::Metadata::default","value":"std::option::Option<serde_json::Value>","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":" The `default` keyword.","sig":null,"attributes":[{"value":"/ The `default` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94019,"byte_end":94045,"line_start":279,"line_end":279,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94050,"byte_end":94053,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 9.2. \"default\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-9.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94058,"byte_end":94188,"line_start":281,"line_end":281,"column_start":5,"column_end":135}},{"value":"serde(skip_serializing_if = \"Option::is_none\", deserialize_with =\n        \"allow_null\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94193,"byte_end":94297,"line_start":282,"line_end":285,"column_start":5,"column_end":7}}]},{"kind":"Field","id":{"krate":0,"index":1832},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94565,"byte_end":94575,"line_start":291,"line_end":291,"column_start":9,"column_end":19},"name":"deprecated","qualname":"::schema::Metadata::deprecated","value":"bool","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":" The `deprecated` keyword.","sig":null,"attributes":[{"value":"/ The `deprecated` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94334,"byte_end":94363,"line_start":287,"line_end":287,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94368,"byte_end":94371,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 9.3. \"deprecated\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-9.3).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94376,"byte_end":94509,"line_start":289,"line_end":289,"column_start":5,"column_end":138}},{"value":"serde(skip_serializing_if = \"is_false\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94514,"byte_end":94556,"line_start":290,"line_end":290,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1833},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94830,"byte_end":94839,"line_start":296,"line_end":296,"column_start":9,"column_end":18},"name":"read_only","qualname":"::schema::Metadata::read_only","value":"bool","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":" The `readOnly` keyword.","sig":null,"attributes":[{"value":"/ The `readOnly` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94587,"byte_end":94614,"line_start":292,"line_end":292,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94619,"byte_end":94622,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 9.4. \"readOnly\" and \"writeOnly\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-9.4).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94627,"byte_end":94774,"line_start":294,"line_end":294,"column_start":5,"column_end":152}},{"value":"serde(skip_serializing_if = \"is_false\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94779,"byte_end":94821,"line_start":295,"line_end":295,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1834},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95095,"byte_end":95105,"line_start":301,"line_end":301,"column_start":9,"column_end":19},"name":"write_only","qualname":"::schema::Metadata::write_only","value":"bool","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":" The `writeOnly` keyword.","sig":null,"attributes":[{"value":"/ The `writeOnly` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94851,"byte_end":94879,"line_start":297,"line_end":297,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94884,"byte_end":94887,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 9.4. \"readOnly\" and \"writeOnly\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-9.4).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":94892,"byte_end":95039,"line_start":299,"line_end":299,"column_start":5,"column_end":152}},{"value":"serde(skip_serializing_if = \"is_false\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95044,"byte_end":95086,"line_start":300,"line_end":300,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1835},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95349,"byte_end":95357,"line_start":306,"line_end":306,"column_start":9,"column_end":17},"name":"examples","qualname":"::schema::Metadata::examples","value":"std::vec::Vec<serde_json::Value>","parent":{"krate":0,"index":1827},"children":[],"decl_id":null,"docs":" The `examples` keyword.","sig":null,"attributes":[{"value":"/ The `examples` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95117,"byte_end":95144,"line_start":302,"line_end":302,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95149,"byte_end":95152,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 9.5. \"examples\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-9.5).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95157,"byte_end":95288,"line_start":304,"line_end":304,"column_start":5,"column_end":136}},{"value":"serde(skip_serializing_if = \"Vec::is_empty\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95293,"byte_end":95340,"line_start":305,"line_end":305,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":1905},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95745,"byte_end":95764,"line_start":318,"line_end":318,"column_start":12,"column_end":31},"name":"SubschemaValidation","qualname":"::schema::SubschemaValidation","value":"SubschemaValidation { all_of, any_of, one_of, not, if_schema, then_schema, else_schema }","parent":null,"children":[{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912}],"decl_id":null,"docs":" Properties of a [`SchemaObject`] which define validation assertions in terms of other schemas.\n","sig":null,"attributes":[{"value":"/ Properties of a [`SchemaObject`] which define validation assertions in terms of other schemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95461,"byte_end":95559,"line_start":314,"line_end":314,"column_start":1,"column_end":99}},{"value":"serde(rename_all = \"camelCase\", default)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95690,"byte_end":95733,"line_start":317,"line_end":317,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1906},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95985,"byte_end":95991,"line_start":323,"line_end":323,"column_start":9,"column_end":15},"name":"all_of","qualname":"::schema::SubschemaValidation::all_of","value":"std::option::Option<std::vec::Vec<schema::Schema>>","parent":{"krate":0,"index":1905},"children":[],"decl_id":null,"docs":" The `allOf` keyword.","sig":null,"attributes":[{"value":"/ The `allOf` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95771,"byte_end":95795,"line_start":319,"line_end":319,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95800,"byte_end":95803,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.2.1.1. \"allOf\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.2.1.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95808,"byte_end":95922,"line_start":321,"line_end":321,"column_start":5,"column_end":119}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":95927,"byte_end":95976,"line_start":322,"line_end":322,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1907},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96232,"byte_end":96238,"line_start":328,"line_end":328,"column_start":9,"column_end":15},"name":"any_of","qualname":"::schema::SubschemaValidation::any_of","value":"std::option::Option<std::vec::Vec<schema::Schema>>","parent":{"krate":0,"index":1905},"children":[],"decl_id":null,"docs":" The `anyOf` keyword.","sig":null,"attributes":[{"value":"/ The `anyOf` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96018,"byte_end":96042,"line_start":324,"line_end":324,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96047,"byte_end":96050,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.2.1.2. \"anyOf\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.2.1.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96055,"byte_end":96169,"line_start":326,"line_end":326,"column_start":5,"column_end":119}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96174,"byte_end":96223,"line_start":327,"line_end":327,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1908},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96479,"byte_end":96485,"line_start":333,"line_end":333,"column_start":9,"column_end":15},"name":"one_of","qualname":"::schema::SubschemaValidation::one_of","value":"std::option::Option<std::vec::Vec<schema::Schema>>","parent":{"krate":0,"index":1905},"children":[],"decl_id":null,"docs":" The `oneOf` keyword.","sig":null,"attributes":[{"value":"/ The `oneOf` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96265,"byte_end":96289,"line_start":329,"line_end":329,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96294,"byte_end":96297,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.2.1.3. \"oneOf\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.2.1.3).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96302,"byte_end":96416,"line_start":331,"line_end":331,"column_start":5,"column_end":119}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96421,"byte_end":96470,"line_start":332,"line_end":332,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1909},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96722,"byte_end":96725,"line_start":338,"line_end":338,"column_start":9,"column_end":12},"name":"not","qualname":"::schema::SubschemaValidation::not","value":"std::option::Option<std::boxed::Box<schema::Schema>>","parent":{"krate":0,"index":1905},"children":[],"decl_id":null,"docs":" The `not` keyword.","sig":null,"attributes":[{"value":"/ The `not` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96512,"byte_end":96534,"line_start":334,"line_end":334,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96539,"byte_end":96542,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.2.1.4. \"not\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.2.1.4).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96547,"byte_end":96659,"line_start":336,"line_end":336,"column_start":5,"column_end":117}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96664,"byte_end":96713,"line_start":337,"line_end":337,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1910},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96975,"byte_end":96984,"line_start":343,"line_end":343,"column_start":9,"column_end":18},"name":"if_schema","qualname":"::schema::SubschemaValidation::if_schema","value":"std::option::Option<std::boxed::Box<schema::Schema>>","parent":{"krate":0,"index":1905},"children":[],"decl_id":null,"docs":" The `if` keyword.","sig":null,"attributes":[{"value":"/ The `if` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96752,"byte_end":96773,"line_start":339,"line_end":339,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96778,"byte_end":96781,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.2.2.1. \"if\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.2.2.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96786,"byte_end":96897,"line_start":341,"line_end":341,"column_start":5,"column_end":116}},{"value":"serde(rename = \"if\", skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":96902,"byte_end":96966,"line_start":342,"line_end":342,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1911},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97240,"byte_end":97251,"line_start":348,"line_end":348,"column_start":9,"column_end":20},"name":"then_schema","qualname":"::schema::SubschemaValidation::then_schema","value":"std::option::Option<std::boxed::Box<schema::Schema>>","parent":{"krate":0,"index":1905},"children":[],"decl_id":null,"docs":" The `then` keyword.","sig":null,"attributes":[{"value":"/ The `then` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97011,"byte_end":97034,"line_start":344,"line_end":344,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97039,"byte_end":97042,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.2.2.2. \"then\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.2.2.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97047,"byte_end":97160,"line_start":346,"line_end":346,"column_start":5,"column_end":118}},{"value":"serde(rename = \"then\", skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97165,"byte_end":97231,"line_start":347,"line_end":347,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1912},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97507,"byte_end":97518,"line_start":353,"line_end":353,"column_start":9,"column_end":20},"name":"else_schema","qualname":"::schema::SubschemaValidation::else_schema","value":"std::option::Option<std::boxed::Box<schema::Schema>>","parent":{"krate":0,"index":1905},"children":[],"decl_id":null,"docs":" The `else` keyword.","sig":null,"attributes":[{"value":"/ The `else` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97278,"byte_end":97301,"line_start":349,"line_end":349,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97306,"byte_end":97309,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.2.2.3. \"else\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.2.2.3).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97314,"byte_end":97427,"line_start":351,"line_end":351,"column_start":5,"column_end":118}},{"value":"serde(rename = \"else\", skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97432,"byte_end":97498,"line_start":352,"line_end":352,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1978},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97814,"byte_end":97830,"line_start":360,"line_end":360,"column_start":12,"column_end":28},"name":"NumberValidation","qualname":"::schema::NumberValidation","value":"NumberValidation { multiple_of, maximum, exclusive_maximum, minimum, exclusive_minimum }","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983}],"decl_id":null,"docs":" Properties of a [`SchemaObject`] which define validation assertions for numbers.\n","sig":null,"attributes":[{"value":"/ Properties of a [`SchemaObject`] which define validation assertions for numbers.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97544,"byte_end":97628,"line_start":356,"line_end":356,"column_start":1,"column_end":85}},{"value":"serde(rename_all = \"camelCase\", default)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97759,"byte_end":97802,"line_start":359,"line_end":359,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1979},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98079,"byte_end":98090,"line_start":365,"line_end":365,"column_start":9,"column_end":20},"name":"multiple_of","qualname":"::schema::NumberValidation::multiple_of","value":"std::option::Option<f64>","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" The `multipleOf` keyword.","sig":null,"attributes":[{"value":"/ The `multipleOf` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97837,"byte_end":97866,"line_start":361,"line_end":361,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97871,"byte_end":97874,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.2.1. \"multipleOf\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.2.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":97879,"byte_end":98016,"line_start":363,"line_end":363,"column_start":5,"column_end":142}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98021,"byte_end":98070,"line_start":364,"line_end":364,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1980},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98345,"byte_end":98352,"line_start":370,"line_end":370,"column_start":9,"column_end":16},"name":"maximum","qualname":"::schema::NumberValidation::maximum","value":"std::option::Option<f64>","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" The `maximum` keyword.","sig":null,"attributes":[{"value":"/ The `maximum` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98109,"byte_end":98135,"line_start":366,"line_end":366,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98140,"byte_end":98143,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.2.2. \"maximum\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.2.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98148,"byte_end":98282,"line_start":368,"line_end":368,"column_start":5,"column_end":139}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98287,"byte_end":98336,"line_start":369,"line_end":369,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1981},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98625,"byte_end":98642,"line_start":375,"line_end":375,"column_start":9,"column_end":26},"name":"exclusive_maximum","qualname":"::schema::NumberValidation::exclusive_maximum","value":"std::option::Option<f64>","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" The `exclusiveMaximum` keyword.","sig":null,"attributes":[{"value":"/ The `exclusiveMaximum` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98371,"byte_end":98406,"line_start":371,"line_end":371,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98411,"byte_end":98414,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.2.3. \"exclusiveMaximum\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.2.3).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98419,"byte_end":98562,"line_start":373,"line_end":373,"column_start":5,"column_end":148}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98567,"byte_end":98616,"line_start":374,"line_end":374,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1982},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98897,"byte_end":98904,"line_start":380,"line_end":380,"column_start":9,"column_end":16},"name":"minimum","qualname":"::schema::NumberValidation::minimum","value":"std::option::Option<f64>","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" The `minimum` keyword.","sig":null,"attributes":[{"value":"/ The `minimum` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98661,"byte_end":98687,"line_start":376,"line_end":376,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98692,"byte_end":98695,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.2.4. \"minimum\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.2.4).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98700,"byte_end":98834,"line_start":378,"line_end":378,"column_start":5,"column_end":139}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98839,"byte_end":98888,"line_start":379,"line_end":379,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1983},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99177,"byte_end":99194,"line_start":385,"line_end":385,"column_start":9,"column_end":26},"name":"exclusive_minimum","qualname":"::schema::NumberValidation::exclusive_minimum","value":"std::option::Option<f64>","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" The `exclusiveMinimum` keyword.","sig":null,"attributes":[{"value":"/ The `exclusiveMinimum` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98923,"byte_end":98958,"line_start":381,"line_end":381,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98963,"byte_end":98966,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.2.5. \"exclusiveMinimum\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.2.5).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":98971,"byte_end":99114,"line_start":383,"line_end":383,"column_start":5,"column_end":148}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99119,"byte_end":99168,"line_start":384,"line_end":384,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2045},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99482,"byte_end":99498,"line_start":392,"line_end":392,"column_start":12,"column_end":28},"name":"StringValidation","qualname":"::schema::StringValidation","value":"StringValidation { max_length, min_length, pattern }","parent":null,"children":[{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048}],"decl_id":null,"docs":" Properties of a [`SchemaObject`] which define validation assertions for strings.\n","sig":null,"attributes":[{"value":"/ Properties of a [`SchemaObject`] which define validation assertions for strings.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99212,"byte_end":99296,"line_start":388,"line_end":388,"column_start":1,"column_end":85}},{"value":"serde(rename_all = \"camelCase\", default)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99427,"byte_end":99470,"line_start":391,"line_end":391,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2046},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99745,"byte_end":99755,"line_start":397,"line_end":397,"column_start":9,"column_end":19},"name":"max_length","qualname":"::schema::StringValidation::max_length","value":"std::option::Option<u32>","parent":{"krate":0,"index":2045},"children":[],"decl_id":null,"docs":" The `maxLength` keyword.","sig":null,"attributes":[{"value":"/ The `maxLength` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99505,"byte_end":99533,"line_start":393,"line_end":393,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99538,"byte_end":99541,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.3.1. \"maxLength\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.3.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99546,"byte_end":99682,"line_start":395,"line_end":395,"column_start":5,"column_end":141}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99687,"byte_end":99736,"line_start":396,"line_end":396,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2047},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100014,"byte_end":100024,"line_start":402,"line_end":402,"column_start":9,"column_end":19},"name":"min_length","qualname":"::schema::StringValidation::min_length","value":"std::option::Option<u32>","parent":{"krate":0,"index":2045},"children":[],"decl_id":null,"docs":" The `minLength` keyword.","sig":null,"attributes":[{"value":"/ The `minLength` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99774,"byte_end":99802,"line_start":398,"line_end":398,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99807,"byte_end":99810,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.3.2. \"minLength\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.3.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99815,"byte_end":99951,"line_start":400,"line_end":400,"column_start":5,"column_end":141}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":99956,"byte_end":100005,"line_start":401,"line_end":401,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2048},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100279,"byte_end":100286,"line_start":407,"line_end":407,"column_start":9,"column_end":16},"name":"pattern","qualname":"::schema::StringValidation::pattern","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":2045},"children":[],"decl_id":null,"docs":" The `pattern` keyword.","sig":null,"attributes":[{"value":"/ The `pattern` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100043,"byte_end":100069,"line_start":403,"line_end":403,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100074,"byte_end":100077,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.3.3. \"pattern\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.3.3).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100082,"byte_end":100216,"line_start":405,"line_end":405,"column_start":5,"column_end":139}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100221,"byte_end":100270,"line_start":406,"line_end":406,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2116},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100576,"byte_end":100591,"line_start":414,"line_end":414,"column_start":12,"column_end":27},"name":"ArrayValidation","qualname":"::schema::ArrayValidation","value":"ArrayValidation { items, additional_items, max_items, min_items, unique_items, contains }","parent":null,"children":[{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122}],"decl_id":null,"docs":" Properties of a [`SchemaObject`] which define validation assertions for arrays.\n","sig":null,"attributes":[{"value":"/ Properties of a [`SchemaObject`] which define validation assertions for arrays.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100307,"byte_end":100390,"line_start":410,"line_end":410,"column_start":1,"column_end":84}},{"value":"serde(rename_all = \"camelCase\", default)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100521,"byte_end":100564,"line_start":413,"line_end":413,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2117},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100812,"byte_end":100817,"line_start":419,"line_end":419,"column_start":9,"column_end":14},"name":"items","qualname":"::schema::ArrayValidation::items","value":"std::option::Option<schema::SingleOrVec<schema::Schema>>","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" The `items` keyword.","sig":null,"attributes":[{"value":"/ The `items` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100598,"byte_end":100622,"line_start":415,"line_end":415,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100627,"byte_end":100630,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.3.1.1. \"items\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.3.1.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100635,"byte_end":100749,"line_start":417,"line_end":417,"column_start":5,"column_end":119}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100754,"byte_end":100803,"line_start":418,"line_end":418,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2118},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101086,"byte_end":101102,"line_start":424,"line_end":424,"column_start":9,"column_end":25},"name":"additional_items","qualname":"::schema::ArrayValidation::additional_items","value":"std::option::Option<std::boxed::Box<schema::Schema>>","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" The `additionalItems` keyword.","sig":null,"attributes":[{"value":"/ The `additionalItems` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100852,"byte_end":100886,"line_start":420,"line_end":420,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100891,"byte_end":100894,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.3.1.2. \"additionalItems\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.3.1.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":100899,"byte_end":101023,"line_start":422,"line_end":422,"column_start":5,"column_end":129}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101028,"byte_end":101077,"line_start":423,"line_end":423,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2119},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101367,"byte_end":101376,"line_start":429,"line_end":429,"column_start":9,"column_end":18},"name":"max_items","qualname":"::schema::ArrayValidation::max_items","value":"std::option::Option<u32>","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" The `maxItems` keyword.","sig":null,"attributes":[{"value":"/ The `maxItems` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101129,"byte_end":101156,"line_start":425,"line_end":425,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101161,"byte_end":101164,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.4.1. \"maxItems\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.4.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101169,"byte_end":101304,"line_start":427,"line_end":427,"column_start":5,"column_end":140}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101309,"byte_end":101358,"line_start":428,"line_end":428,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2120},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101633,"byte_end":101642,"line_start":434,"line_end":434,"column_start":9,"column_end":18},"name":"min_items","qualname":"::schema::ArrayValidation::min_items","value":"std::option::Option<u32>","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" The `minItems` keyword.","sig":null,"attributes":[{"value":"/ The `minItems` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101395,"byte_end":101422,"line_start":430,"line_end":430,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101427,"byte_end":101430,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.4.2. \"minItems\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.4.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101435,"byte_end":101570,"line_start":432,"line_end":432,"column_start":5,"column_end":140}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101575,"byte_end":101624,"line_start":433,"line_end":433,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2121},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101905,"byte_end":101917,"line_start":439,"line_end":439,"column_start":9,"column_end":21},"name":"unique_items","qualname":"::schema::ArrayValidation::unique_items","value":"std::option::Option<bool>","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" The `uniqueItems` keyword.","sig":null,"attributes":[{"value":"/ The `uniqueItems` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101661,"byte_end":101691,"line_start":435,"line_end":435,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101696,"byte_end":101699,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.4.3. \"uniqueItems\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.4.3).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101704,"byte_end":101842,"line_start":437,"line_end":437,"column_start":5,"column_end":143}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101847,"byte_end":101896,"line_start":438,"line_end":438,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2122},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102157,"byte_end":102165,"line_start":444,"line_end":444,"column_start":9,"column_end":17},"name":"contains","qualname":"::schema::ArrayValidation::contains","value":"std::option::Option<std::boxed::Box<schema::Schema>>","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":" The `contains` keyword.","sig":null,"attributes":[{"value":"/ The `contains` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101937,"byte_end":101964,"line_start":440,"line_end":440,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101969,"byte_end":101972,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.3.1.4. \"contains\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.3.1.4).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":101977,"byte_end":102094,"line_start":442,"line_end":442,"column_start":5,"column_end":122}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102099,"byte_end":102148,"line_start":443,"line_end":443,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2192},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102461,"byte_end":102477,"line_start":451,"line_end":451,"column_start":12,"column_end":28},"name":"ObjectValidation","qualname":"::schema::ObjectValidation","value":"ObjectValidation { max_properties, min_properties, required, properties, pattern_properties, additional_properties, property_names }","parent":null,"children":[{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":2199}],"decl_id":null,"docs":" Properties of a [`SchemaObject`] which define validation assertions for objects.\n","sig":null,"attributes":[{"value":"/ Properties of a [`SchemaObject`] which define validation assertions for objects.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102191,"byte_end":102275,"line_start":447,"line_end":447,"column_start":1,"column_end":85}},{"value":"serde(rename_all = \"camelCase\", default)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102406,"byte_end":102449,"line_start":450,"line_end":450,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2193},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102732,"byte_end":102746,"line_start":456,"line_end":456,"column_start":9,"column_end":23},"name":"max_properties","qualname":"::schema::ObjectValidation::max_properties","value":"std::option::Option<u32>","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" The `maxProperties` keyword.","sig":null,"attributes":[{"value":"/ The `maxProperties` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102484,"byte_end":102516,"line_start":452,"line_end":452,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102521,"byte_end":102524,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.5.1. \"maxProperties\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.5.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102529,"byte_end":102669,"line_start":454,"line_end":454,"column_start":5,"column_end":145}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102674,"byte_end":102723,"line_start":455,"line_end":455,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2194},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103013,"byte_end":103027,"line_start":461,"line_end":461,"column_start":9,"column_end":23},"name":"min_properties","qualname":"::schema::ObjectValidation::min_properties","value":"std::option::Option<u32>","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" The `minProperties` keyword.","sig":null,"attributes":[{"value":"/ The `minProperties` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102765,"byte_end":102797,"line_start":457,"line_end":457,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102802,"byte_end":102805,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.5.2. \"minProperties\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.5.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102810,"byte_end":102950,"line_start":459,"line_end":459,"column_start":5,"column_end":145}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":102955,"byte_end":103004,"line_start":460,"line_end":460,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2195},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103282,"byte_end":103290,"line_start":466,"line_end":466,"column_start":9,"column_end":17},"name":"required","qualname":"::schema::ObjectValidation::required","value":"std::collections::BTreeSet<std::string::String>","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" The `required` keyword.","sig":null,"attributes":[{"value":"/ The `required` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103046,"byte_end":103073,"line_start":462,"line_end":462,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103078,"byte_end":103081,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema Validation 6.5.3. \"required\"](https://tools.ietf.org/html/draft-handrews-json-schema-validation-02#section-6.5.3).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103086,"byte_end":103221,"line_start":464,"line_end":464,"column_start":5,"column_end":140}},{"value":"serde(skip_serializing_if = \"Set::is_empty\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103226,"byte_end":103273,"line_start":465,"line_end":465,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2196},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103531,"byte_end":103541,"line_start":471,"line_end":471,"column_start":9,"column_end":19},"name":"properties","qualname":"::schema::ObjectValidation::properties","value":"std::collections::BTreeMap<std::string::String, schema::Schema>","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" The `properties` keyword.","sig":null,"attributes":[{"value":"/ The `properties` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103309,"byte_end":103338,"line_start":467,"line_end":467,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103343,"byte_end":103346,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.3.2.1. \"properties\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.3.2.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103351,"byte_end":103470,"line_start":469,"line_end":469,"column_start":5,"column_end":124}},{"value":"serde(skip_serializing_if = \"Map::is_empty\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103475,"byte_end":103522,"line_start":470,"line_end":470,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2197},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103804,"byte_end":103822,"line_start":476,"line_end":476,"column_start":9,"column_end":27},"name":"pattern_properties","qualname":"::schema::ObjectValidation::pattern_properties","value":"std::collections::BTreeMap<std::string::String, schema::Schema>","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" The `patternProperties` keyword.","sig":null,"attributes":[{"value":"/ The `patternProperties` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103568,"byte_end":103604,"line_start":472,"line_end":472,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103609,"byte_end":103612,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.3.2.2. \"patternProperties\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.3.2.2).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103617,"byte_end":103743,"line_start":474,"line_end":474,"column_start":5,"column_end":131}},{"value":"serde(skip_serializing_if = \"Map::is_empty\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103748,"byte_end":103795,"line_start":475,"line_end":475,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2198},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104093,"byte_end":104114,"line_start":481,"line_end":481,"column_start":9,"column_end":30},"name":"additional_properties","qualname":"::schema::ObjectValidation::additional_properties","value":"std::option::Option<std::boxed::Box<schema::Schema>>","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" The `additionalProperties` keyword.","sig":null,"attributes":[{"value":"/ The `additionalProperties` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103849,"byte_end":103888,"line_start":477,"line_end":477,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103893,"byte_end":103896,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.3.2.3. \"additionalProperties\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.3.2.3).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":103901,"byte_end":104030,"line_start":479,"line_end":479,"column_start":5,"column_end":134}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104035,"byte_end":104084,"line_start":480,"line_end":480,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2199},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104371,"byte_end":104385,"line_start":486,"line_end":486,"column_start":9,"column_end":23},"name":"property_names","qualname":"::schema::ObjectValidation::property_names","value":"std::option::Option<std::boxed::Box<schema::Schema>>","parent":{"krate":0,"index":2192},"children":[],"decl_id":null,"docs":" The `propertyNames` keyword.","sig":null,"attributes":[{"value":"/ The `propertyNames` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104141,"byte_end":104173,"line_start":482,"line_end":482,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104178,"byte_end":104181,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ See [JSON Schema 9.3.2.5. \"propertyNames\"](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-9.3.2.5).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104186,"byte_end":104308,"line_start":484,"line_end":484,"column_start":5,"column_end":127}},{"value":"serde(skip_serializing_if = \"Option::is_none\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104313,"byte_end":104362,"line_start":485,"line_end":485,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2274},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104814,"byte_end":104818,"line_start":496,"line_end":496,"column_start":5,"column_end":9},"name":"Null","qualname":"::schema::InstanceType::Null","value":"InstanceType::Null","parent":{"krate":0,"index":2273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2276},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104824,"byte_end":104831,"line_start":497,"line_end":497,"column_start":5,"column_end":12},"name":"Boolean","qualname":"::schema::InstanceType::Boolean","value":"InstanceType::Boolean","parent":{"krate":0,"index":2273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2278},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104837,"byte_end":104843,"line_start":498,"line_end":498,"column_start":5,"column_end":11},"name":"Object","qualname":"::schema::InstanceType::Object","value":"InstanceType::Object","parent":{"krate":0,"index":2273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2280},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104849,"byte_end":104854,"line_start":499,"line_end":499,"column_start":5,"column_end":10},"name":"Array","qualname":"::schema::InstanceType::Array","value":"InstanceType::Array","parent":{"krate":0,"index":2273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2282},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104860,"byte_end":104866,"line_start":500,"line_end":500,"column_start":5,"column_end":11},"name":"Number","qualname":"::schema::InstanceType::Number","value":"InstanceType::Number","parent":{"krate":0,"index":2273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2284},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104872,"byte_end":104878,"line_start":501,"line_end":501,"column_start":5,"column_end":11},"name":"String","qualname":"::schema::InstanceType::String","value":"InstanceType::String","parent":{"krate":0,"index":2273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2286},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104884,"byte_end":104891,"line_start":502,"line_end":502,"column_start":5,"column_end":12},"name":"Integer","qualname":"::schema::InstanceType::Integer","value":"InstanceType::Integer","parent":{"krate":0,"index":2273},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2273},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104795,"byte_end":104807,"line_start":495,"line_end":495,"column_start":10,"column_end":22},"name":"InstanceType","qualname":"::schema::InstanceType","value":"pub enum InstanceType {\n    Null,\n    Boolean,\n    Object,\n    Array,\n    Number,\n    String,\n    Integer,\n}","parent":null,"children":[{"krate":0,"index":2274},{"krate":0,"index":2276},{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2282},{"krate":0,"index":2284},{"krate":0,"index":2286}],"decl_id":null,"docs":" The possible types of values in JSON Schema documents.","sig":null,"attributes":[{"value":"/ The possible types of values in JSON Schema documents.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104411,"byte_end":104469,"line_start":489,"line_end":489,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104470,"byte_end":104473,"line_start":490,"line_end":490,"column_start":1,"column_end":4}},{"value":"/ See [JSON Schema 4.2.1. Instance Data Model](https://tools.ietf.org/html/draft-handrews-json-schema-02#section-4.2.1).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104474,"byte_end":104596,"line_start":491,"line_end":491,"column_start":1,"column_end":123}},{"value":"serde(rename_all = \"camelCase\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104751,"byte_end":104785,"line_start":494,"line_end":494,"column_start":1,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2328},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105260,"byte_end":105266,"line_start":512,"line_end":512,"column_start":5,"column_end":11},"name":"Single","qualname":"::schema::SingleOrVec::Single","value":"SingleOrVec::Single(Box<T>)","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2331},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105280,"byte_end":105283,"line_start":513,"line_end":513,"column_start":5,"column_end":8},"name":"Vec","qualname":"::schema::SingleOrVec::Vec","value":"SingleOrVec::Vec(Vec<T>)","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2326},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105239,"byte_end":105250,"line_start":511,"line_end":511,"column_start":10,"column_end":21},"name":"SingleOrVec","qualname":"::schema::SingleOrVec","value":"pub enum SingleOrVec<T> { Single(Box<T>), Vec(Vec<T>), }","parent":null,"children":[{"krate":0,"index":2328},{"krate":0,"index":2331}],"decl_id":null,"docs":" A type which can be serialized as a single item, or multiple items.","sig":null,"attributes":[{"value":"/ A type which can be serialized as a single item, or multiple items.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104896,"byte_end":104967,"line_start":505,"line_end":505,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104968,"byte_end":104971,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ In some contexts, a `Single` may be semantically distinct from a `Vec` containing only item.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":104972,"byte_end":105068,"line_start":507,"line_end":507,"column_start":1,"column_end":97}},{"value":"serde(untagged)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105211,"byte_end":105229,"line_start":510,"line_end":510,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":106057,"byte_end":106065,"line_start":545,"line_end":545,"column_start":12,"column_end":20},"name":"contains","qualname":"<SingleOrVec<T>>::contains","value":"pub fn contains(&Self, &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` is either a `Single` equal to `x`, or a `Vec` containing `x`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is either a `Single` equal to `x`, or a `Vec` containing `x`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105577,"byte_end":105667,"line_start":529,"line_end":529,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105672,"byte_end":105675,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105680,"byte_end":105694,"line_start":531,"line_end":531,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105699,"byte_end":105702,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105707,"byte_end":105714,"line_start":533,"line_end":533,"column_start":5,"column_end":12}},{"value":"/ use schemars::schema::SingleOrVec;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105719,"byte_end":105757,"line_start":534,"line_end":534,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105762,"byte_end":105765,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ let s = SingleOrVec::from(10);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105770,"byte_end":105804,"line_start":536,"line_end":536,"column_start":5,"column_end":39}},{"value":"/ assert!(s.contains(&10));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105809,"byte_end":105838,"line_start":537,"line_end":537,"column_start":5,"column_end":34}},{"value":"/ assert!(!s.contains(&20));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105843,"byte_end":105873,"line_start":538,"line_end":538,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105878,"byte_end":105881,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ let v = SingleOrVec::from(vec![10, 20]);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105886,"byte_end":105930,"line_start":540,"line_end":540,"column_start":5,"column_end":49}},{"value":"/ assert!(v.contains(&10));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105935,"byte_end":105964,"line_start":541,"line_end":541,"column_start":5,"column_end":34}},{"value":"/ assert!(v.contains(&20));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105969,"byte_end":105998,"line_start":542,"line_end":542,"column_start":5,"column_end":34}},{"value":"/ assert!(!v.contains(&30));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":106003,"byte_end":106033,"line_start":543,"line_end":543,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":106038,"byte_end":106045,"line_start":544,"line_end":544,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":575},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"visit","qualname":"::visit","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":601},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2338},{"krate":0,"index":607},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":610},{"krate":0,"index":2346},{"krate":0,"index":2348},{"krate":0,"index":2350},{"krate":0,"index":612}],"decl_id":null,"docs":"Contains the [`Visitor`] trait, used to recursively modify a constructed schema and its subschemas.","sig":null,"attributes":[{"value":"*\nContains the [`Visitor`] trait, used to recursively modify a constructed schema and its subschemas.\n\nSometimes you may want to apply a change to a schema, as well as all schemas contained within it.\nThe easiest way to achieve this is by defining a type that implements [`Visitor`].\nAll methods of `Visitor` have a default implementation that makes no change but recursively visits all subschemas.\nWhen overriding one of these methods, you will *usually* want to still call this default implementation.\n\n# Example\nTo add a custom property to all schemas:\n```\nuse schemars::schema::SchemaObject;\nuse schemars::visit::{Visitor, visit_schema_object};\n\npub struct MyVisitor;\n\nimpl Visitor for MyVisitor {\n    fn visit_schema_object(&mut self, schema: &mut SchemaObject) {\n        // First, make our change to this schema\n        schema.extensions.insert(\"my_property\".to_string(), serde_json::json!(\"hello world\"));\n\n        // Then delegate to default implementation to visit any subschemas\n        visit_schema_object(self, schema);\n    }\n}\n```\n*/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":106785,"byte_end":107833,"line_start":1,"line_end":27,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":589},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":107991,"byte_end":107998,"line_start":31,"line_end":31,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::visit::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592}],"decl_id":null,"docs":" Trait used to recursively modify a constructed schema and its subschemas.\n","sig":null,"attributes":[{"value":"/ Trait used to recursively modify a constructed schema and its subschemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":107903,"byte_end":107980,"line_start":30,"line_end":30,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108228,"byte_end":108245,"line_start":35,"line_end":35,"column_start":8,"column_end":25},"name":"visit_root_schema","qualname":"::visit::Visitor::visit_root_schema","value":"pub fn visit_root_schema(&mut Self, &mut RootSchema)","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Override this method to modify a [`RootSchema`] and (optionally) its subschemas.","sig":null,"attributes":[{"value":"/ Override this method to modify a [`RootSchema`] and (optionally) its subschemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108005,"byte_end":108089,"line_start":32,"line_end":32,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108094,"byte_end":108097,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ When overriding this method, you will usually want to call the [`visit_root_schema`] function to visit subschemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108102,"byte_end":108220,"line_start":34,"line_end":34,"column_start":5,"column_end":123}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108545,"byte_end":108557,"line_start":42,"line_end":42,"column_start":8,"column_end":20},"name":"visit_schema","qualname":"::visit::Visitor::visit_schema","value":"pub fn visit_schema(&mut Self, &mut Schema)","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Override this method to modify a [`Schema`] and (optionally) its subschemas.","sig":null,"attributes":[{"value":"/ Override this method to modify a [`Schema`] and (optionally) its subschemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108331,"byte_end":108411,"line_start":39,"line_end":39,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108416,"byte_end":108419,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ When overriding this method, you will usually want to call the [`visit_schema`] function to visit subschemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108424,"byte_end":108537,"line_start":41,"line_end":41,"column_start":5,"column_end":118}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108865,"byte_end":108884,"line_start":49,"line_end":49,"column_start":8,"column_end":27},"name":"visit_schema_object","qualname":"::visit::Visitor::visit_schema_object","value":"pub fn visit_schema_object(&mut Self, &mut SchemaObject)","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Override this method to modify a [`SchemaObject`] and (optionally) its subschemas.","sig":null,"attributes":[{"value":"/ Override this method to modify a [`SchemaObject`] and (optionally) its subschemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108638,"byte_end":108724,"line_start":46,"line_end":46,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108729,"byte_end":108732,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ When overriding this method, you will usually want to call the [`visit_schema_object`] function to visit subschemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108737,"byte_end":108857,"line_start":48,"line_end":48,"column_start":5,"column_end":125}}]},{"kind":"Function","id":{"krate":0,"index":593},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":109032,"byte_end":109049,"line_start":55,"line_end":55,"column_start":8,"column_end":25},"name":"visit_root_schema","qualname":"::visit::visit_root_schema","value":"pub fn visit_root_schema<V: Visitor + ?Sized>(&mut V, &mut RootSchema)","parent":null,"children":[],"decl_id":null,"docs":" Visits all subschemas of the [`RootSchema`].\n","sig":null,"attributes":[{"value":"/ Visits all subschemas of the [`RootSchema`].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":108976,"byte_end":109024,"line_start":54,"line_end":54,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":595},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":109255,"byte_end":109267,"line_start":61,"line_end":61,"column_start":8,"column_end":20},"name":"visit_schema","qualname":"::visit::visit_schema","value":"pub fn visit_schema<V: Visitor + ?Sized>(&mut V, &mut Schema)","parent":null,"children":[],"decl_id":null,"docs":" Visits all subschemas of the [`Schema`].\n","sig":null,"attributes":[{"value":"/ Visits all subschemas of the [`Schema`].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":109203,"byte_end":109247,"line_start":60,"line_end":60,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":597},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":109473,"byte_end":109492,"line_start":68,"line_end":68,"column_start":8,"column_end":27},"name":"visit_schema_object","qualname":"::visit::visit_schema_object","value":"pub fn visit_schema_object<V: Visitor + ?Sized>(&mut V, &mut SchemaObject)","parent":null,"children":[],"decl_id":null,"docs":" Visits all subschemas of the [`SchemaObject`].\n","sig":null,"attributes":[{"value":"/ Visits all subschemas of the [`SchemaObject`].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":109415,"byte_end":109465,"line_start":67,"line_end":67,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":2334},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":111402,"byte_end":111420,"line_start":129,"line_end":129,"column_start":12,"column_end":30},"name":"ReplaceBoolSchemas","qualname":"::visit::ReplaceBoolSchemas","value":"ReplaceBoolSchemas { skip_additional_properties }","parent":null,"children":[{"krate":0,"index":2335}],"decl_id":null,"docs":" This visitor will replace all boolean JSON Schemas with equivalent object schemas.","sig":null,"attributes":[{"value":"/ This visitor will replace all boolean JSON Schemas with equivalent object schemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":111169,"byte_end":111255,"line_start":125,"line_end":125,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":111256,"byte_end":111259,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ This is useful for dialects of JSON Schema (e.g. OpenAPI 3.0) that do not support booleans as schemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":111260,"byte_end":111366,"line_start":127,"line_end":127,"column_start":1,"column_end":107}}]},{"kind":"Field","id":{"krate":0,"index":2335},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":111538,"byte_end":111564,"line_start":131,"line_end":131,"column_start":9,"column_end":35},"name":"skip_additional_properties","qualname":"::visit::ReplaceBoolSchemas::skip_additional_properties","value":"bool","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" When set to `true`, a schema's `additionalProperties` property will not be changed from a boolean.\n","sig":null,"attributes":[{"value":"/ When set to `true`, a schema's `additionalProperties` property will not be changed from a boolean.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":111427,"byte_end":111529,"line_start":130,"line_end":130,"column_start":5,"column_end":107}}]},{"kind":"Struct","id":{"krate":0,"index":2340},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":112779,"byte_end":112796,"line_start":166,"line_end":166,"column_start":12,"column_end":29},"name":"RemoveRefSiblings","qualname":"::visit::RemoveRefSiblings","value":"","parent":null,"children":[],"decl_id":null,"docs":" This visitor will restructure JSON Schema objects so that the `$ref` property will never appear alongside any other properties.","sig":null,"attributes":[{"value":"/ This visitor will restructure JSON Schema objects so that the `$ref` property will never appear alongside any other properties.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":112491,"byte_end":112622,"line_start":162,"line_end":162,"column_start":1,"column_end":132}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":112623,"byte_end":112626,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ This is useful for dialects of JSON Schema (e.g. Draft 7) that do not support other properties alongside `$ref`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":112627,"byte_end":112743,"line_start":164,"line_end":164,"column_start":1,"column_end":117}}]},{"kind":"Struct","id":{"krate":0,"index":2346},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":113727,"byte_end":113743,"line_start":191,"line_end":191,"column_start":12,"column_end":28},"name":"SetSingleExample","qualname":"::visit::SetSingleExample","value":"SetSingleExample { retain_examples }","parent":null,"children":[{"krate":0,"index":2347}],"decl_id":null,"docs":" This visitor will remove the `examples` schema property and (if present) set its first value as the `example` property.","sig":null,"attributes":[{"value":"/ This visitor will remove the `examples` schema property and (if present) set its first value as the `example` property.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":113453,"byte_end":113576,"line_start":187,"line_end":187,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":113577,"byte_end":113580,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ This is useful for dialects of JSON Schema (e.g. OpenAPI 3.0) that do not support the `examples` property.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":113581,"byte_end":113691,"line_start":189,"line_end":189,"column_start":1,"column_end":111}}]},{"kind":"Field","id":{"krate":0,"index":2347},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":113882,"byte_end":113897,"line_start":193,"line_end":193,"column_start":9,"column_end":24},"name":"retain_examples","qualname":"::visit::SetSingleExample::retain_examples","value":"bool","parent":{"krate":0,"index":2346},"children":[],"decl_id":null,"docs":" When set to `true`, the `examples` property will not be removed, but its first value will still be copied to `example`.\n","sig":null,"attributes":[{"value":"/ When set to `true`, the `examples` property will not be removed, but its first value will still be copied to `example`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":113750,"byte_end":113873,"line_start":192,"line_end":192,"column_start":5,"column_end":128}}]},{"kind":"Trait","id":{"krate":0,"index":623},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10158,"byte_end":10168,"line_start":340,"line_end":340,"column_start":11,"column_end":21},"name":"JsonSchema","qualname":"::JsonSchema","value":"JsonSchema","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628}],"decl_id":null,"docs":" A type which can be described as a JSON Schema document.","sig":null,"attributes":[{"value":"/ A type which can be described as a JSON Schema document.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9708,"byte_end":9768,"line_start":323,"line_end":323,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9769,"byte_end":9772,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ This is implemented for many Rust primitive and standard library types.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9773,"byte_end":9848,"line_start":325,"line_end":325,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9849,"byte_end":9852,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ This can also be automatically derived on most custom types with `#[derive(JsonSchema)]`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9853,"byte_end":9946,"line_start":327,"line_end":327,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9947,"byte_end":9950,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9951,"byte_end":9964,"line_start":329,"line_end":329,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9965,"byte_end":9972,"line_start":330,"line_end":330,"column_start":1,"column_end":8}},{"value":"/ use schemars::{schema_for, JsonSchema};","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9973,"byte_end":10016,"line_start":331,"line_end":331,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10017,"byte_end":10020,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ #[derive(JsonSchema)]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10021,"byte_end":10046,"line_start":333,"line_end":333,"column_start":1,"column_end":26}},{"value":"/ struct MyStruct {","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10047,"byte_end":10068,"line_start":334,"line_end":334,"column_start":1,"column_end":22}},{"value":"/     foo: i32,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10069,"byte_end":10086,"line_start":335,"line_end":335,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10087,"byte_end":10092,"line_start":336,"line_end":336,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10093,"byte_end":10096,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ let my_schema = schema_for!(MyStruct);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10097,"byte_end":10139,"line_start":338,"line_end":338,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10140,"byte_end":10147,"line_start":339,"line_end":339,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10581,"byte_end":10597,"line_start":347,"line_end":347,"column_start":8,"column_end":24},"name":"is_referenceable","qualname":"::JsonSchema::is_referenceable","value":"pub fn is_referenceable() -> bool","parent":{"krate":0,"index":623},"children":[],"decl_id":null,"docs":" Whether JSON Schemas generated for this type should be re-used where possible using the `$ref` keyword.","sig":null,"attributes":[{"value":"/ Whether JSON Schemas generated for this type should be re-used where possible using the `$ref` keyword.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10175,"byte_end":10282,"line_start":341,"line_end":341,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10287,"byte_end":10290,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ For trivial types (such as primitives), this should return `false`. For more complex types, it should return `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10295,"byte_end":10415,"line_start":343,"line_end":343,"column_start":5,"column_end":125}},{"value":"/ For recursive types, this **must** return `true` to prevent infinite cycles when generating schemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10420,"byte_end":10524,"line_start":344,"line_end":344,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10529,"byte_end":10532,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ By default, this returns `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10537,"byte_end":10573,"line_start":346,"line_end":346,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10813,"byte_end":10824,"line_start":354,"line_end":354,"column_start":8,"column_end":19},"name":"schema_name","qualname":"::JsonSchema::schema_name","value":"pub fn schema_name() -> String","parent":{"krate":0,"index":623},"children":[],"decl_id":null,"docs":" The name of the generated JSON Schema.","sig":null,"attributes":[{"value":"/ The name of the generated JSON Schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10634,"byte_end":10676,"line_start":351,"line_end":351,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10681,"byte_end":10684,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ This is used as the title for root schemas, and the key within the root's `definitions` property for subschemas.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10689,"byte_end":10805,"line_start":353,"line_end":353,"column_start":5,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":11168,"byte_end":11179,"line_start":362,"line_end":362,"column_start":8,"column_end":19},"name":"json_schema","qualname":"::JsonSchema::json_schema","value":"pub fn json_schema(&mut gen::SchemaGenerator) -> Schema","parent":{"krate":0,"index":623},"children":[],"decl_id":null,"docs":" Generates a JSON Schema for this type.","sig":null,"attributes":[{"value":"/ Generates a JSON Schema for this type.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10843,"byte_end":10885,"line_start":356,"line_end":356,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10890,"byte_end":10893,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ If the returned schema depends on any [referenceable](JsonSchema::is_referenceable) schemas, then this method will","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":10898,"byte_end":11016,"line_start":358,"line_end":358,"column_start":5,"column_end":123}},{"value":"/ add them to the [`SchemaGenerator`](gen::SchemaGenerator)'s schema definitions.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":11021,"byte_end":11104,"line_start":359,"line_end":359,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":11109,"byte_end":11112,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ This should not return a `$ref` schema.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":11117,"byte_end":11160,"line_start":361,"line_end":361,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":11298,"byte_end":11340,"line_start":366,"line_end":366,"column_start":8,"column_end":50},"name":"_schemars_private_non_optional_json_schema","qualname":"::JsonSchema::_schemars_private_non_optional_json_schema","value":"pub fn _schemars_private_non_optional_json_schema(&mut gen::SchemaGenerator)\n-> Schema","parent":{"krate":0,"index":623},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":11497,"byte_end":11524,"line_start":372,"line_end":372,"column_start":8,"column_end":35},"name":"_schemars_private_is_option","qualname":"::JsonSchema::_schemars_private_is_option","value":"pub fn _schemars_private_is_option() -> bool","parent":{"krate":0,"index":623},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":12552,"byte_end":12558,"line_start":4,"line_end":4,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":13828,"byte_end":13836,"line_start":47,"line_end":47,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":14949,"byte_end":14955,"line_start":83,"line_end":83,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15185,"byte_end":15188,"line_start":93,"line_end":93,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15319,"byte_end":15322,"line_start":100,"line_end":100,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15445,"byte_end":15448,"line_start":107,"line_end":107,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15617,"byte_end":15620,"line_start":117,"line_end":117,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15737,"byte_end":15748,"line_start":124,"line_end":124,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","byte_start":22551,"byte_end":22557,"line_start":7,"line_end":7,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","byte_start":24632,"byte_end":24638,"line_start":67,"line_end":67,"column_start":51,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","byte_start":25667,"byte_end":25672,"line_start":97,"line_end":97,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","byte_start":27004,"byte_end":27009,"line_start":137,"line_end":137,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/ffi.rs","byte_start":29995,"byte_end":30003,"line_start":6,"line_end":6,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/serdejson.rs","byte_start":40213,"byte_end":40218,"line_start":7,"line_end":7,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1142},{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/serdejson.rs","byte_start":40489,"byte_end":40495,"line_start":21,"line_end":21,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1149},{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/time.rs","byte_start":40971,"byte_end":40979,"line_start":6,"line_end":6,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/time.rs","byte_start":41616,"byte_end":41626,"line_start":27,"line_end":27,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":47371,"byte_end":47381,"line_start":50,"line_end":50,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":55197,"byte_end":55207,"line_start":304,"line_end":304,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":55548,"byte_end":55558,"line_start":320,"line_end":320,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":55940,"byte_end":55952,"line_start":340,"line_end":340,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":57102,"byte_end":57116,"line_start":380,"line_end":380,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":58161,"byte_end":58175,"line_start":417,"line_end":417,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":58572,"byte_end":58584,"line_start":433,"line_end":433,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":60049,"byte_end":60061,"line_start":485,"line_end":485,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66907,"byte_end":66921,"line_start":51,"line_end":51,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":67009,"byte_end":67023,"line_start":57,"line_end":57,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70526,"byte_end":70541,"line_start":158,"line_end":158,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70784,"byte_end":70799,"line_start":168,"line_end":168,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70898,"byte_end":70913,"line_start":174,"line_end":174,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":80782,"byte_end":80800,"line_start":431,"line_end":431,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":513}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81052,"byte_end":81070,"line_start":438,"line_end":438,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":82281,"byte_end":82282,"line_start":479,"line_end":479,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83616,"byte_end":83622,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85269,"byte_end":85275,"line_start":76,"line_end":76,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85372,"byte_end":85378,"line_start":82,"line_end":82,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91194,"byte_end":91206,"line_start":214,"line_end":214,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92778,"byte_end":92790,"line_start":253,"line_end":253,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105316,"byte_end":105327,"line_start":516,"line_end":516,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105446,"byte_end":105457,"line_start":522,"line_end":522,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105556,"byte_end":105567,"line_start":528,"line_end":528,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":111592,"byte_end":111610,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":112816,"byte_end":112833,"line_start":168,"line_end":168,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":113925,"byte_end":113941,"line_start":196,"line_end":196,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9399,"byte_end":9407,"line_start":307,"line_end":307,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":414}},{"kind":"Mod","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9417,"byte_end":9420,"line_start":308,"line_end":308,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":437}},{"kind":"Mod","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9430,"byte_end":9436,"line_start":309,"line_end":309,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":521}},{"kind":"Mod","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/lib.rs","byte_start":9446,"byte_end":9451,"line_start":310,"line_end":310,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":575}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":12552,"byte_end":12558,"line_start":4,"line_end":4,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":13057,"byte_end":13062,"line_start":21,"line_end":21,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3022},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":13828,"byte_end":13836,"line_start":47,"line_end":47,"column_start":16,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1827},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":14949,"byte_end":14955,"line_start":83,"line_end":83,"column_start":26,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":2,"index":46719},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15185,"byte_end":15188,"line_start":93,"line_end":93,"column_start":26,"column_end":29},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15319,"byte_end":15322,"line_start":100,"line_end":100,"column_start":19,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":7080},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15445,"byte_end":15448,"line_start":107,"line_end":107,"column_start":22,"column_end":25},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15617,"byte_end":15620,"line_start":117,"line_end":117,"column_start":24,"column_end":27},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":6},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/flatten.rs","byte_start":15737,"byte_end":15748,"line_start":124,"line_end":124,"column_start":16,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2326},"to":{"krate":0,"index":23}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","byte_start":22551,"byte_end":22557,"line_start":7,"line_end":7,"column_start":36,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":2,"index":46719},"to":{"krate":0,"index":623}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","byte_start":24632,"byte_end":24638,"line_start":67,"line_end":67,"column_start":51,"column_end":57},"kind":{"Impl":{"id":20}},"from":{"krate":2,"index":46845},"to":{"krate":0,"index":623}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","byte_start":25667,"byte_end":25672,"line_start":97,"line_end":97,"column_start":36,"column_end":41},"kind":{"Impl":{"id":21}},"from":{"krate":2,"index":45344},"to":{"krate":0,"index":623}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/core.rs","byte_start":27004,"byte_end":27009,"line_start":137,"line_end":137,"column_start":36,"column_end":41},"kind":{"Impl":{"id":22}},"from":{"krate":2,"index":45229},"to":{"krate":0,"index":623}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/ffi.rs","byte_start":29995,"byte_end":30003,"line_start":6,"line_end":6,"column_start":21,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":2833},"to":{"krate":0,"index":623}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/serdejson.rs","byte_start":40213,"byte_end":40218,"line_start":7,"line_end":7,"column_start":21,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":21,"index":2533},"to":{"krate":0,"index":623}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/serdejson.rs","byte_start":40489,"byte_end":40495,"line_start":21,"line_end":21,"column_start":21,"column_end":27},"kind":{"Impl":{"id":78}},"from":{"krate":21,"index":3110},"to":{"krate":0,"index":623}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/time.rs","byte_start":40971,"byte_end":40979,"line_start":6,"line_end":6,"column_start":21,"column_end":29},"kind":{"Impl":{"id":79}},"from":{"krate":2,"index":49313},"to":{"krate":0,"index":623}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/json_schema_impls/time.rs","byte_start":41616,"byte_end":41626,"line_start":27,"line_end":27,"column_start":21,"column_end":31},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":11915},"to":{"krate":0,"index":623}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":47371,"byte_end":47381,"line_start":50,"line_end":50,"column_start":32,"column_end":42},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":310},"to":{"krate":22,"index":2111}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":55197,"byte_end":55207,"line_start":304,"line_end":304,"column_start":44,"column_end":54},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":310},"to":{"krate":22,"index":2179}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":55548,"byte_end":55558,"line_start":320,"line_end":320,"column_start":45,"column_end":55},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":310},"to":{"krate":22,"index":2203}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":55940,"byte_end":55952,"line_start":340,"line_end":340,"column_start":35,"column_end":47},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":314},"to":{"krate":22,"index":2161}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":57102,"byte_end":57116,"line_start":380,"line_end":380,"column_start":37,"column_end":51},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":318},"to":{"krate":22,"index":2167}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":58161,"byte_end":58175,"line_start":417,"line_end":417,"column_start":43,"column_end":57},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":318},"to":{"krate":22,"index":2173}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":58572,"byte_end":58584,"line_start":433,"line_end":433,"column_start":35,"column_end":47},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":323},"to":{"krate":22,"index":2185}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/ser.rs","byte_start":60049,"byte_end":60061,"line_start":485,"line_end":485,"column_start":38,"column_end":50},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":323},"to":{"krate":22,"index":2196}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":66907,"byte_end":66921,"line_start":51,"line_end":51,"column_start":18,"column_end":32},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1467},"to":{"krate":2,"index":2995}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":67009,"byte_end":67023,"line_start":57,"line_end":57,"column_start":6,"column_end":20},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70526,"byte_end":70541,"line_start":158,"line_end":158,"column_start":16,"column_end":31},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1479},"to":{"krate":2,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70784,"byte_end":70799,"line_start":168,"line_end":168,"column_start":31,"column_end":46},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1479},"to":{"krate":2,"index":2923}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":70898,"byte_end":70913,"line_start":174,"line_end":174,"column_start":6,"column_end":21},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":80782,"byte_end":80800,"line_start":431,"line_end":431,"column_start":18,"column_end":36},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":81052,"byte_end":81070,"line_start":438,"line_end":438,"column_start":23,"column_end":41},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":506},"to":{"krate":2,"index":3256}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":82028,"byte_end":82035,"line_start":472,"line_end":472,"column_start":23,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":589},"to":{"krate":0,"index":516}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":82038,"byte_end":82043,"line_start":472,"line_end":472,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":9548},"to":{"krate":0,"index":516}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":82046,"byte_end":82054,"line_start":472,"line_end":472,"column_start":41,"column_end":49},"kind":"SuperTrait","from":{"krate":26,"index":35},"to":{"krate":0,"index":516}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":82057,"byte_end":82060,"line_start":472,"line_end":472,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":3726},"to":{"krate":0,"index":516}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/gen.rs","byte_start":82281,"byte_end":82282,"line_start":479,"line_end":479,"column_start":24,"column_end":25},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":519},"to":{"krate":0,"index":516}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":83616,"byte_end":83622,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85269,"byte_end":85275,"line_start":76,"line_end":76,"column_start":29,"column_end":35},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2923}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":85372,"byte_end":85378,"line_start":82,"line_end":82,"column_start":21,"column_end":27},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2923}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":91194,"byte_end":91206,"line_start":214,"line_end":214,"column_start":6,"column_end":18},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":92778,"byte_end":92790,"line_start":253,"line_end":253,"column_start":23,"column_end":35},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1718},"to":{"krate":2,"index":2923}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105316,"byte_end":105327,"line_start":516,"line_end":516,"column_start":21,"column_end":32},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2326},"to":{"krate":2,"index":2923}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105446,"byte_end":105457,"line_start":522,"line_end":522,"column_start":26,"column_end":37},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2326},"to":{"krate":2,"index":2923}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/schema.rs","byte_start":105556,"byte_end":105567,"line_start":528,"line_end":528,"column_start":20,"column_end":31},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":111592,"byte_end":111610,"line_start":134,"line_end":134,"column_start":18,"column_end":36},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2334},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":112816,"byte_end":112833,"line_start":168,"line_end":168,"column_start":18,"column_end":35},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2340},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/schemars-0.8.6/src/visit.rs","byte_start":113925,"byte_end":113941,"line_start":196,"line_end":196,"column_start":18,"column_end":34},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2346},"to":{"krate":0,"index":589}}]}