{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0","program":"/home/pegasus/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","indexmap","--edition=2018","/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"serde\"","--cfg","feature=\"serde-1\"","--cfg","feature=\"std\"","-C","metadata=21d17a634bcf208a","-C","extra-filename=-21d17a634bcf208a","--out-dir","/home/pegasus/ibc-gamm-contract/ibc-gamm-osmosis/target/rls/debug/deps","-L","dependency=/home/pegasus/ibc-gamm-contract/ibc-gamm-osmosis/target/rls/debug/deps","--extern","hashbrown=/home/pegasus/ibc-gamm-contract/ibc-gamm-osmosis/target/rls/debug/deps/libhashbrown-0eb80296a58426c0.rmeta","--extern","serde=/home/pegasus/ibc-gamm-contract/ibc-gamm-osmosis/target/rls/debug/deps/libserde-9efeaa965d30d6e2.rmeta","--cap-lints","allow","--cfg","has_std","--error-format=json","--sysroot","/home/pegasus/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/pegasus/ibc-gamm-contract/ibc-gamm-osmosis/target/rls/debug/deps/libindexmap-21d17a634bcf208a.rmeta"},"prelude":{"crate_id":{"name":"indexmap","disambiguator":[1422014887463838397,0]},"crate_root":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src","external_crates":[{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14103892008453412088,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7315200403670056403,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11207136553210754998,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[607384006361738202,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[18008874376135235901,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[3311393420855710976,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16337070767718955233,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11949973796169789986,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[5564804802555933627,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[12742144956194682096,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8655233451211981834,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13232350330095090153,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[350047506610901640,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16835669804620715697,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[12515180981479917405,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[16254306877963802483,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[8770506875580860113,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[2137987193762846224,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2391863862182092207,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","num":20,"id":{"name":"serde","disambiguator":[15013803239269233867,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","num":21,"id":{"name":"serde_derive","disambiguator":[68729331767806002,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","num":22,"id":{"name":"hashbrown","disambiguator":[11250974392561425329,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","num":23,"id":{"name":"ahash","disambiguator":[2125844637487561298,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","num":24,"id":{"name":"once_cell","disambiguator":[470338061770628507,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","num":25,"id":{"name":"getrandom","disambiguator":[12460439178872030525,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","num":26,"id":{"name":"cfg_if","disambiguator":[10180898007687148561,0]}},{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","num":27,"id":{"name":"libc","disambiguator":[8254695432410156630,0]}}],"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":92,"byte_end":5364,"line_start":2,"line_end":187,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87419,"byte_end":87432,"line_start":546,"line_end":546,"column_start":20,"column_end":33},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":281}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":19862,"byte_end":19873,"line_start":6,"line_end":6,"column_start":30,"column_end":41},"alias_span":null,"name":"MutableKeys","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":463},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20420,"byte_end":20425,"line_start":27,"line_end":27,"column_start":22,"column_end":27},"alias_span":null,"name":"Entry","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20427,"byte_end":20440,"line_start":27,"line_end":27,"column_start":29,"column_end":42},"alias_span":null,"name":"OccupiedEntry","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20442,"byte_end":20453,"line_start":27,"line_end":27,"column_start":44,"column_end":55},"alias_span":null,"name":"VacantEntry","value":"","parent":{"krate":0,"index":280}},{"kind":"Use","ref_id":{"krate":0,"index":22},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3562,"byte_end":3572,"line_start":106,"line_end":106,"column_start":28,"column_end":38},"alias_span":null,"name":"Equivalent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":603},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3594,"byte_end":3602,"line_start":107,"line_end":107,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1025},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3624,"byte_end":3632,"line_start":108,"line_end":108,"column_start":21,"column_end":29},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":92,"byte_end":5364,"line_start":2,"line_end":187,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":18},{"krate":0,"index":29},{"krate":0,"index":64},{"krate":0,"index":191},{"krate":0,"index":258},{"krate":0,"index":280},{"krate":0,"index":960},{"krate":0,"index":1379},{"krate":0,"index":1382},{"krate":0,"index":1385},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1388},{"krate":0,"index":1497},{"krate":0,"index":1503},{"krate":0,"index":1506},{"krate":0,"index":1390},{"krate":0,"index":1395},{"krate":0,"index":1406}],"decl_id":null,"docs":" [`IndexMap`] is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.","sig":null,"attributes":[{"value":"deny(unsafe_code)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":92,"byte_end":113,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":114,"byte_end":140,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":196,"byte_end":206,"line_start":5,"line_end":5,"column_start":1,"column_end":11}},{"value":"/ [`IndexMap`] is a hash table where the iteration order of the key-value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":208,"byte_end":283,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":284,"byte_end":340,"line_start":8,"line_end":8,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":341,"byte_end":344,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`] is a corresponding hash set using the same implementation and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":345,"byte_end":423,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ with similar properties.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":424,"byte_end":452,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":453,"byte_end":456,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`]: map/struct.IndexMap.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":457,"byte_end":499,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ [`IndexSet`]: set/struct.IndexSet.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":500,"byte_end":542,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":543,"byte_end":546,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":547,"byte_end":550,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ### Feature Highlights","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":551,"byte_end":577,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":578,"byte_end":581,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] are drop-in compatible with the std `HashMap`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":582,"byte_end":661,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ and `HashSet`, but they also have some features of note:","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":662,"byte_end":722,"line_start":20,"line_end":20,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":723,"byte_end":726,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - The ordering semantics (see their documentation for details)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":727,"byte_end":793,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/ - Sorting methods and the [`.pop()`][IndexMap::pop] methods.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":794,"byte_end":858,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ - The [`Equivalent`] trait, which offers more flexible equality definitions","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":859,"byte_end":938,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/   between borrowed and owned versions of keys.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":939,"byte_end":989,"line_start":25,"line_end":25,"column_start":1,"column_end":51}},{"value":"/ - The [`MutableKeys`][map::MutableKeys] trait, which gives opt-in mutable","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":990,"byte_end":1067,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/   access to hash map keys.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1068,"byte_end":1098,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1099,"byte_end":1102,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ### Alternate Hashers","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1103,"byte_end":1128,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1129,"byte_end":1132,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ [`IndexMap`] and [`IndexSet`] have a default hasher type `S = RandomState`,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1133,"byte_end":1212,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ just like the standard `HashMap` and `HashSet`, which is resistant to","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1213,"byte_end":1286,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ HashDoS attacks but not the most performant. Type aliases can make it easier","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1287,"byte_end":1367,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ to use alternate hashers:","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1368,"byte_end":1397,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1398,"byte_end":1401,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1402,"byte_end":1409,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use fnv::FnvBuildHasher;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1410,"byte_end":1438,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ use fxhash::FxBuildHasher;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1439,"byte_end":1469,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/ use indexmap::{IndexMap, IndexSet};","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1470,"byte_end":1509,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1510,"byte_end":1513,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ type FnvIndexMap<K, V> = IndexMap<K, V, FnvBuildHasher>;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1514,"byte_end":1574,"line_start":41,"line_end":41,"column_start":1,"column_end":61}},{"value":"/ type FnvIndexSet<T> = IndexSet<T, FnvBuildHasher>;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1575,"byte_end":1629,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1630,"byte_end":1633,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ type FxIndexMap<K, V> = IndexMap<K, V, FxBuildHasher>;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1634,"byte_end":1692,"line_start":44,"line_end":44,"column_start":1,"column_end":59}},{"value":"/ type FxIndexSet<T> = IndexSet<T, FxBuildHasher>;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1693,"byte_end":1745,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1746,"byte_end":1749,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let std: IndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1750,"byte_end":1798,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ let fnv: FnvIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1799,"byte_end":1850,"line_start":48,"line_end":48,"column_start":1,"column_end":52}},{"value":"/ let fx: FxIndexSet<i32> = (0..100).collect();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1851,"byte_end":1900,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(std, fnv);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1901,"byte_end":1926,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(std, fx);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1927,"byte_end":1951,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1952,"byte_end":1959,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1960,"byte_end":1963,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ### Rust Version","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1964,"byte_end":1984,"line_start":54,"line_end":54,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1985,"byte_end":1988,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This version of indexmap requires Rust 1.49 or later.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":1989,"byte_end":2046,"line_start":56,"line_end":56,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2047,"byte_end":2050,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The indexmap 1.x release series will use a carefully considered version","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2051,"byte_end":2126,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ upgrade policy, where in a later 1.x version, we will raise the minimum","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2127,"byte_end":2202,"line_start":59,"line_end":59,"column_start":1,"column_end":76}},{"value":"/ required Rust version.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2203,"byte_end":2229,"line_start":60,"line_end":60,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2230,"byte_end":2233,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## No Standard Library Targets","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2234,"byte_end":2268,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2269,"byte_end":2272,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This crate supports being built without `std`, requiring","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2273,"byte_end":2333,"line_start":64,"line_end":64,"column_start":1,"column_end":61}},{"value":"/ `alloc` instead. This is enabled automatically when it is detected that","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2334,"byte_end":2409,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ `std` is not available. There is no crate feature to enable/disable to","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2410,"byte_end":2484,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/ trigger this. It can be tested by building for a std-less target.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2485,"byte_end":2554,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2555,"byte_end":2558,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ - Creating maps and sets using [`new`][IndexMap::new] and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2559,"byte_end":2620,"line_start":69,"line_end":69,"column_start":1,"column_end":62}},{"value":"/ [`with_capacity`][IndexMap::with_capacity] is unavailable without `std`.  ","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2621,"byte_end":2699,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/   Use methods [`IndexMap::default`][def],","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2700,"byte_end":2745,"line_start":71,"line_end":71,"column_start":1,"column_end":46}},{"value":"/   [`with_hasher`][IndexMap::with_hasher],","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2746,"byte_end":2791,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/   [`with_capacity_and_hasher`][IndexMap::with_capacity_and_hasher] instead.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2792,"byte_end":2871,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   A no-std compatible hasher will be needed as well, for example","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2872,"byte_end":2940,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/   from the crate `twox-hash`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2941,"byte_end":2974,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/ - Macros [`indexmap!`] and [`indexset!`] are unavailable without `std`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":2975,"byte_end":3050,"line_start":76,"line_end":76,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3051,"byte_end":3054,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ [def]: map/struct.IndexMap.html#impl-Default","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3055,"byte_end":3103,"line_start":78,"line_end":78,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8995,"byte_end":9005,"line_start":13,"line_end":13,"column_start":11,"column_end":21},"name":"Equivalent","qualname":"::equivalent::Equivalent","value":"Equivalent<K: ?Sized>","parent":null,"children":[{"krate":0,"index":24}],"decl_id":null,"docs":" Key equivalence trait.","sig":null,"attributes":[{"value":"/ Key equivalence trait.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8605,"byte_end":8631,"line_start":3,"line_end":3,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8632,"byte_end":8635,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This trait allows hash table lookup to be customized.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8636,"byte_end":8693,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ It has one blanket implementation that uses the regular `Borrow` solution,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8694,"byte_end":8772,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ just like `HashMap` and `BTreeMap` do, so that you can pass `&str` to lookup","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8773,"byte_end":8853,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ into a map with `String` keys and so on.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8854,"byte_end":8898,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8899,"byte_end":8902,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Contract","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8903,"byte_end":8917,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8918,"byte_end":8921,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The implementor **must** hash like `K`, if it is hashable.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":8922,"byte_end":8984,"line_start":12,"line_end":12,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":9093,"byte_end":9103,"line_start":15,"line_end":15,"column_start":8,"column_end":18},"name":"equivalent","qualname":"::equivalent::Equivalent::equivalent","value":"pub fn equivalent(&Self, &K) -> bool","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Compare self to `key` and return `true` if they are equal.\n","sig":null,"attributes":[{"value":"/ Compare self to `key` and return `true` if they are equal.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":9023,"byte_end":9085,"line_start":14,"line_end":14,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":44},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9399,"byte_end":9412,"line_start":5,"line_end":5,"column_start":12,"column_end":25},"name":"PrivateMarker","qualname":"::mutable_keys::PrivateMarker","value":"PrivateMarker {  }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":45},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9960,"byte_end":9971,"line_start":19,"line_end":19,"column_start":11,"column_end":22},"name":"MutableKeys","qualname":"::mutable_keys::MutableKeys","value":"MutableKeys","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52}],"decl_id":null,"docs":" Opt-in mutable access to keys.","sig":null,"attributes":[{"value":"/ Opt-in mutable access to keys.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9417,"byte_end":9451,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9452,"byte_end":9455,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ These methods expose `&mut K`, mutable references to the key as it is stored","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9456,"byte_end":9536,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9537,"byte_end":9552,"line_start":10,"line_end":10,"column_start":1,"column_end":16}},{"value":"/ You are allowed to modify the keys in the hashmap **if the modifcation","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9553,"byte_end":9627,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ does not change the key’s hash and equality**.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9628,"byte_end":9680,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9681,"byte_end":9684,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ If keys are modified erronously, you can no longer look them up.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9685,"byte_end":9753,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/ This is sound (memory safe) but a logical error hazard (just like","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9754,"byte_end":9823,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ implementing PartialEq, Eq, or Hash incorrectly would be).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9824,"byte_end":9886,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9887,"byte_end":9890,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `use` this trait to enable its methods for `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9891,"byte_end":9949,"line_start":18,"line_end":18,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":46},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9983,"byte_end":9986,"line_start":20,"line_end":20,"column_start":10,"column_end":13},"name":"Key","qualname":"::mutable_keys::MutableKeys::Key","value":"type Key;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":47},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":9997,"byte_end":10002,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Value","qualname":"::mutable_keys::MutableKeys::Value","value":"type Value;","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10074,"byte_end":10087,"line_start":24,"line_end":24,"column_start":8,"column_end":21},"name":"get_full_mut2","qualname":"::mutable_keys::MutableKeys::get_full_mut2","value":"pub fn get_full_mut2<Q: ?Sized>(&mut Self, &Q)\n-> Option<(usize, &mut Self::Key, &mut Self::Value)> where Q: Hash +\nEquivalent<Self::Key>","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Return item index, mutable reference to key and value\n","sig":null,"attributes":[{"value":"/ Return item index, mutable reference to key and value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10009,"byte_end":10066,"line_start":23,"line_end":23,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10523,"byte_end":10530,"line_start":38,"line_end":38,"column_start":8,"column_end":15},"name":"retain2","qualname":"::mutable_keys::MutableKeys::retain2","value":"pub fn retain2<F>(&mut Self, F) where\nF: FnMut(&mut Self::Key, &mut Self::Value) -> bool","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10251,"byte_end":10323,"line_start":31,"line_end":31,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10328,"byte_end":10362,"line_start":32,"line_end":32,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10367,"byte_end":10370,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10375,"byte_end":10447,"line_start":34,"line_end":34,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10452,"byte_end":10462,"line_start":35,"line_end":35,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10467,"byte_end":10470,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10475,"byte_end":10515,"line_start":37,"line_end":37,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10822,"byte_end":10838,"line_start":45,"line_end":45,"column_start":8,"column_end":24},"name":"__private_marker","qualname":"::mutable_keys::MutableKeys::__private_marker","value":"pub fn __private_marker(&Self) -> PrivateMarker","parent":{"krate":0,"index":45},"children":[],"decl_id":null,"docs":" This method is not useful in itself – it is there to “seal” the trait\n for external implementation, so that we can add methods without\n causing breaking changes.\n","sig":null,"attributes":[{"value":"/ This method is not useful in itself – it is there to “seal” the trait","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10629,"byte_end":10708,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ for external implementation, so that we can add methods without","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10713,"byte_end":10780,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ causing breaking changes.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":10785,"byte_end":10814,"line_start":44,"line_end":44,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":191},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"serde_seq","qualname":"::serde_seq","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":237},{"krate":0,"index":243},{"krate":0,"index":252}],"decl_id":null,"docs":" Functions to serialize and deserialize an `IndexMap` as an ordered sequence.","sig":null,"attributes":[{"value":"cfg(feature = \"serde\")","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3300,"byte_end":3325,"line_start":94,"line_end":94,"column_start":1,"column_end":26}},{"value":"/ Functions to serialize and deserialize an `IndexMap` as an ordered sequence.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15411,"byte_end":15491,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15492,"byte_end":15495,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The default `serde` implementation serializes `IndexMap` as a normal map,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15496,"byte_end":15573,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ but there is no guarantee that serialization formats will preserve the order","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15574,"byte_end":15654,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ of the key-value pairs. This module serializes `IndexMap` as a sequence of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15655,"byte_end":15733,"line_start":5,"line_end":5,"column_start":1,"column_end":79}},{"value":"/ `(key, value)` elements instead, in order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15734,"byte_end":15780,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15781,"byte_end":15784,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This module may be used in a field attribute for derived implementations:","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15785,"byte_end":15862,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15863,"byte_end":15866,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15867,"byte_end":15874,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15875,"byte_end":15904,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::{Deserialize, Serialize};","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15905,"byte_end":15954,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"/ #[derive(Deserialize, Serialize)]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15955,"byte_end":15992,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/ struct Data {","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":15993,"byte_end":16010,"line_start":14,"line_end":14,"column_start":1,"column_end":18}},{"value":"/     #[serde(with = \"indexmap::serde_seq\")]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16011,"byte_end":16057,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16058,"byte_end":16090,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16091,"byte_end":16105,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16106,"byte_end":16111,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16112,"byte_end":16119,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16120,"byte_end":16123,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16124,"byte_end":16175,"line_start":21,"line_end":21,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":232},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16855,"byte_end":16864,"line_start":48,"line_end":48,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serde_seq::serialize","value":"pub fn serialize<K, V, S, T>(&IndexMap<K, V, S>, T) -> Result<T::Ok, T::Error>\nwhere K: Serialize + Hash + Eq, V: Serialize, S: BuildHasher, T: Serializer","parent":null,"children":[],"decl_id":null,"docs":" Serializes an `IndexMap` as an ordered sequence.","sig":null,"attributes":[{"value":"/ Serializes an `IndexMap` as an ordered sequence.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16408,"byte_end":16460,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16461,"byte_end":16464,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ This function may be used in a field attribute for deriving `Serialize`:","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16465,"byte_end":16541,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16542,"byte_end":16545,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16546,"byte_end":16553,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16554,"byte_end":16583,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::Serialize;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16584,"byte_end":16618,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16619,"byte_end":16643,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"/ struct Data {","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16644,"byte_end":16661,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/     #[serde(serialize_with = \"indexmap::serde_seq::serialize\")]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16662,"byte_end":16729,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16730,"byte_end":16762,"line_start":42,"line_end":42,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16763,"byte_end":16777,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16778,"byte_end":16783,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16784,"byte_end":16791,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16792,"byte_end":16795,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":16796,"byte_end":16847,"line_start":47,"line_end":47,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18340,"byte_end":18351,"line_start":104,"line_end":104,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::serde_seq::deserialize","value":"pub fn deserialize<'de, D, K, V, S>(D) -> Result<IndexMap<K, V, S>, D::Error>\nwhere D: Deserializer, K: Deserialize + Eq + Hash, V: Deserialize,\nS: Default + BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an `IndexMap` from an ordered sequence.","sig":null,"attributes":[{"value":"/ Deserializes an `IndexMap` from an ordered sequence.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":17879,"byte_end":17935,"line_start":88,"line_end":88,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":17936,"byte_end":17939,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This function may be used in a field attribute for deriving `Deserialize`:","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":17940,"byte_end":18018,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18019,"byte_end":18022,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18023,"byte_end":18030,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ # use indexmap::IndexMap;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18031,"byte_end":18060,"line_start":93,"line_end":93,"column_start":1,"column_end":30}},{"value":"/ # use serde_derive::Deserialize;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18061,"byte_end":18097,"line_start":94,"line_end":94,"column_start":1,"column_end":37}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18098,"byte_end":18124,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"/ struct Data {","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18125,"byte_end":18142,"line_start":96,"line_end":96,"column_start":1,"column_end":18}},{"value":"/     #[serde(deserialize_with = \"indexmap::serde_seq::deserialize\")]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18143,"byte_end":18214,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/     map: IndexMap<i32, u64>,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18215,"byte_end":18247,"line_start":98,"line_end":98,"column_start":1,"column_end":33}},{"value":"/     // ...","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18248,"byte_end":18262,"line_start":99,"line_end":99,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18263,"byte_end":18268,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18269,"byte_end":18276,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18277,"byte_end":18280,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Requires crate feature `\"serde\"` or `\"serde-1\"`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":18281,"byte_end":18332,"line_start":103,"line_end":103,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":280},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":603},{"krate":0,"index":609},{"krate":0,"index":615},{"krate":0,"index":625},{"krate":0,"index":630},{"krate":0,"index":635},{"krate":0,"index":655},{"krate":0,"index":715},{"krate":0,"index":728},{"krate":0,"index":733},{"krate":0,"index":738},{"krate":0,"index":742},{"krate":0,"index":746},{"krate":0,"index":750},{"krate":0,"index":754},{"krate":0,"index":759},{"krate":0,"index":764},{"krate":0,"index":768},{"krate":0,"index":772},{"krate":0,"index":776},{"krate":0,"index":780},{"krate":0,"index":785},{"krate":0,"index":790},{"krate":0,"index":794},{"krate":0,"index":798},{"krate":0,"index":803},{"krate":0,"index":808},{"krate":0,"index":812},{"krate":0,"index":816},{"krate":0,"index":820},{"krate":0,"index":824},{"krate":0,"index":829},{"krate":0,"index":834},{"krate":0,"index":838},{"krate":0,"index":842},{"krate":0,"index":846},{"krate":0,"index":850},{"krate":0,"index":854},{"krate":0,"index":858},{"krate":0,"index":862},{"krate":0,"index":867},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":882},{"krate":0,"index":890},{"krate":0,"index":897},{"krate":0,"index":904},{"krate":0,"index":910},{"krate":0,"index":916},{"krate":0,"index":921},{"krate":0,"index":927},{"krate":0,"index":934},{"krate":0,"index":942},{"krate":0,"index":947},{"krate":0,"index":956}],"decl_id":null,"docs":" `IndexMap` is a hash table where the iteration order of the key-value\n pairs is independent of the hash values of the keys.\n","sig":null,"attributes":[{"value":"/ `IndexMap` is a hash table where the iteration order of the key-value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":19690,"byte_end":19763,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/ pairs is independent of the hash values of the keys.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":19764,"byte_end":19820,"line_start":2,"line_end":2,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":327},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94203,"byte_end":94216,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::core::raw::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333}],"decl_id":null,"docs":" A view into an occupied entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":93931,"byte_end":93981,"line_start":89,"line_end":89,"column_start":1,"column_end":51}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":93982,"byte_end":94019,"line_start":90,"line_end":90,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94020,"byte_end":94023,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94024,"byte_end":94054,"line_start":92,"line_end":92,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94947,"byte_end":94950,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key in the map.","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94617,"byte_end":94668,"line_start":107,"line_end":107,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94673,"byte_end":94676,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Note that this is not the key that was used to find the entry. There may be an observable","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94681,"byte_end":94774,"line_start":109,"line_end":109,"column_start":5,"column_end":98}},{"value":"/ difference if the key type has any distinguishing features outside of `Hash` and `Eq`, like","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94779,"byte_end":94874,"line_start":110,"line_end":110,"column_start":5,"column_end":100}},{"value":"/ extra fields or the memory address of an allocation.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94879,"byte_end":94935,"line_start":111,"line_end":111,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95086,"byte_end":95089,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's value in the map.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's value in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95021,"byte_end":95074,"line_start":116,"line_end":116,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95355,"byte_end":95362,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the entry's value in the map.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the entry's value in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95162,"byte_end":95223,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95228,"byte_end":95231,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ If you need a reference which may outlive the destruction of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95236,"byte_end":95304,"line_start":123,"line_end":123,"column_start":5,"column_end":73}},{"value":"/ `Entry` value, see `into_mut`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95309,"byte_end":95343,"line_start":124,"line_end":124,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95774,"byte_end":95779,"line_start":139,"line_end":139,"column_start":12,"column_end":17},"name":"index","qualname":"<OccupiedEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index of the key-value pair\n","sig":null,"attributes":[{"value":"/ Return the index of the key-value pair","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95706,"byte_end":95748,"line_start":137,"line_end":137,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95753,"byte_end":95762,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96049,"byte_end":96057,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts into a mutable reference to the entry's value in the map,\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts into a mutable reference to the entry's value in the map,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95918,"byte_end":95988,"line_start":144,"line_end":144,"column_start":5,"column_end":75}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":95993,"byte_end":96037,"line_start":145,"line_end":145,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96519,"byte_end":96536,"line_start":158,"line_end":158,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<OccupiedEntry>::swap_remove_entry","value":"pub fn swap_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96167,"byte_end":96241,"line_start":151,"line_end":151,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96246,"byte_end":96249,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96254,"byte_end":96326,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96331,"byte_end":96394,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96399,"byte_end":96454,"line_start":155,"line_end":155,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96459,"byte_end":96462,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96467,"byte_end":96507,"line_start":157,"line_end":157,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":97186,"byte_end":97204,"line_start":172,"line_end":172,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<OccupiedEntry>::shift_remove_entry","value":"pub fn shift_remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96840,"byte_end":96914,"line_start":165,"line_end":165,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96919,"byte_end":96922,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96927,"byte_end":96993,"line_start":167,"line_end":167,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":96998,"byte_end":97059,"line_start":168,"line_end":168,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":97064,"byte_end":97121,"line_start":169,"line_end":169,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":97126,"byte_end":97129,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":97134,"byte_end":97174,"line_start":171,"line_end":171,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":467},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":83898,"byte_end":83906,"line_start":442,"line_end":442,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::core::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Existing slot with equivalent key.\n","sig":null,"attributes":[{"value":"/ Existing slot with equivalent key.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":83855,"byte_end":83893,"line_start":441,"line_end":441,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":470},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":83989,"byte_end":83995,"line_start":444,"line_end":444,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::core::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":463},"children":[],"decl_id":null,"docs":" Vacant slot (no equivalent key in the map).\n","sig":null,"attributes":[{"value":"/ Vacant slot (no equivalent key in the map).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":83937,"byte_end":83984,"line_start":443,"line_end":443,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":463},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":83833,"byte_end":83838,"line_start":440,"line_end":440,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::core::Entry","value":"pub enum Entry<'a, K, V> { Occupied(OccupiedEntry), Vacant(VacantEntry), }","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":470}],"decl_id":null,"docs":" Entry for an existing key-value pair or a vacant location to\n insert one.\n","sig":null,"attributes":[{"value":"/ Entry for an existing key-value pair or a vacant location to","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":83743,"byte_end":83807,"line_start":438,"line_end":438,"column_start":1,"column_end":65}},{"value":"/ insert one.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":83808,"byte_end":83823,"line_start":439,"line_end":439,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84318,"byte_end":84327,"line_start":452,"line_end":452,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given default value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the given default value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84060,"byte_end":84146,"line_start":448,"line_end":448,"column_start":5,"column_end":91}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84151,"byte_end":84243,"line_start":449,"line_end":449,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84248,"byte_end":84251,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84256,"byte_end":84306,"line_start":451,"line_end":451,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84786,"byte_end":84800,"line_start":463,"line_end":463,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> &'a mut V where F: FnOnce() -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84518,"byte_end":84614,"line_start":459,"line_end":459,"column_start":5,"column_end":101}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84619,"byte_end":84711,"line_start":460,"line_end":460,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84716,"byte_end":84719,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84724,"byte_end":84774,"line_start":462,"line_end":462,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85341,"byte_end":85359,"line_start":478,"line_end":478,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F>(Self, F) -> &'a mut V where F: FnOnce(&K) -> V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the result of the `call` function with a reference to the entry's key if it is\n vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to\n an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts the result of the `call` function with a reference to the entry's key if it is","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85030,"byte_end":85120,"line_start":473,"line_end":473,"column_start":5,"column_end":95}},{"value":"/ vacant, and returns a mutable reference to the new value. Otherwise a mutable reference to","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85125,"byte_end":85219,"line_start":474,"line_end":474,"column_start":5,"column_end":99}},{"value":"/ an already existent value is returned.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85224,"byte_end":85266,"line_start":475,"line_end":475,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85271,"byte_end":85274,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85279,"byte_end":85329,"line_start":477,"line_end":477,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85815,"byte_end":85818,"line_start":493,"line_end":493,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the entry's key, either within the map if occupied,\n or else the new key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the entry's key, either within the map if occupied,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85667,"byte_end":85742,"line_start":491,"line_end":491,"column_start":5,"column_end":80}},{"value":"/ or else the new key that was used to find the entry.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85747,"byte_end":85803,"line_start":492,"line_end":492,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":86070,"byte_end":86075,"line_start":501,"line_end":501,"column_start":12,"column_end":17},"name":"index","qualname":"<Entry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair exists or will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair exists or will be inserted.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":85985,"byte_end":86058,"line_start":500,"line_end":500,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":86302,"byte_end":86312,"line_start":509,"line_end":509,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Modifies the entry if it is occupied.\n","sig":null,"attributes":[{"value":"/ Modifies the entry if it is occupied.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":86249,"byte_end":86290,"line_start":508,"line_end":508,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":86824,"byte_end":86834,"line_start":526,"line_end":526,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Inserts a default-constructed value in the entry if it is vacant and returns a mutable\n reference to it. Otherwise a mutable reference to an already existent value is returned.","sig":null,"attributes":[{"value":"/ Inserts a default-constructed value in the entry if it is vacant and returns a mutable","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":86562,"byte_end":86652,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ reference to it. Otherwise a mutable reference to an already existent value is returned.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":86657,"byte_end":86749,"line_start":523,"line_end":523,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":86754,"byte_end":86757,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":86762,"byte_end":86812,"line_start":525,"line_end":525,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87629,"byte_end":87635,"line_start":551,"line_end":551,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry to `value`, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry to `value`, and returns the entry's old value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87539,"byte_end":87617,"line_start":550,"line_end":550,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87878,"byte_end":87884,"line_start":558,"line_end":558,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87714,"byte_end":87800,"line_start":555,"line_end":555,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87805,"byte_end":87808,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove()`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87813,"byte_end":87866,"line_start":557,"line_end":557,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88300,"byte_end":88311,"line_start":569,"line_end":569,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<OccupiedEntry>::swap_remove","value":"pub fn swap_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87936,"byte_end":88022,"line_start":562,"line_end":562,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88027,"byte_end":88030,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88035,"byte_end":88107,"line_start":564,"line_end":564,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88112,"byte_end":88175,"line_start":565,"line_end":565,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88180,"byte_end":88235,"line_start":566,"line_end":566,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88240,"byte_end":88243,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88248,"byte_end":88288,"line_start":568,"line_end":568,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88729,"byte_end":88741,"line_start":580,"line_end":580,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<OccupiedEntry>::shift_remove","value":"pub fn shift_remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Remove the key, value pair stored in the map for this entry, and return the value.","sig":null,"attributes":[{"value":"/ Remove the key, value pair stored in the map for this entry, and return the value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88371,"byte_end":88457,"line_start":573,"line_end":573,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88462,"byte_end":88465,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88470,"byte_end":88536,"line_start":575,"line_end":575,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88541,"byte_end":88602,"line_start":576,"line_end":576,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88607,"byte_end":88664,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88669,"byte_end":88672,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88677,"byte_end":88717,"line_start":579,"line_end":579,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88960,"byte_end":88972,"line_start":587,"line_end":587,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key, value pair stored in the map for this entry","sig":null,"attributes":[{"value":"/ Remove and return the key, value pair stored in the map for this entry","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88802,"byte_end":88876,"line_start":584,"line_end":584,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88881,"byte_end":88884,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry()`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":88889,"byte_end":88948,"line_start":586,"line_end":586,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":506},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89463,"byte_end":89474,"line_start":605,"line_end":605,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::core::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512}],"decl_id":null,"docs":" A view into a vacant entry in a `IndexMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89331,"byte_end":89378,"line_start":601,"line_end":601,"column_start":1,"column_end":48}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89379,"byte_end":89416,"line_start":602,"line_end":602,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89417,"byte_end":89420,"line_start":603,"line_end":603,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89421,"byte_end":89451,"line_start":604,"line_end":604,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89679,"byte_end":89682,"line_start":613,"line_end":613,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that was used to find the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key that was used to find the entry.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89603,"byte_end":89667,"line_start":612,"line_end":612,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89796,"byte_end":89804,"line_start":618,"line_end":618,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Takes ownership of the key, leaving the entry vacant.\n","sig":null,"attributes":[{"value":"/ Takes ownership of the key, leaving the entry vacant.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89727,"byte_end":89784,"line_start":617,"line_end":617,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89921,"byte_end":89926,"line_start":623,"line_end":623,"column_start":12,"column_end":17},"name":"index","qualname":"<VacantEntry>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the index where the key-value pair will be inserted.\n","sig":null,"attributes":[{"value":"/ Return the index where the key-value pair will be inserted.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89846,"byte_end":89909,"line_start":622,"line_end":622,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":90106,"byte_end":90112,"line_start":629,"line_end":629,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Inserts the entry's key and the given value into the map, and returns a mutable reference\n to the value.\n","sig":null,"attributes":[{"value":"/ Inserts the entry's key and the given value into the map, and returns a mutable reference","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89979,"byte_end":90072,"line_start":627,"line_end":627,"column_start":5,"column_end":98}},{"value":"/ to the value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":90077,"byte_end":90094,"line_start":628,"line_end":628,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":603},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21893,"byte_end":21901,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::map::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608}],"decl_id":null,"docs":" A hash table where the iteration order of the key-value pairs is independent\n of the hash values of the keys.","sig":null,"attributes":[{"value":"/ A hash table where the iteration order of the key-value pairs is independent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20457,"byte_end":20537,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ of the hash values of the keys.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20538,"byte_end":20573,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20574,"byte_end":20577,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashMap`, but also","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20578,"byte_end":20655,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20656,"byte_end":20684,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20685,"byte_end":20688,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20689,"byte_end":20700,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20701,"byte_end":20704,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs have a consistent order that is determined by","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20705,"byte_end":20774,"line_start":37,"line_end":37,"column_start":1,"column_end":70}},{"value":"/ the sequence of insertion and removal calls on the map. The order does","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20775,"byte_end":20849,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ not depend on the keys or the hash function at all.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20850,"byte_end":20905,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20906,"byte_end":20909,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the map in *the order*.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20910,"byte_end":20960,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20961,"byte_end":20964,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":20965,"byte_end":21039,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21040,"byte_end":21116,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21117,"byte_end":21182,"line_start":45,"line_end":45,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21183,"byte_end":21186,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21187,"byte_end":21200,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21201,"byte_end":21204,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The key-value pairs are indexed in a compact range without holes in the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21205,"byte_end":21280,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ range `0..self.len()`. For example, the method `.get_full` looks up the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21281,"byte_end":21356,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ index for a key, and the method `.get_index` looks up the key-value pair by","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21357,"byte_end":21436,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ index.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21437,"byte_end":21447,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21448,"byte_end":21451,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21452,"byte_end":21466,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21467,"byte_end":21470,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21471,"byte_end":21478,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexMap;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21479,"byte_end":21506,"line_start":57,"line_end":57,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21507,"byte_end":21510,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // count the frequency of each letter in a sentence.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21511,"byte_end":21567,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/ let mut letters = IndexMap::new();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21568,"byte_end":21606,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21607,"byte_end":21658,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/     *letters.entry(ch).or_insert(0) += 1;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21659,"byte_end":21704,"line_start":62,"line_end":62,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21705,"byte_end":21710,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21711,"byte_end":21714,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21715,"byte_end":21748,"line_start":65,"line_end":65,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21749,"byte_end":21782,"line_start":66,"line_end":66,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21783,"byte_end":21816,"line_start":67,"line_end":67,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21817,"byte_end":21857,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21858,"byte_end":21865,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":21866,"byte_end":21881,"line_start":70,"line_end":70,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23607,"byte_end":23610,"line_start":147,"line_end":147,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new map. (Does not allocate.)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23539,"byte_end":23581,"line_start":145,"line_end":145,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23586,"byte_end":23595,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23837,"byte_end":23850,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexMap<K, V>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23665,"byte_end":23734,"line_start":151,"line_end":151,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23739,"byte_end":23768,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23773,"byte_end":23776,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23781,"byte_end":23811,"line_start":154,"line_end":154,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23816,"byte_end":23825,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24148,"byte_end":24172,"line_start":167,"line_end":167,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with capacity for `n` key-value pairs. (Does not\n allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new map with capacity for `n` key-value pairs. (Does not","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23976,"byte_end":24045,"line_start":162,"line_end":162,"column_start":5,"column_end":74}},{"value":"/ allocate if `n` is zero.)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24050,"byte_end":24079,"line_start":163,"line_end":163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24084,"byte_end":24087,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24092,"byte_end":24122,"line_start":165,"line_end":165,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24127,"byte_end":24136,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24551,"byte_end":24562,"line_start":182,"line_end":182,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexMap<K, V, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new map with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new map with `hash_builder`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24499,"byte_end":24539,"line_start":181,"line_end":181,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24699,"byte_end":24707,"line_start":187,"line_end":187,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24657,"byte_end":24687,"line_start":186,"line_end":186,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24828,"byte_end":24834,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexMap<K, V, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the map's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the map's `BuildHasher`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24766,"byte_end":24816,"line_start":191,"line_end":191,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25009,"byte_end":25012,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24888,"byte_end":24940,"line_start":196,"line_end":196,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24945,"byte_end":24948,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24953,"byte_end":24983,"line_start":198,"line_end":198,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":24988,"byte_end":24997,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25184,"byte_end":25192,"line_start":208,"line_end":208,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25066,"byte_end":25115,"line_start":204,"line_end":204,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25120,"byte_end":25123,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25128,"byte_end":25158,"line_start":206,"line_end":206,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25163,"byte_end":25172,"line_start":207,"line_end":207,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25331,"byte_end":25335,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25245,"byte_end":25319,"line_start":212,"line_end":212,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25529,"byte_end":25537,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25443,"byte_end":25517,"line_start":219,"line_end":219,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25738,"byte_end":25742,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25663,"byte_end":25726,"line_start":226,"line_end":226,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25927,"byte_end":25933,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":25850,"byte_end":25915,"line_start":233,"line_end":233,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26152,"byte_end":26162,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the values of the map,\n in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the values of the map,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26045,"byte_end":26117,"line_start":240,"line_end":240,"column_start":5,"column_end":77}},{"value":"/ in their order","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26122,"byte_end":26140,"line_start":241,"line_end":241,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26420,"byte_end":26425,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26292,"byte_end":26365,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26370,"byte_end":26373,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26378,"byte_end":26408,"line_start":250,"line_end":250,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26653,"byte_end":26661,"line_start":258,"line_end":258,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexMap<K, V, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the map, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the map, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26477,"byte_end":26554,"line_start":255,"line_end":255,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26559,"byte_end":26562,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the map's current length, this has no effect.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26567,"byte_end":26641,"line_start":257,"line_end":257,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27413,"byte_end":27418,"line_start":275,"line_end":275,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexMap<K, V, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, K, V> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexMap` in the given index range, returning those\n key-value pairs as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexMap` in the given index range, returning those","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26731,"byte_end":26798,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/ key-value pairs as a drain iterator.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26803,"byte_end":26843,"line_start":263,"line_end":263,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26848,"byte_end":26851,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26856,"byte_end":26923,"line_start":265,"line_end":265,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":26928,"byte_end":27002,"line_start":266,"line_end":266,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the map entirely, use `RangeFull`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27007,"byte_end":27083,"line_start":267,"line_end":267,"column_start":5,"column_end":81}},{"value":"/ like `map.drain(..)`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27088,"byte_end":27113,"line_start":268,"line_end":268,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27118,"byte_end":27121,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27126,"byte_end":27198,"line_start":270,"line_end":270,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27203,"byte_end":27253,"line_start":271,"line_end":271,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27258,"byte_end":27261,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27266,"byte_end":27340,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27345,"byte_end":27401,"line_start":274,"line_end":274,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27928,"byte_end":27937,"line_start":291,"line_end":291,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexMap<K, V, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27588,"byte_end":27642,"line_start":284,"line_end":284,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27647,"byte_end":27650,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated map containing the elements in the range","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27655,"byte_end":27725,"line_start":286,"line_end":286,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original map will be left containing","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27730,"byte_end":27803,"line_start":287,"line_end":287,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27808,"byte_end":27872,"line_start":288,"line_end":288,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27877,"byte_end":27880,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":27885,"byte_end":27916,"line_start":290,"line_end":290,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28328,"byte_end":28335,"line_start":310,"line_end":310,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexMap<K, V, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more key-value pairs.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more key-value pairs.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28214,"byte_end":28273,"line_start":307,"line_end":307,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28278,"byte_end":28281,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28286,"byte_end":28316,"line_start":309,"line_end":309,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28528,"byte_end":28541,"line_start":317,"line_end":317,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexMap<K, V, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the map as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the map as much as possible.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28418,"byte_end":28473,"line_start":314,"line_end":314,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28478,"byte_end":28481,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28486,"byte_end":28516,"line_start":316,"line_end":316,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29440,"byte_end":29446,"line_start":340,"line_end":340,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28788,"byte_end":28827,"line_start":327,"line_end":327,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28832,"byte_end":28835,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28840,"byte_end":28911,"line_start":329,"line_end":329,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28916,"byte_end":28989,"line_start":330,"line_end":330,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `Some(_)`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28994,"byte_end":29060,"line_start":331,"line_end":331,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29065,"byte_end":29068,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29073,"byte_end":29143,"line_start":333,"line_end":333,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `None` is returned.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29148,"byte_end":29200,"line_start":334,"line_end":334,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29205,"byte_end":29208,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29213,"byte_end":29263,"line_start":336,"line_end":336,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29268,"byte_end":29271,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29276,"byte_end":29351,"line_start":338,"line_end":338,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29356,"byte_end":29428,"line_start":339,"line_end":339,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30232,"byte_end":30243,"line_start":357,"line_end":357,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexMap<K, V, S>>::insert_full","value":"pub fn insert_full(&mut Self, K, V) -> (usize, Option<V>)","parent":null,"children":[],"decl_id":null,"docs":" Insert a key-value pair in the map, and get their index.","sig":null,"attributes":[{"value":"/ Insert a key-value pair in the map, and get their index.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29541,"byte_end":29601,"line_start":344,"line_end":344,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29606,"byte_end":29609,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29614,"byte_end":29685,"line_start":346,"line_end":346,"column_start":5,"column_end":76}},{"value":"/ retains in its place in the order, its corresponding value is updated","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29690,"byte_end":29763,"line_start":347,"line_end":347,"column_start":5,"column_end":78}},{"value":"/ with `value` and the older value is returned inside `(index, Some(_))`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29768,"byte_end":29843,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29848,"byte_end":29851,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29856,"byte_end":29926,"line_start":350,"line_end":350,"column_start":5,"column_end":75}},{"value":"/ inserted, last in order, and `(index, None)` is returned.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29931,"byte_end":29992,"line_start":351,"line_end":351,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":29997,"byte_end":30000,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30005,"byte_end":30055,"line_start":353,"line_end":353,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30060,"byte_end":30063,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ See also [`entry`](#method.entry) if you you want to insert *or* modify","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30068,"byte_end":30143,"line_start":355,"line_end":355,"column_start":5,"column_end":80}},{"value":"/ or if you need to get the index of the corresponding key-value pair.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30148,"byte_end":30220,"line_start":356,"line_end":356,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30575,"byte_end":30580,"line_start":366,"line_end":366,"column_start":12,"column_end":17},"name":"entry","qualname":"<IndexMap<K, V, S>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Get the given key’s corresponding entry in the map for insertion and/or\n in-place manipulation.","sig":null,"attributes":[{"value":"/ Get the given key’s corresponding entry in the map for insertion and/or","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30392,"byte_end":30469,"line_start":362,"line_end":362,"column_start":5,"column_end":80}},{"value":"/ in-place manipulation.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30474,"byte_end":30500,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30505,"byte_end":30508,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30513,"byte_end":30563,"line_start":365,"line_end":365,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30830,"byte_end":30842,"line_start":374,"line_end":374,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `key` exists in the map.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `key` exists in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30703,"byte_end":30765,"line_start":371,"line_end":371,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30770,"byte_end":30773,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30778,"byte_end":30818,"line_start":373,"line_end":373,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":668},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31136,"byte_end":31139,"line_start":385,"line_end":385,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored for `key`, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored for `key`, if it is present,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":30979,"byte_end":31050,"line_start":381,"line_end":381,"column_start":5,"column_end":76}},{"value":"/ else `None`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31055,"byte_end":31071,"line_start":382,"line_end":382,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31076,"byte_end":31079,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31084,"byte_end":31124,"line_start":384,"line_end":384,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31578,"byte_end":31591,"line_start":401,"line_end":401,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<IndexMap<K, V, S>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return references to the key-value pair stored for `key`,\n if it is present, else `None`.","sig":null,"attributes":[{"value":"/ Return references to the key-value pair stored for `key`,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31413,"byte_end":31474,"line_start":397,"line_end":397,"column_start":5,"column_end":66}},{"value":"/ if it is present, else `None`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31479,"byte_end":31513,"line_start":398,"line_end":398,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31518,"byte_end":31521,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31526,"byte_end":31566,"line_start":400,"line_end":400,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31933,"byte_end":31941,"line_start":414,"line_end":414,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexMap<K, V, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &K, &V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, key and value\n","sig":null,"attributes":[{"value":"/ Return item index, key and value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":31885,"byte_end":31921,"line_start":413,"line_end":413,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":32356,"byte_end":32368,"line_start":429,"line_end":429,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexMap<K, V, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the map","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the map","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":32245,"byte_end":32291,"line_start":426,"line_end":426,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":32296,"byte_end":32299,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":32304,"byte_end":32344,"line_start":428,"line_end":428,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":32638,"byte_end":32645,"line_start":441,"line_end":441,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":32946,"byte_end":32958,"line_start":453,"line_end":453,"column_start":12,"column_end":24},"name":"get_full_mut","qualname":"<IndexMap<K, V, S>>::get_full_mut","value":"pub fn get_full_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, &K, &mut V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":33990,"byte_end":33996,"line_start":488,"line_end":488,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":33669,"byte_end":33729,"line_start":480,"line_end":480,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":33734,"byte_end":33748,"line_start":481,"line_end":481,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":33753,"byte_end":33756,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(key)`, if you need to","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":33761,"byte_end":33832,"line_start":483,"line_end":483,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove(key)`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":33837,"byte_end":33908,"line_start":484,"line_end":484,"column_start":5,"column_end":76}},{"value":"/ instead.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":33913,"byte_end":33925,"line_start":485,"line_end":485,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":33930,"byte_end":33933,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":33938,"byte_end":33978,"line_start":487,"line_end":487,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34446,"byte_end":34458,"line_start":502,"line_end":502,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<IndexMap<K, V, S>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34131,"byte_end":34192,"line_start":495,"line_end":495,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34197,"byte_end":34200,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove_entry(key)`, if you need to","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34205,"byte_end":34282,"line_start":497,"line_end":497,"column_start":5,"column_end":82}},{"value":"/ preserve the order of the keys in the map, use `.shift_remove_entry(key)`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34287,"byte_end":34364,"line_start":498,"line_end":498,"column_start":5,"column_end":82}},{"value":"/ instead.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34369,"byte_end":34381,"line_start":499,"line_end":499,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34386,"byte_end":34389,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34394,"byte_end":34434,"line_start":501,"line_end":501,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35015,"byte_end":35026,"line_start":519,"line_end":519,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34604,"byte_end":34664,"line_start":509,"line_end":509,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34669,"byte_end":34683,"line_start":510,"line_end":510,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34688,"byte_end":34691,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34696,"byte_end":34768,"line_start":512,"line_end":512,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34773,"byte_end":34836,"line_start":513,"line_end":513,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34841,"byte_end":34896,"line_start":514,"line_end":514,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34901,"byte_end":34904,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34909,"byte_end":34950,"line_start":516,"line_end":516,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34955,"byte_end":34958,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":34963,"byte_end":35003,"line_start":518,"line_end":518,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35570,"byte_end":35587,"line_start":535,"line_end":535,"column_start":12,"column_end":29},"name":"swap_remove_entry","qualname":"<IndexMap<K, V, S>>::swap_remove_entry","value":"pub fn swap_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35177,"byte_end":35238,"line_start":526,"line_end":526,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35243,"byte_end":35246,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35251,"byte_end":35323,"line_start":528,"line_end":528,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35328,"byte_end":35391,"line_start":529,"line_end":529,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35396,"byte_end":35451,"line_start":530,"line_end":530,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35456,"byte_end":35459,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35464,"byte_end":35505,"line_start":532,"line_end":532,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35510,"byte_end":35513,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35518,"byte_end":35558,"line_start":534,"line_end":534,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36258,"byte_end":36274,"line_start":555,"line_end":555,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexMap<K, V, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35833,"byte_end":35900,"line_start":545,"line_end":545,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35905,"byte_end":35926,"line_start":546,"line_end":546,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35931,"byte_end":35934,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":35939,"byte_end":36011,"line_start":548,"line_end":548,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36016,"byte_end":36079,"line_start":549,"line_end":549,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36084,"byte_end":36139,"line_start":550,"line_end":550,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36144,"byte_end":36147,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36152,"byte_end":36193,"line_start":552,"line_end":552,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36198,"byte_end":36201,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36206,"byte_end":36246,"line_start":554,"line_end":554,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36941,"byte_end":36953,"line_start":576,"line_end":576,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexMap<K, V, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where Q: Hash +\nEquivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return\n its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36536,"byte_end":36596,"line_start":566,"line_end":566,"column_start":5,"column_end":65}},{"value":"/ its value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36601,"byte_end":36615,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36620,"byte_end":36623,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36628,"byte_end":36694,"line_start":569,"line_end":569,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36699,"byte_end":36760,"line_start":570,"line_end":570,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36765,"byte_end":36822,"line_start":571,"line_end":571,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36827,"byte_end":36830,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36835,"byte_end":36876,"line_start":573,"line_end":573,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36881,"byte_end":36884,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":36889,"byte_end":36929,"line_start":575,"line_end":575,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37492,"byte_end":37510,"line_start":592,"line_end":592,"column_start":12,"column_end":30},"name":"shift_remove_entry","qualname":"<IndexMap<K, V, S>>::shift_remove_entry","value":"pub fn shift_remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nQ: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the key-value pair equivalent to `key`.","sig":null,"attributes":[{"value":"/ Remove and return the key-value pair equivalent to `key`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37105,"byte_end":37166,"line_start":583,"line_end":583,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37171,"byte_end":37174,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37179,"byte_end":37245,"line_start":585,"line_end":585,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37250,"byte_end":37311,"line_start":586,"line_end":586,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37316,"byte_end":37373,"line_start":587,"line_end":587,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37378,"byte_end":37381,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37386,"byte_end":37427,"line_start":589,"line_end":589,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37432,"byte_end":37435,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37440,"byte_end":37480,"line_start":591,"line_end":591,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38176,"byte_end":38193,"line_start":612,"line_end":612,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexMap<K, V, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, K, V)>\nwhere Q: Hash + Equivalent<K>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return it and\n the index it had.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return it and","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37757,"byte_end":37824,"line_start":602,"line_end":602,"column_start":5,"column_end":72}},{"value":"/ the index it had.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37829,"byte_end":37850,"line_start":603,"line_end":603,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37855,"byte_end":37858,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37863,"byte_end":37929,"line_start":605,"line_end":605,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":37934,"byte_end":37995,"line_start":606,"line_end":606,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38000,"byte_end":38057,"line_start":607,"line_end":607,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38062,"byte_end":38065,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38070,"byte_end":38111,"line_start":609,"line_end":609,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38116,"byte_end":38119,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38124,"byte_end":38164,"line_start":611,"line_end":611,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38555,"byte_end":38558,"line_start":626,"line_end":626,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexMap<K, V, S>>::pop","value":"pub fn pop(&mut Self) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last key-value pair","sig":null,"attributes":[{"value":"/ Remove the last key-value pair","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38456,"byte_end":38490,"line_start":623,"line_end":623,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38495,"byte_end":38498,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38503,"byte_end":38543,"line_start":625,"line_end":625,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38901,"byte_end":38907,"line_start":637,"line_end":637,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexMap<K, V, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each key-value pair in the map and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each key-value pair in the map and keep those where the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38625,"byte_end":38697,"line_start":630,"line_end":630,"column_start":5,"column_end":77}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38702,"byte_end":38736,"line_start":631,"line_end":631,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38741,"byte_end":38744,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38749,"byte_end":38821,"line_start":633,"line_end":633,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38826,"byte_end":38836,"line_start":634,"line_end":634,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38841,"byte_end":38844,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":38849,"byte_end":38889,"line_start":636,"line_end":636,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39345,"byte_end":39354,"line_start":654,"line_end":654,"column_start":12,"column_end":21},"name":"sort_keys","qualname":"<IndexMap<K, V, S>>::sort_keys","value":"pub fn sort_keys(&mut Self) where K: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs by the default ordering of the keys.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs by the default ordering of the keys.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39217,"byte_end":39290,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39295,"byte_end":39298,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39303,"byte_end":39333,"line_start":653,"line_end":653,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39940,"byte_end":39947,"line_start":671,"line_end":671,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexMap<K, V, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&K, &V, &K, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the map’s key-value pairs in place using the comparison\n function `compare`.","sig":null,"attributes":[{"value":"/ Sort the map’s key-value pairs in place using the comparison","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39521,"byte_end":39587,"line_start":663,"line_end":663,"column_start":5,"column_end":69}},{"value":"/ function `compare`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39592,"byte_end":39615,"line_start":664,"line_end":664,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39620,"byte_end":39623,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ The comparison function receives two key and value pairs to compare (you","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39628,"byte_end":39704,"line_start":666,"line_end":666,"column_start":5,"column_end":81}},{"value":"/ can sort by keys or values or their combination as needed).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39709,"byte_end":39772,"line_start":667,"line_end":667,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39777,"byte_end":39780,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n + c)** time and **O(n)** space where *n* is","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39785,"byte_end":39856,"line_start":669,"line_end":669,"column_start":5,"column_end":76}},{"value":"/ the length of the map and *c* the capacity. The sort is stable.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":39861,"byte_end":39928,"line_start":670,"line_end":670,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40350,"byte_end":40359,"line_start":684,"line_end":684,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexMap<K, V, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<K, V> where F: FnMut(&K, &V, &K, &V)\n-> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the key-value pairs of the map and return a by value iterator of\n the key-value pairs with the result.","sig":null,"attributes":[{"value":"/ Sort the key-value pairs of the map and return a by value iterator of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40184,"byte_end":40257,"line_start":680,"line_end":680,"column_start":5,"column_end":78}},{"value":"/ the key-value pairs with the result.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40262,"byte_end":40302,"line_start":681,"line_end":681,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40307,"byte_end":40310,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40315,"byte_end":40338,"line_start":683,"line_end":683,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40802,"byte_end":40809,"line_start":698,"line_end":698,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexMap<K, V, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the map’s key-value pairs in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the map’s key-value pairs in place.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40665,"byte_end":40728,"line_start":695,"line_end":695,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40733,"byte_end":40736,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40741,"byte_end":40790,"line_start":697,"line_end":697,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41046,"byte_end":41055,"line_start":709,"line_end":709,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexMap<K, V, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40898,"byte_end":40931,"line_start":704,"line_end":704,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40936,"byte_end":40939,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40944,"byte_end":40991,"line_start":706,"line_end":706,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40996,"byte_end":40999,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41004,"byte_end":41034,"line_start":708,"line_end":708,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41313,"byte_end":41326,"line_start":718,"line_end":718,"column_start":12,"column_end":25},"name":"get_index_mut","qualname":"<IndexMap<K, V, S>>::get_index_mut","value":"pub fn get_index_mut(&mut Self, usize) -> Option<(&mut K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get a key-value pair by index","sig":null,"attributes":[{"value":"/ Get a key-value pair by index","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41165,"byte_end":41198,"line_start":713,"line_end":713,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41203,"byte_end":41206,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41211,"byte_end":41258,"line_start":715,"line_end":715,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41263,"byte_end":41266,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41271,"byte_end":41301,"line_start":717,"line_end":717,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41543,"byte_end":41548,"line_start":725,"line_end":725,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexMap<K, V, S>>::first","value":"pub fn first(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair","sig":null,"attributes":[{"value":"/ Get the first key-value pair","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41456,"byte_end":41488,"line_start":722,"line_end":722,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41493,"byte_end":41496,"line_start":723,"line_end":723,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41501,"byte_end":41531,"line_start":724,"line_end":724,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41762,"byte_end":41771,"line_start":732,"line_end":732,"column_start":12,"column_end":21},"name":"first_mut","qualname":"<IndexMap<K, V, S>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the first key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the first key-value pair, with mutable access to the value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41641,"byte_end":41707,"line_start":729,"line_end":729,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41712,"byte_end":41715,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41720,"byte_end":41750,"line_start":731,"line_end":731,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41969,"byte_end":41973,"line_start":739,"line_end":739,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexMap<K, V, S>>::last","value":"pub fn last(&Self) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair","sig":null,"attributes":[{"value":"/ Get the last key-value pair","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41883,"byte_end":41914,"line_start":736,"line_end":736,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41919,"byte_end":41922,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":41927,"byte_end":41957,"line_start":738,"line_end":738,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42185,"byte_end":42193,"line_start":746,"line_end":746,"column_start":12,"column_end":20},"name":"last_mut","qualname":"<IndexMap<K, V, S>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Get the last key-value pair, with mutable access to the value","sig":null,"attributes":[{"value":"/ Get the last key-value pair, with mutable access to the value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42065,"byte_end":42130,"line_start":743,"line_end":743,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42135,"byte_end":42138,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42143,"byte_end":42173,"line_start":745,"line_end":745,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42680,"byte_end":42697,"line_start":759,"line_end":759,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexMap<K, V, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42304,"byte_end":42342,"line_start":750,"line_end":750,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42347,"byte_end":42350,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42355,"byte_end":42402,"line_start":752,"line_end":752,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42407,"byte_end":42410,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42415,"byte_end":42487,"line_start":754,"line_end":754,"column_start":5,"column_end":77}},{"value":"/ last element of the map and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42492,"byte_end":42555,"line_start":755,"line_end":755,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42560,"byte_end":42615,"line_start":756,"line_end":756,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42620,"byte_end":42623,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42628,"byte_end":42668,"line_start":758,"line_end":758,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43167,"byte_end":43185,"line_start":772,"line_end":772,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexMap<K, V, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair by index","sig":null,"attributes":[{"value":"/ Remove the key-value pair by index","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42797,"byte_end":42835,"line_start":763,"line_end":763,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42840,"byte_end":42843,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42848,"byte_end":42895,"line_start":765,"line_end":765,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42900,"byte_end":42903,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the pair is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42908,"byte_end":42974,"line_start":767,"line_end":767,"column_start":5,"column_end":71}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":42979,"byte_end":43040,"line_start":768,"line_end":768,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43045,"byte_end":43102,"line_start":769,"line_end":769,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43107,"byte_end":43110,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43115,"byte_end":43155,"line_start":771,"line_end":771,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43417,"byte_end":43429,"line_start":779,"line_end":779,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexMap<K, V, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Swaps the position of two key-value pairs in the map.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43286,"byte_end":43343,"line_start":776,"line_end":776,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43348,"byte_end":43351,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43356,"byte_end":43405,"line_start":778,"line_end":778,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":728},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43766,"byte_end":43770,"line_start":791,"line_end":791,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":732}],"decl_id":null,"docs":" An iterator over the keys of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43509,"byte_end":43555,"line_start":784,"line_end":784,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43556,"byte_end":43559,"line_start":785,"line_end":785,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43560,"byte_end":43636,"line_start":786,"line_end":786,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43637,"byte_end":43664,"line_start":787,"line_end":787,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43665,"byte_end":43668,"line_start":788,"line_end":788,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.IndexMap.html#method.keys","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43669,"byte_end":43715,"line_start":789,"line_end":789,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43716,"byte_end":43754,"line_start":790,"line_end":790,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":754},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44864,"byte_end":44870,"line_start":835,"line_end":835,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":758}],"decl_id":null,"docs":" An iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44599,"byte_end":44647,"line_start":828,"line_end":828,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44648,"byte_end":44651,"line_start":829,"line_end":829,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44652,"byte_end":44730,"line_start":830,"line_end":830,"column_start":1,"column_end":79}},{"value":"/ documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44731,"byte_end":44758,"line_start":831,"line_end":831,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44759,"byte_end":44762,"line_start":832,"line_end":832,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.IndexMap.html#method.values","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44763,"byte_end":44813,"line_start":833,"line_end":833,"column_start":1,"column_end":51}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44814,"byte_end":44852,"line_start":834,"line_end":834,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":780},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45988,"byte_end":45997,"line_start":879,"line_end":879,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":784}],"decl_id":null,"docs":" A mutable iterator over the values of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45704,"byte_end":45759,"line_start":872,"line_end":872,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45760,"byte_end":45763,"line_start":873,"line_end":873,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45764,"byte_end":45846,"line_start":874,"line_end":874,"column_start":1,"column_end":83}},{"value":"/ documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45847,"byte_end":45874,"line_start":875,"line_end":875,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45875,"byte_end":45878,"line_start":876,"line_end":876,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.IndexMap.html#method.values_mut","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45879,"byte_end":45937,"line_start":877,"line_end":877,"column_start":1,"column_end":59}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45938,"byte_end":45976,"line_start":878,"line_end":878,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":798},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46726,"byte_end":46730,"line_start":908,"line_end":908,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":802}],"decl_id":null,"docs":" An iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46466,"byte_end":46515,"line_start":901,"line_end":901,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46516,"byte_end":46519,"line_start":902,"line_end":902,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46520,"byte_end":46596,"line_start":903,"line_end":903,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46597,"byte_end":46624,"line_start":904,"line_end":904,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46625,"byte_end":46628,"line_start":905,"line_end":905,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.IndexMap.html#method.iter","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46629,"byte_end":46675,"line_start":906,"line_end":906,"column_start":1,"column_end":47}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46676,"byte_end":46714,"line_start":907,"line_end":907,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":824},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47842,"byte_end":47849,"line_start":952,"line_end":952,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":828}],"decl_id":null,"docs":" A mutable iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47563,"byte_end":47619,"line_start":945,"line_end":945,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47620,"byte_end":47623,"line_start":946,"line_end":946,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47624,"byte_end":47704,"line_start":947,"line_end":947,"column_start":1,"column_end":81}},{"value":"/ documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47705,"byte_end":47732,"line_start":948,"line_end":948,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47733,"byte_end":47736,"line_start":949,"line_end":949,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.IndexMap.html#method.iter_mut","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47737,"byte_end":47791,"line_start":950,"line_end":950,"column_start":1,"column_end":55}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47792,"byte_end":47830,"line_start":951,"line_end":951,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":842},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48638,"byte_end":48646,"line_start":981,"line_end":981,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":845}],"decl_id":null,"docs":" An owning iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48317,"byte_end":48373,"line_start":974,"line_end":974,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48374,"byte_end":48377,"line_start":975,"line_end":975,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexMap`]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48378,"byte_end":48450,"line_start":976,"line_end":976,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48451,"byte_end":48526,"line_start":977,"line_end":977,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48527,"byte_end":48530,"line_start":978,"line_end":978,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.IndexMap.html#method.into_iter","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48531,"byte_end":48587,"line_start":979,"line_end":979,"column_start":1,"column_end":57}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48588,"byte_end":48626,"line_start":980,"line_end":980,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":862},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49619,"byte_end":49624,"line_start":1017,"line_end":1017,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":866}],"decl_id":null,"docs":" A draining iterator over the entries of a `IndexMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `IndexMap`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49348,"byte_end":49405,"line_start":1010,"line_end":1010,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49406,"byte_end":49409,"line_start":1011,"line_end":1011,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexMap`]. See its","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49410,"byte_end":49487,"line_start":1012,"line_end":1012,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49488,"byte_end":49515,"line_start":1013,"line_end":1013,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49516,"byte_end":49519,"line_start":1014,"line_end":1014,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.IndexMap.html#method.drain","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49520,"byte_end":49568,"line_start":1015,"line_end":1015,"column_start":1,"column_end":49}},{"value":"/ [`IndexMap`]: struct.IndexMap.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49569,"byte_end":49607,"line_start":1016,"line_end":1016,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":960},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"set","qualname":"::set","value":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","parent":null,"children":[{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":974},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":1001},{"krate":0,"index":1004},{"krate":0,"index":1007},{"krate":0,"index":1010},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1025},{"krate":0,"index":1029},{"krate":0,"index":1034},{"krate":0,"index":1043},{"krate":0,"index":1047},{"krate":0,"index":1051},{"krate":0,"index":1066},{"krate":0,"index":1131},{"krate":0,"index":1142},{"krate":0,"index":1147},{"krate":0,"index":1150},{"krate":0,"index":1153},{"krate":0,"index":1156},{"krate":0,"index":1159},{"krate":0,"index":1162},{"krate":0,"index":1166},{"krate":0,"index":1170},{"krate":0,"index":1173},{"krate":0,"index":1176},{"krate":0,"index":1179},{"krate":0,"index":1182},{"krate":0,"index":1186},{"krate":0,"index":1189},{"krate":0,"index":1191},{"krate":0,"index":1198},{"krate":0,"index":1204},{"krate":0,"index":1210},{"krate":0,"index":1216},{"krate":0,"index":1222},{"krate":0,"index":1226},{"krate":0,"index":1231},{"krate":0,"index":1234},{"krate":0,"index":1246},{"krate":0,"index":1252},{"krate":0,"index":1259},{"krate":0,"index":1263},{"krate":0,"index":1267},{"krate":0,"index":1271},{"krate":0,"index":1277},{"krate":0,"index":1284},{"krate":0,"index":1288},{"krate":0,"index":1292},{"krate":0,"index":1296},{"krate":0,"index":1302},{"krate":0,"index":1313},{"krate":0,"index":1318},{"krate":0,"index":1323},{"krate":0,"index":1328},{"krate":0,"index":1333},{"krate":0,"index":1343},{"krate":0,"index":1347},{"krate":0,"index":1351},{"krate":0,"index":1355},{"krate":0,"index":1361},{"krate":0,"index":1367},{"krate":0,"index":1373}],"decl_id":null,"docs":" A hash set implemented using `IndexMap`\n","sig":null,"attributes":[{"value":"/ A hash set implemented using `IndexMap`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":97507,"byte_end":97550,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1025},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99596,"byte_end":99604,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::set::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":1028}],"decl_id":null,"docs":" A hash set where the iteration order of the values is independent of their\n hash values.","sig":null,"attributes":[{"value":"/ A hash set where the iteration order of the values is independent of their","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":97990,"byte_end":98068,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ hash values.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98069,"byte_end":98085,"line_start":22,"line_end":22,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98086,"byte_end":98089,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The interface is closely compatible with the standard `HashSet`, but also","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98090,"byte_end":98167,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ has additional features.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98168,"byte_end":98196,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98197,"byte_end":98200,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Order","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98201,"byte_end":98212,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98213,"byte_end":98216,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The values have a consistent order that is determined by the sequence of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98217,"byte_end":98293,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ insertion and removal calls on the set. The order does not depend on the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98294,"byte_end":98370,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ values or the hash function at all. Note that insertion order and value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98371,"byte_end":98446,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ are not affected if a re-insertion is attempted once an element is","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98447,"byte_end":98517,"line_start":32,"line_end":32,"column_start":1,"column_end":71}},{"value":"/ already present.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98518,"byte_end":98538,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98539,"byte_end":98542,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All iterators traverse the set *in order*.  Set operation iterators like","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98543,"byte_end":98619,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ `union` produce a concatenated order, as do their matching \"bitwise\"","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98620,"byte_end":98692,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ operators.  See their documentation for specifics.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98693,"byte_end":98747,"line_start":37,"line_end":37,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98748,"byte_end":98751,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ The insertion order is preserved, with **notable exceptions** like the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98752,"byte_end":98826,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ `.remove()` or `.swap_remove()` methods. Methods such as `.sort_by()` of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98827,"byte_end":98903,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ course result in a new order, depending on the sorting order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98904,"byte_end":98969,"line_start":41,"line_end":41,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98970,"byte_end":98973,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Indices","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98974,"byte_end":98987,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98988,"byte_end":98991,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ The values are indexed in a compact range without holes in the range","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":98992,"byte_end":99064,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ `0..self.len()`. For example, the method `.get_full` looks up the index for","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99065,"byte_end":99144,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ a value, and the method `.get_index` looks up the value by index.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99145,"byte_end":99214,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99215,"byte_end":99218,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99219,"byte_end":99233,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99234,"byte_end":99237,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99238,"byte_end":99245,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use indexmap::IndexSet;","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99246,"byte_end":99273,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99274,"byte_end":99277,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Collects which letters appear in a sentence.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99278,"byte_end":99329,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ let letters: IndexSet<_> = \"a short treatise on fungi\".chars().collect();","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99330,"byte_end":99407,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99408,"byte_end":99411,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ assert!(letters.contains(&'s'));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99412,"byte_end":99448,"line_start":57,"line_end":57,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'t'));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99449,"byte_end":99485,"line_start":58,"line_end":58,"column_start":1,"column_end":37}},{"value":"/ assert!(letters.contains(&'u'));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99486,"byte_end":99522,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/ assert!(!letters.contains(&'y'));","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99523,"byte_end":99560,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99561,"byte_end":99568,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"cfg(has_std)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99569,"byte_end":99584,"line_start":62,"line_end":62,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101026,"byte_end":101029,"line_start":130,"line_end":130,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexSet<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set. (Does not allocate.)\n","sig":null,"attributes":[{"value":"/ Create a new set. (Does not allocate.)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":100972,"byte_end":101014,"line_start":129,"line_end":129,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101267,"byte_end":101280,"line_start":140,"line_end":140,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<IndexSet<T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101116,"byte_end":101168,"line_start":136,"line_end":136,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101173,"byte_end":101212,"line_start":137,"line_end":137,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101217,"byte_end":101220,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101225,"byte_end":101255,"line_start":139,"line_end":139,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101567,"byte_end":101591,"line_start":152,"line_end":152,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<IndexSet<T, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with capacity for `n` elements.\n (Does not allocate if `n` is zero.)","sig":null,"attributes":[{"value":"/ Create a new set with capacity for `n` elements.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101416,"byte_end":101468,"line_start":148,"line_end":148,"column_start":5,"column_end":57}},{"value":"/ (Does not allocate if `n` is zero.)","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101473,"byte_end":101512,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101517,"byte_end":101520,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101525,"byte_end":101555,"line_start":151,"line_end":151,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101791,"byte_end":101802,"line_start":159,"line_end":159,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<IndexSet<T, S>>::with_hasher","value":"pub fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new set with `hash_builder`\n","sig":null,"attributes":[{"value":"/ Create a new set with `hash_builder`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101739,"byte_end":101779,"line_start":158,"line_end":158,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101966,"byte_end":101974,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes in **O(1)** time.\n","sig":null,"attributes":[{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101924,"byte_end":101954,"line_start":165,"line_end":165,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102094,"byte_end":102100,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"hasher","qualname":"<IndexSet<T, S>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the set's `BuildHasher`.\n","sig":null,"attributes":[{"value":"/ Return a reference to the set's `BuildHasher`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102032,"byte_end":102082,"line_start":170,"line_end":170,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102253,"byte_end":102256,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of elements in the set.","sig":null,"attributes":[{"value":"/ Return the number of elements in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102153,"byte_end":102198,"line_start":175,"line_end":175,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102203,"byte_end":102206,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102211,"byte_end":102241,"line_start":177,"line_end":177,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102413,"byte_end":102421,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the set contains no elements.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102309,"byte_end":102358,"line_start":182,"line_end":182,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102363,"byte_end":102366,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102371,"byte_end":102401,"line_start":184,"line_end":184,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102555,"byte_end":102559,"line_start":190,"line_end":190,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order\n","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102478,"byte_end":102543,"line_start":189,"line_end":189,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102781,"byte_end":102786,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements in the set, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all elements in the set, while preserving its capacity.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102660,"byte_end":102726,"line_start":196,"line_end":196,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102731,"byte_end":102734,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102739,"byte_end":102769,"line_start":198,"line_end":198,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103013,"byte_end":103021,"line_start":206,"line_end":206,"column_start":12,"column_end":20},"name":"truncate","qualname":"<IndexSet<T, S>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the set, keeping the first `len` elements and dropping the rest.","sig":null,"attributes":[{"value":"/ Shortens the set, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102837,"byte_end":102914,"line_start":203,"line_end":203,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102919,"byte_end":102922,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ If `len` is greater than the set's current length, this has no effect.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":102927,"byte_end":103001,"line_start":205,"line_end":205,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103763,"byte_end":103768,"line_start":223,"line_end":223,"column_start":12,"column_end":17},"name":"drain","qualname":"<IndexSet<T, S>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Clears the `IndexSet` in the given index range, returning those values\n as a drain iterator.","sig":null,"attributes":[{"value":"/ Clears the `IndexSet` in the given index range, returning those values","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103090,"byte_end":103164,"line_start":210,"line_end":210,"column_start":5,"column_end":79}},{"value":"/ as a drain iterator.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103169,"byte_end":103193,"line_start":211,"line_end":211,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103198,"byte_end":103201,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The range may be any type that implements `RangeBounds<usize>`,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103206,"byte_end":103273,"line_start":213,"line_end":213,"column_start":5,"column_end":72}},{"value":"/ including all of the `std::ops::Range*` types, or even a tuple pair of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103278,"byte_end":103352,"line_start":214,"line_end":214,"column_start":5,"column_end":79}},{"value":"/ `Bound` start and end values. To drain the set entirely, use `RangeFull`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103357,"byte_end":103433,"line_start":215,"line_end":215,"column_start":5,"column_end":81}},{"value":"/ like `set.drain(..)`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103438,"byte_end":103463,"line_start":216,"line_end":216,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103468,"byte_end":103471,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This shifts down all entries following the drained range to fill the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103476,"byte_end":103548,"line_start":218,"line_end":218,"column_start":5,"column_end":77}},{"value":"/ gap, and keeps the allocated memory for reuse.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103553,"byte_end":103603,"line_start":219,"line_end":219,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103608,"byte_end":103611,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if the starting point is greater than the end point or if","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103616,"byte_end":103690,"line_start":221,"line_end":221,"column_start":5,"column_end":79}},{"value":"/ the end point is greater than the length of the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103695,"byte_end":103751,"line_start":222,"line_end":222,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104279,"byte_end":104288,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"split_off","qualname":"<IndexSet<T, S>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self where S: Clone","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103939,"byte_end":103993,"line_start":232,"line_end":232,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":103998,"byte_end":104001,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Returns a newly allocated set containing the elements in the range","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104006,"byte_end":104076,"line_start":234,"line_end":234,"column_start":5,"column_end":75}},{"value":"/ `[at, len)`. After the call, the original set will be left containing","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104081,"byte_end":104154,"line_start":235,"line_end":235,"column_start":5,"column_end":78}},{"value":"/ the elements `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104159,"byte_end":104223,"line_start":236,"line_end":236,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104228,"byte_end":104231,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `at > len`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104236,"byte_end":104267,"line_start":238,"line_end":238,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104609,"byte_end":104616,"line_start":257,"line_end":257,"column_start":12,"column_end":19},"name":"reserve","qualname":"<IndexSet<T, S>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserve capacity for `additional` more values.","sig":null,"attributes":[{"value":"/ Reserve capacity for `additional` more values.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104504,"byte_end":104554,"line_start":254,"line_end":254,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104559,"byte_end":104562,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104567,"byte_end":104597,"line_start":256,"line_end":256,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104808,"byte_end":104821,"line_start":264,"line_end":264,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<IndexSet<T, S>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the capacity of the set as much as possible.","sig":null,"attributes":[{"value":"/ Shrink the capacity of the set as much as possible.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104698,"byte_end":104753,"line_start":261,"line_end":261,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104758,"byte_end":104761,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104766,"byte_end":104796,"line_start":263,"line_end":263,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105232,"byte_end":105238,"line_start":276,"line_end":276,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set.","sig":null,"attributes":[{"value":"/ Insert the value into the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104880,"byte_end":104914,"line_start":268,"line_end":268,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104919,"byte_end":104922,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104927,"byte_end":104990,"line_start":270,"line_end":270,"column_start":5,"column_end":68}},{"value":"/ `false` leaving the original value in the set and without","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104995,"byte_end":105056,"line_start":271,"line_end":271,"column_start":5,"column_end":66}},{"value":"/ altering its insertion order. Otherwise, it inserts the new","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105061,"byte_end":105124,"line_start":272,"line_end":272,"column_start":5,"column_end":68}},{"value":"/ item and returns `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105129,"byte_end":105157,"line_start":273,"line_end":273,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105162,"byte_end":105165,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105170,"byte_end":105220,"line_start":275,"line_end":275,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105776,"byte_end":105787,"line_start":289,"line_end":289,"column_start":12,"column_end":23},"name":"insert_full","qualname":"<IndexSet<T, S>>::insert_full","value":"pub fn insert_full(&mut Self, T) -> (usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Insert the value into the set, and get its index.","sig":null,"attributes":[{"value":"/ Insert the value into the set, and get its index.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105326,"byte_end":105379,"line_start":280,"line_end":280,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105384,"byte_end":105387,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ If an equivalent item already exists in the set, it returns","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105392,"byte_end":105455,"line_start":282,"line_end":282,"column_start":5,"column_end":68}},{"value":"/ the index of the existing item and `false`, leaving the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105460,"byte_end":105519,"line_start":283,"line_end":283,"column_start":5,"column_end":64}},{"value":"/ original value in the set and without altering its insertion","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105524,"byte_end":105588,"line_start":284,"line_end":284,"column_start":5,"column_end":69}},{"value":"/ order. Otherwise, it inserts the new item and returns the index","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105593,"byte_end":105660,"line_start":285,"line_end":285,"column_start":5,"column_end":72}},{"value":"/ of the inserted item and `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105665,"byte_end":105701,"line_start":286,"line_end":286,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105706,"byte_end":105709,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (amortized average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":105714,"byte_end":105764,"line_start":288,"line_end":288,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106277,"byte_end":106287,"line_start":305,"line_end":305,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S>>::difference","value":"pub fn difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Difference where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` but not `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` but not `other`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106109,"byte_end":106183,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106188,"byte_end":106191,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106196,"byte_end":106265,"line_start":304,"line_end":304,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106736,"byte_end":106756,"line_start":320,"line_end":320,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S>>::symmetric_difference","value":"pub fn symmetric_difference<'a, S2>(&'a Self, &'a IndexSet<T, S2>)\n-> SymmetricDifference where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in `self` or `other`,\n but not in both.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in `self` or `other`,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106492,"byte_end":106561,"line_start":315,"line_end":315,"column_start":5,"column_end":74}},{"value":"/ but not in both.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106566,"byte_end":106586,"line_start":316,"line_end":316,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106591,"byte_end":106594,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106599,"byte_end":106671,"line_start":318,"line_end":318,"column_start":5,"column_end":77}},{"value":"/ values from `other` in their original order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":106676,"byte_end":106724,"line_start":319,"line_end":319,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107196,"byte_end":107208,"line_start":335,"line_end":335,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S>>::intersection","value":"pub fn intersection<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Intersection\nwhere S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values that are in both `self` and `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over the values that are in both `self` and `other`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107027,"byte_end":107102,"line_start":332,"line_end":332,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107107,"byte_end":107110,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Values are produced in the same order that they appear in `self`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107115,"byte_end":107184,"line_start":334,"line_end":334,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107650,"byte_end":107655,"line_start":349,"line_end":349,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S>>::union","value":"pub fn union<'a, S2>(&'a Self, &'a IndexSet<T, S2>) -> Union where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all values that are in `self` or `other`.","sig":null,"attributes":[{"value":"/ Return an iterator over all values that are in `self` or `other`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107417,"byte_end":107486,"line_start":345,"line_end":345,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107491,"byte_end":107494,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Values from `self` are produced in their original order, followed by","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107499,"byte_end":107571,"line_start":347,"line_end":347,"column_start":5,"column_end":77}},{"value":"/ values that are unique to `other` in their original order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107576,"byte_end":107638,"line_start":348,"line_end":348,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107989,"byte_end":107997,"line_start":361,"line_end":361,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if an equivalent to `value` exists in the set.","sig":null,"attributes":[{"value":"/ Return `true` if an equivalent to `value` exists in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107860,"byte_end":107924,"line_start":358,"line_end":358,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107929,"byte_end":107932,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":107937,"byte_end":107977,"line_start":360,"line_end":360,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108290,"byte_end":108293,"line_start":372,"line_end":372,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexSet<T, S>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the value stored in the set, if it is present,\n else `None`.","sig":null,"attributes":[{"value":"/ Return a reference to the value stored in the set, if it is present,","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108132,"byte_end":108204,"line_start":368,"line_end":368,"column_start":5,"column_end":77}},{"value":"/ else `None`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108209,"byte_end":108225,"line_start":369,"line_end":369,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108230,"byte_end":108233,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108238,"byte_end":108278,"line_start":371,"line_end":371,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108496,"byte_end":108504,"line_start":380,"line_end":380,"column_start":12,"column_end":20},"name":"get_full","qualname":"<IndexSet<T, S>>::get_full","value":"pub fn get_full<Q: ?Sized>(&Self, &Q) -> Option<(usize, &T)> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index and value\n","sig":null,"attributes":[{"value":"/ Return item index and value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108453,"byte_end":108484,"line_start":379,"line_end":379,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108734,"byte_end":108746,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"get_index_of","qualname":"<IndexSet<T, S>>::get_index_of","value":"pub fn get_index_of<Q: ?Sized>(&Self, &Q) -> Option<usize> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Return item index, if it exists in the set\n","sig":null,"attributes":[{"value":"/ Return item index, if it exists in the set","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108676,"byte_end":108722,"line_start":387,"line_end":387,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109089,"byte_end":109096,"line_start":399,"line_end":399,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexSet<T, S>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is\n equal to the given one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108890,"byte_end":108964,"line_start":395,"line_end":395,"column_start":5,"column_end":79}},{"value":"/ equal to the given one. Returns the replaced value.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":108969,"byte_end":109024,"line_start":396,"line_end":396,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109029,"byte_end":109032,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109037,"byte_end":109077,"line_start":398,"line_end":398,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109672,"byte_end":109678,"line_start":417,"line_end":417,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109369,"byte_end":109440,"line_start":411,"line_end":411,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109445,"byte_end":109448,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_remove(value)`, if you want","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109453,"byte_end":109523,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/ to preserve the order of the values in the set, use `.shift_remove(value)`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109528,"byte_end":109607,"line_start":414,"line_end":414,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109612,"byte_end":109615,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109620,"byte_end":109660,"line_start":416,"line_end":416,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110224,"byte_end":110235,"line_start":433,"line_end":433,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexSet<T, S>>::swap_remove","value":"pub fn swap_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109812,"byte_end":109883,"line_start":424,"line_end":424,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109888,"byte_end":109891,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109896,"byte_end":109969,"line_start":426,"line_end":426,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":109974,"byte_end":110037,"line_start":427,"line_end":427,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110042,"byte_end":110097,"line_start":428,"line_end":428,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110102,"byte_end":110105,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110110,"byte_end":110159,"line_start":430,"line_end":430,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110164,"byte_end":110167,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110172,"byte_end":110212,"line_start":432,"line_end":432,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110789,"byte_end":110801,"line_start":449,"line_end":449,"column_start":12,"column_end":24},"name":"shift_remove","qualname":"<IndexSet<T, S>>::shift_remove","value":"pub fn shift_remove<Q: ?Sized>(&mut Self, &Q) -> bool where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set, and return `true` if it was present.","sig":null,"attributes":[{"value":"/ Remove the value from the set, and return `true` if it was present.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110383,"byte_end":110454,"line_start":440,"line_end":440,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110459,"byte_end":110462,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110467,"byte_end":110534,"line_start":442,"line_end":442,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110539,"byte_end":110600,"line_start":443,"line_end":443,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110605,"byte_end":110662,"line_start":444,"line_end":444,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110667,"byte_end":110670,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Return `false` if `value` was not in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110675,"byte_end":110724,"line_start":446,"line_end":446,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110729,"byte_end":110732,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110737,"byte_end":110777,"line_start":448,"line_end":448,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111287,"byte_end":111291,"line_start":464,"line_end":464,"column_start":12,"column_end":16},"name":"take","qualname":"<IndexSet<T, S>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":110950,"byte_end":111024,"line_start":456,"line_end":456,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111029,"byte_end":111043,"line_start":457,"line_end":457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111048,"byte_end":111051,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ **NOTE:** This is equivalent to `.swap_take(value)`, if you need to","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111056,"byte_end":111127,"line_start":459,"line_end":459,"column_start":5,"column_end":76}},{"value":"/ preserve the order of the values in the set, use `.shift_take(value)`","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111132,"byte_end":111205,"line_start":460,"line_end":460,"column_start":5,"column_end":78}},{"value":"/ instead.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111210,"byte_end":111222,"line_start":461,"line_end":461,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111227,"byte_end":111230,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111235,"byte_end":111275,"line_start":463,"line_end":463,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111861,"byte_end":111870,"line_start":481,"line_end":481,"column_start":12,"column_end":21},"name":"swap_take","qualname":"<IndexSet<T, S>>::swap_take","value":"pub fn swap_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111428,"byte_end":111502,"line_start":471,"line_end":471,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111507,"byte_end":111521,"line_start":472,"line_end":472,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111526,"byte_end":111529,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111534,"byte_end":111607,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111612,"byte_end":111675,"line_start":475,"line_end":475,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111680,"byte_end":111735,"line_start":476,"line_end":476,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111740,"byte_end":111743,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111748,"byte_end":111796,"line_start":478,"line_end":478,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111801,"byte_end":111804,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":111809,"byte_end":111849,"line_start":480,"line_end":480,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112463,"byte_end":112473,"line_start":498,"line_end":498,"column_start":12,"column_end":22},"name":"shift_take","qualname":"<IndexSet<T, S>>::shift_take","value":"pub fn shift_take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where Q: Hash +\nEquivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the\n given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112036,"byte_end":112110,"line_start":488,"line_end":488,"column_start":5,"column_end":79}},{"value":"/ given one.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112115,"byte_end":112129,"line_start":489,"line_end":489,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112134,"byte_end":112137,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112142,"byte_end":112209,"line_start":491,"line_end":491,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112214,"byte_end":112275,"line_start":492,"line_end":492,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112280,"byte_end":112337,"line_start":493,"line_end":493,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112342,"byte_end":112345,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112350,"byte_end":112398,"line_start":495,"line_end":495,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112403,"byte_end":112406,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112411,"byte_end":112451,"line_start":497,"line_end":497,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112992,"byte_end":113008,"line_start":512,"line_end":512,"column_start":12,"column_end":28},"name":"swap_remove_full","qualname":"<IndexSet<T, S>>::swap_remove_full","value":"pub fn swap_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112640,"byte_end":112705,"line_start":505,"line_end":505,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112710,"byte_end":112713,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112718,"byte_end":112791,"line_start":507,"line_end":507,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112796,"byte_end":112859,"line_start":508,"line_end":508,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112864,"byte_end":112919,"line_start":509,"line_end":509,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112924,"byte_end":112927,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":112932,"byte_end":112980,"line_start":511,"line_end":511,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113536,"byte_end":113553,"line_start":526,"line_end":526,"column_start":12,"column_end":29},"name":"shift_remove_full","qualname":"<IndexSet<T, S>>::shift_remove_full","value":"pub fn shift_remove_full<Q: ?Sized>(&mut Self, &Q) -> Option<(usize, T)> where\nQ: Hash + Equivalent<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value from the set return it and the index it had.","sig":null,"attributes":[{"value":"/ Remove the value from the set return it and the index it had.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113190,"byte_end":113255,"line_start":519,"line_end":519,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113260,"byte_end":113263,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113268,"byte_end":113335,"line_start":521,"line_end":521,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113340,"byte_end":113401,"line_start":522,"line_end":522,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113406,"byte_end":113463,"line_start":523,"line_end":523,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113468,"byte_end":113471,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `value` was not in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113476,"byte_end":113524,"line_start":525,"line_end":525,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113826,"byte_end":113829,"line_start":536,"line_end":536,"column_start":12,"column_end":15},"name":"pop","qualname":"<IndexSet<T, S>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value","sig":null,"attributes":[{"value":"/ Remove the last value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113736,"byte_end":113761,"line_start":533,"line_end":533,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113766,"byte_end":113769,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113774,"byte_end":113814,"line_start":535,"line_end":535,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114174,"byte_end":114180,"line_start":547,"line_end":547,"column_start":12,"column_end":18},"name":"retain","qualname":"<IndexSet<T, S>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Scan through each value in the set and keep those where the\n closure `keep` returns `true`.","sig":null,"attributes":[{"value":"/ Scan through each value in the set and keep those where the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113907,"byte_end":113970,"line_start":540,"line_end":540,"column_start":5,"column_end":68}},{"value":"/ closure `keep` returns `true`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":113975,"byte_end":114009,"line_start":541,"line_end":541,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114014,"byte_end":114017,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ The elements are visited in order, and remaining elements keep their","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114022,"byte_end":114094,"line_start":543,"line_end":543,"column_start":5,"column_end":77}},{"value":"/ order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114099,"byte_end":114109,"line_start":544,"line_end":544,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114114,"byte_end":114117,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114122,"byte_end":114162,"line_start":546,"line_end":546,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114425,"byte_end":114429,"line_start":557,"line_end":557,"column_start":12,"column_end":16},"name":"sort","qualname":"<IndexSet<T, S>>::sort","value":"pub fn sort(&mut Self) where T: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values by their default ordering.","sig":null,"attributes":[{"value":"/ Sort the set’s values by their default ordering.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114316,"byte_end":114370,"line_start":554,"line_end":554,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114375,"byte_end":114378,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ See `sort_by` for details.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114383,"byte_end":114413,"line_start":556,"line_end":556,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114690,"byte_end":114697,"line_start":567,"line_end":567,"column_start":12,"column_end":19},"name":"sort_by","qualname":"<IndexSet<T, S>>::sort_by","value":"pub fn sort_by<F>(&mut Self, F) where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the set’s values in place using the comparison function `compare`.","sig":null,"attributes":[{"value":"/ Sort the set’s values in place using the comparison function `compare`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114513,"byte_end":114590,"line_start":564,"line_end":564,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114595,"byte_end":114598,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n log n)** time and **O(n)** space. The sort is stable.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114603,"byte_end":114678,"line_start":566,"line_end":566,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115000,"byte_end":115009,"line_start":578,"line_end":578,"column_start":12,"column_end":21},"name":"sorted_by","qualname":"<IndexSet<T, S>>::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> IntoIter<T> where F: FnMut(&T, &T) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Sort the values of the set and return a by value iterator of\n the values with the result.","sig":null,"attributes":[{"value":"/ Sort the values of the set and return a by value iterator of","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114852,"byte_end":114916,"line_start":574,"line_end":574,"column_start":5,"column_end":69}},{"value":"/ the values with the result.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114921,"byte_end":114952,"line_start":575,"line_end":575,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114957,"byte_end":114960,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ The sort is stable.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":114965,"byte_end":114988,"line_start":577,"line_end":577,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115344,"byte_end":115351,"line_start":590,"line_end":590,"column_start":12,"column_end":19},"name":"reverse","qualname":"<IndexSet<T, S>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of the set’s values in place.","sig":null,"attributes":[{"value":"/ Reverses the order of the set’s values in place.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115216,"byte_end":115270,"line_start":587,"line_end":587,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115275,"byte_end":115278,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time and **O(1)** space.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115283,"byte_end":115332,"line_start":589,"line_end":589,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115572,"byte_end":115581,"line_start":601,"line_end":601,"column_start":12,"column_end":21},"name":"get_index","qualname":"<IndexSet<T, S>>::get_index","value":"pub fn get_index(&Self, usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get a value by index","sig":null,"attributes":[{"value":"/ Get a value by index","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115433,"byte_end":115457,"line_start":596,"line_end":596,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115462,"byte_end":115465,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115470,"byte_end":115517,"line_start":598,"line_end":598,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115522,"byte_end":115525,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115530,"byte_end":115560,"line_start":600,"line_end":600,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115766,"byte_end":115771,"line_start":608,"line_end":608,"column_start":12,"column_end":17},"name":"first","qualname":"<IndexSet<T, S>>::first","value":"pub fn first(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the first value","sig":null,"attributes":[{"value":"/ Get the first value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115688,"byte_end":115711,"line_start":605,"line_end":605,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115716,"byte_end":115719,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115724,"byte_end":115754,"line_start":607,"line_end":607,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115938,"byte_end":115942,"line_start":615,"line_end":615,"column_start":12,"column_end":16},"name":"last","qualname":"<IndexSet<T, S>>::last","value":"pub fn last(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Get the last value","sig":null,"attributes":[{"value":"/ Get the last value","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115861,"byte_end":115883,"line_start":612,"line_end":612,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115888,"byte_end":115891,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115896,"byte_end":115926,"line_start":614,"line_end":614,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116399,"byte_end":116416,"line_start":628,"line_end":628,"column_start":12,"column_end":29},"name":"swap_remove_index","qualname":"<IndexSet<T, S>>::swap_remove_index","value":"pub fn swap_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116031,"byte_end":116060,"line_start":619,"line_end":619,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116065,"byte_end":116068,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116073,"byte_end":116120,"line_start":621,"line_end":621,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116125,"byte_end":116128,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the value is removed by swapping it with the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116133,"byte_end":116206,"line_start":623,"line_end":623,"column_start":5,"column_end":78}},{"value":"/ last element of the set and popping it off. **This perturbs","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116211,"byte_end":116274,"line_start":624,"line_end":624,"column_start":5,"column_end":68}},{"value":"/ the position of what used to be the last element!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116279,"byte_end":116334,"line_start":625,"line_end":625,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116339,"byte_end":116342,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116347,"byte_end":116387,"line_start":627,"line_end":627,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116889,"byte_end":116907,"line_start":641,"line_end":641,"column_start":12,"column_end":30},"name":"shift_remove_index","qualname":"<IndexSet<T, S>>::shift_remove_index","value":"pub fn shift_remove_index(&mut Self, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove the value by index","sig":null,"attributes":[{"value":"/ Remove the value by index","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116527,"byte_end":116556,"line_start":632,"line_end":632,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116561,"byte_end":116564,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ Valid indices are *0 <= index < self.len()*","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116569,"byte_end":116616,"line_start":634,"line_end":634,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116621,"byte_end":116624,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::remove`, the value is removed by shifting all of the","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116629,"byte_end":116696,"line_start":636,"line_end":636,"column_start":5,"column_end":72}},{"value":"/ elements that follow it, preserving their relative order.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116701,"byte_end":116762,"line_start":637,"line_end":637,"column_start":5,"column_end":66}},{"value":"/ **This perturbs the index of all of those elements!**","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116767,"byte_end":116824,"line_start":638,"line_end":638,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116829,"byte_end":116832,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time (average).","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":116837,"byte_end":116877,"line_start":640,"line_end":640,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1141},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":117141,"byte_end":117153,"line_start":648,"line_end":648,"column_start":12,"column_end":24},"name":"swap_indices","qualname":"<IndexSet<T, S>>::swap_indices","value":"pub fn swap_indices(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps the position of two values in the set.","sig":null,"attributes":[{"value":"/ Swaps the position of two values in the set.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":117019,"byte_end":117067,"line_start":645,"line_end":645,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":117072,"byte_end":117075,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ ***Panics*** if `a` or `b` are out of bounds.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":117080,"byte_end":117129,"line_start":647,"line_end":647,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1147},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118536,"byte_end":118544,"line_start":700,"line_end":700,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1149}],"decl_id":null,"docs":" An owning iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `IndexSet`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118217,"byte_end":118271,"line_start":693,"line_end":693,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118272,"byte_end":118275,"line_start":694,"line_end":694,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`IndexSet`]","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118276,"byte_end":118348,"line_start":695,"line_end":695,"column_start":1,"column_end":73}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118349,"byte_end":118424,"line_start":696,"line_end":696,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118425,"byte_end":118428,"line_start":697,"line_end":697,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118429,"byte_end":118467,"line_start":698,"line_end":698,"column_start":1,"column_end":39}},{"value":"/ [`into_iter`]: struct.IndexSet.html#method.into_iter","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118468,"byte_end":118524,"line_start":699,"line_end":699,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1162},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119437,"byte_end":119441,"line_start":736,"line_end":736,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1165}],"decl_id":null,"docs":" An iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `IndexSet`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119179,"byte_end":119226,"line_start":729,"line_end":729,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119227,"byte_end":119230,"line_start":730,"line_end":730,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`IndexSet`].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119231,"byte_end":119299,"line_start":731,"line_end":731,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119300,"byte_end":119335,"line_start":732,"line_end":732,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119336,"byte_end":119339,"line_start":733,"line_end":733,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119340,"byte_end":119378,"line_start":734,"line_end":734,"column_start":1,"column_end":39}},{"value":"/ [`iter`]: struct.IndexSet.html#method.iter","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119379,"byte_end":119425,"line_start":735,"line_end":735,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1182},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120439,"byte_end":120444,"line_start":779,"line_end":779,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1185}],"decl_id":null,"docs":" A draining iterator over the items of a `IndexSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `IndexSet`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120170,"byte_end":120225,"line_start":772,"line_end":772,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120226,"byte_end":120229,"line_start":773,"line_end":773,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`IndexSet`].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120230,"byte_end":120299,"line_start":774,"line_end":774,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120300,"byte_end":120335,"line_start":775,"line_end":775,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120336,"byte_end":120339,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120340,"byte_end":120378,"line_start":777,"line_end":777,"column_start":1,"column_end":39}},{"value":"/ [`drain`]: struct.IndexSet.html#method.drain","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120379,"byte_end":120427,"line_start":778,"line_end":778,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122606,"byte_end":122617,"line_start":884,"line_end":884,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S>>::is_disjoint","value":"pub fn is_disjoint<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122526,"byte_end":122594,"line_start":883,"line_end":883,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1241},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122992,"byte_end":123001,"line_start":896,"line_end":896,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S>>::is_subset","value":"pub fn is_subset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `self` are contained in `other`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `self` are contained in `other`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122910,"byte_end":122980,"line_start":895,"line_end":895,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123269,"byte_end":123280,"line_start":904,"line_end":904,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S>>::is_superset","value":"pub fn is_superset<S2>(&Self, &IndexSet<T, S2>) -> bool where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if all elements of `other` are contained in `self`.\n","sig":null,"attributes":[{"value":"/ Returns `true` if all elements of `other` are contained in `self`.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123187,"byte_end":123257,"line_start":903,"line_end":903,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1246},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123706,"byte_end":123716,"line_start":919,"line_end":919,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1250},{"krate":0,"index":1251}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `IndexSet`s.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123405,"byte_end":123477,"line_start":912,"line_end":912,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123478,"byte_end":123481,"line_start":913,"line_end":913,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`IndexSet`].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123482,"byte_end":123556,"line_start":914,"line_end":914,"column_start":1,"column_end":75}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123557,"byte_end":123592,"line_start":915,"line_end":915,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123593,"byte_end":123596,"line_start":916,"line_end":916,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123597,"byte_end":123635,"line_start":917,"line_end":917,"column_start":1,"column_end":39}},{"value":"/ [`difference`]: struct.IndexSet.html#method.difference","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123636,"byte_end":123694,"line_start":918,"line_end":918,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1271},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125269,"byte_end":125281,"line_start":986,"line_end":986,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `IndexSet`s.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":124960,"byte_end":125034,"line_start":979,"line_end":979,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125035,"byte_end":125038,"line_start":980,"line_end":980,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`IndexSet`].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125039,"byte_end":125115,"line_start":981,"line_end":981,"column_start":1,"column_end":77}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125116,"byte_end":125151,"line_start":982,"line_end":982,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125152,"byte_end":125155,"line_start":983,"line_end":983,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125156,"byte_end":125194,"line_start":984,"line_end":984,"column_start":1,"column_end":39}},{"value":"/ [`intersection`]: struct.IndexSet.html#method.intersection","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125195,"byte_end":125257,"line_start":985,"line_end":985,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1296},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126874,"byte_end":126893,"line_start":1053,"line_end":1053,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1301}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `IndexSet`s.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126533,"byte_end":126615,"line_start":1046,"line_end":1046,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126616,"byte_end":126619,"line_start":1047,"line_end":1047,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126620,"byte_end":126690,"line_start":1048,"line_end":1048,"column_start":1,"column_end":71}},{"value":"/ [`IndexSet`]. See its documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126691,"byte_end":126740,"line_start":1049,"line_end":1049,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126741,"byte_end":126744,"line_start":1050,"line_end":1050,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126745,"byte_end":126783,"line_start":1051,"line_end":1051,"column_start":1,"column_end":39}},{"value":"/ [`symmetric_difference`]: struct.IndexSet.html#method.symmetric_difference","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126784,"byte_end":126862,"line_start":1052,"line_end":1052,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1328},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128411,"byte_end":128416,"line_start":1118,"line_end":1118,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1332}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `IndexSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `IndexSet`s.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128130,"byte_end":128197,"line_start":1111,"line_end":1111,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128198,"byte_end":128201,"line_start":1112,"line_end":1112,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`IndexSet`].","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128202,"byte_end":128271,"line_start":1113,"line_end":1113,"column_start":1,"column_end":70}},{"value":"/ See its documentation for more.","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128272,"byte_end":128307,"line_start":1114,"line_end":1114,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128308,"byte_end":128311,"line_start":1115,"line_end":1115,"column_start":1,"column_end":4}},{"value":"/ [`IndexSet`]: struct.IndexSet.html","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128312,"byte_end":128350,"line_start":1116,"line_end":1116,"column_start":1,"column_end":39}},{"value":"/ [`union`]: struct.IndexSet.html#method.union","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128351,"byte_end":128399,"line_start":1117,"line_end":1117,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1407},"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":5120,"byte_end":5125,"line_start":180,"line_end":180,"column_start":10,"column_end":15},"name":"Entry","qualname":"::Entries::Entry","value":"type Entry;","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":9177,"byte_end":9178,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":11006,"byte_end":11014,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":11917,"byte_end":11925,"line_start":14,"line_end":14,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":12259,"byte_end":12274,"line_start":30,"line_end":30,"column_start":37,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":12996,"byte_end":13004,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":13352,"byte_end":13360,"line_start":72,"line_end":72,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":13784,"byte_end":13792,"line_start":89,"line_end":89,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":14101,"byte_end":14116,"line_start":104,"line_end":104,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":14794,"byte_end":14802,"line_start":131,"line_end":131,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":15119,"byte_end":15127,"line_start":144,"line_end":144,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":17215,"byte_end":17225,"line_start":61,"line_end":61,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":91086,"byte_end":91098,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":91398,"byte_end":91410,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94459,"byte_end":94472,"line_start":103,"line_end":103,"column_start":40,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94587,"byte_end":94600,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":71075,"byte_end":71087,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":71773,"byte_end":71785,"line_start":81,"line_end":81,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":72104,"byte_end":72116,"line_start":94,"line_end":94,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":72619,"byte_end":72631,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":462}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84038,"byte_end":84043,"line_start":447,"line_end":447,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87100,"byte_end":87105,"line_start":537,"line_end":537,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87509,"byte_end":87522,"line_start":549,"line_end":549,"column_start":12,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89083,"byte_end":89096,"line_start":592,"line_end":592,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89575,"byte_end":89586,"line_start":611,"line_end":611,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":90289,"byte_end":90300,"line_start":635,"line_end":635,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":22110,"byte_end":22118,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":22516,"byte_end":22524,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23048,"byte_end":23056,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23518,"byte_end":23526,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23952,"byte_end":23960,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28146,"byte_end":28154,"line_start":302,"line_end":302,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":711},{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40874,"byte_end":40882,"line_start":703,"line_end":703,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43864,"byte_end":43868,"line_start":795,"line_end":795,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43983,"byte_end":43987,"line_start":801,"line_end":801,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44145,"byte_end":44149,"line_start":807,"line_end":807,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":745}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44300,"byte_end":44304,"line_start":814,"line_end":814,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44456,"byte_end":44460,"line_start":822,"line_end":822,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44953,"byte_end":44959,"line_start":839,"line_end":839,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":763},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1425}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45076,"byte_end":45082,"line_start":845,"line_end":845,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45242,"byte_end":45248,"line_start":851,"line_end":851,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45399,"byte_end":45405,"line_start":858,"line_end":858,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45559,"byte_end":45565,"line_start":866,"line_end":866,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":779}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46083,"byte_end":46092,"line_start":883,"line_end":883,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46213,"byte_end":46222,"line_start":889,"line_end":889,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46382,"byte_end":46391,"line_start":895,"line_end":895,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46813,"byte_end":46817,"line_start":912,"line_end":912,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46938,"byte_end":46942,"line_start":918,"line_end":918,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47097,"byte_end":47101,"line_start":924,"line_end":924,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47252,"byte_end":47256,"line_start":931,"line_end":931,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47420,"byte_end":47424,"line_start":939,"line_end":939,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47935,"byte_end":47942,"line_start":956,"line_end":956,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48070,"byte_end":48077,"line_start":962,"line_end":962,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48235,"byte_end":48242,"line_start":968,"line_end":968,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48732,"byte_end":48740,"line_start":985,"line_end":985,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48854,"byte_end":48862,"line_start":991,"line_end":991,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":853}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49018,"byte_end":49026,"line_start":997,"line_end":997,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":857}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49147,"byte_end":49155,"line_start":1003,"line_end":1003,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49715,"byte_end":49720,"line_start":1021,"line_end":1021,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49838,"byte_end":49843,"line_start":1027,"line_end":1027,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1462}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":50358,"byte_end":50366,"line_start":1047,"line_end":1047,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":51150,"byte_end":51158,"line_start":1079,"line_end":1079,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":52326,"byte_end":52334,"line_start":1124,"line_end":1124,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":53411,"byte_end":53419,"line_start":1166,"line_end":1166,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":54513,"byte_end":54521,"line_start":1208,"line_end":1208,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":54869,"byte_end":54877,"line_start":1219,"line_end":1219,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":925}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":55461,"byte_end":55469,"line_start":1238,"line_end":1238,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":56768,"byte_end":56776,"line_start":1271,"line_end":1271,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":57172,"byte_end":57180,"line_start":1285,"line_end":1285,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":57400,"byte_end":57408,"line_start":1295,"line_end":1295,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":57773,"byte_end":57781,"line_start":1312,"line_end":1312,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99760,"byte_end":99768,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":100030,"byte_end":100038,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":100549,"byte_end":100557,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":100954,"byte_end":100962,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1049},{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101395,"byte_end":101403,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1065}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104439,"byte_end":104447,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1077},{"krate":0,"index":1080},{"krate":0,"index":1083},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1115},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115412,"byte_end":115420,"line_start":595,"line_end":595,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":117920,"byte_end":117928,"line_start":681,"line_end":681,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1146}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118610,"byte_end":118618,"line_start":704,"line_end":704,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118715,"byte_end":118723,"line_start":710,"line_end":710,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118867,"byte_end":118875,"line_start":716,"line_end":716,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118978,"byte_end":118986,"line_start":722,"line_end":722,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1161}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119517,"byte_end":119521,"line_start":740,"line_end":740,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474},{"krate":0,"index":1475}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119630,"byte_end":119634,"line_start":746,"line_end":746,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1172}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119786,"byte_end":119790,"line_start":752,"line_end":752,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1175}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119880,"byte_end":119884,"line_start":758,"line_end":758,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120030,"byte_end":120034,"line_start":766,"line_end":766,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120515,"byte_end":120520,"line_start":783,"line_end":783,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1188},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120621,"byte_end":120626,"line_start":789,"line_end":789,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120898,"byte_end":120906,"line_start":802,"line_end":802,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":121125,"byte_end":121133,"line_start":813,"line_end":813,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1207}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":121428,"byte_end":121436,"line_start":826,"line_end":826,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":121687,"byte_end":121695,"line_start":837,"line_end":837,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":121940,"byte_end":121948,"line_start":848,"line_end":848,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122164,"byte_end":122172,"line_start":860,"line_end":860,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122386,"byte_end":122394,"line_start":871,"line_end":871,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122461,"byte_end":122469,"line_start":878,"line_end":878,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1237},{"krate":0,"index":1241},{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123814,"byte_end":123824,"line_start":924,"line_end":924,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":124258,"byte_end":124268,"line_start":945,"line_end":945,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1262}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":124578,"byte_end":124588,"line_start":960,"line_end":960,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":124754,"byte_end":124764,"line_start":969,"line_end":969,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125379,"byte_end":125391,"line_start":991,"line_end":991,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125824,"byte_end":125836,"line_start":1012,"line_end":1012,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126145,"byte_end":126157,"line_start":1027,"line_end":1027,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126325,"byte_end":126337,"line_start":1036,"line_end":1036,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":127010,"byte_end":127029,"line_start":1057,"line_end":1057,"column_start":34,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":127484,"byte_end":127503,"line_start":1081,"line_end":1081,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":127704,"byte_end":127723,"line_start":1092,"line_end":1092,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1322}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":127888,"byte_end":127907,"line_start":1100,"line_end":1100,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1327}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128512,"byte_end":128517,"line_start":1122,"line_end":1122,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128940,"byte_end":128945,"line_start":1145,"line_end":1145,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":129114,"byte_end":129119,"line_start":1155,"line_end":1155,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1350}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":129260,"byte_end":129265,"line_start":1163,"line_end":1163,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3847,"byte_end":3856,"line_start":117,"line_end":117,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":4054,"byte_end":4060,"line_start":131,"line_end":131,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1393},{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":4453,"byte_end":4459,"line_start":151,"line_end":151,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3334,"byte_end":3343,"line_start":95,"line_end":95,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":191}},{"kind":"Mod","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3364,"byte_end":3367,"line_start":98,"line_end":98,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":280}},{"kind":"Mod","span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3377,"byte_end":3380,"line_start":99,"line_end":99,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":960}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/equivalent.rs","byte_start":9177,"byte_end":9178,"line_start":18,"line_end":18,"column_start":46,"column_end":47},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":26},"to":{"krate":0,"index":22}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/mutable_keys.rs","byte_start":11006,"byte_end":11014,"line_start":51,"line_end":51,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":603},"to":{"krate":0,"index":45}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":11917,"byte_end":11925,"line_start":14,"line_end":14,"column_start":29,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":603},"to":{"krate":20,"index":2108}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":12259,"byte_end":12274,"line_start":30,"line_end":30,"column_start":37,"column_end":52},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":127},"to":{"krate":20,"index":1645}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":12996,"byte_end":13004,"line_start":58,"line_end":58,"column_start":41,"column_end":49},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":603},"to":{"krate":20,"index":1561}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":13352,"byte_end":13360,"line_start":72,"line_end":72,"column_start":52,"column_end":60},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":603},"to":{"krate":20,"index":1777}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":13784,"byte_end":13792,"line_start":89,"line_end":89,"column_start":26,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1025},"to":{"krate":20,"index":2108}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":14101,"byte_end":14116,"line_start":104,"line_end":104,"column_start":34,"column_end":49},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":165},"to":{"krate":20,"index":1645}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":14794,"byte_end":14802,"line_start":131,"line_end":131,"column_start":38,"column_end":46},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1025},"to":{"krate":20,"index":1561}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde.rs","byte_start":15119,"byte_end":15127,"line_start":144,"line_end":144,"column_start":49,"column_end":57},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1025},"to":{"krate":20,"index":1777}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/serde_seq.rs","byte_start":17215,"byte_end":17225,"line_start":61,"line_end":61,"column_start":37,"column_end":47},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":237},"to":{"krate":20,"index":1645}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":91086,"byte_end":91098,"line_start":13,"line_end":13,"column_start":21,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":309},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":91398,"byte_end":91410,"line_start":21,"line_end":21,"column_start":12,"column_end":24},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94459,"byte_end":94472,"line_start":103,"line_end":103,"column_start":40,"column_end":53},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":3029}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core/raw.rs","byte_start":94587,"byte_end":94600,"line_start":106,"line_end":106,"column_start":16,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":71075,"byte_end":71087,"line_start":58,"line_end":58,"column_start":22,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":71773,"byte_end":71785,"line_start":81,"line_end":81,"column_start":27,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":391},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":72104,"byte_end":72116,"line_start":94,"line_end":94,"column_start":24,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":391},"to":{"krate":0,"index":1406}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":72619,"byte_end":72631,"line_start":121,"line_end":121,"column_start":12,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":391},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":84038,"byte_end":84043,"line_start":447,"line_end":447,"column_start":16,"column_end":21},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87100,"byte_end":87105,"line_start":537,"line_end":537,"column_start":51,"column_end":56},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":463},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":87509,"byte_end":87522,"line_start":549,"line_end":549,"column_start":12,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89083,"byte_end":89096,"line_start":592,"line_end":592,"column_start":51,"column_end":64},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":89575,"byte_end":89586,"line_start":611,"line_end":611,"column_start":16,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map/core.rs","byte_start":90289,"byte_end":90300,"line_start":635,"line_end":635,"column_start":39,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":506},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":22110,"byte_end":22118,"line_start":81,"line_end":81,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":22516,"byte_end":22524,"line_start":100,"line_end":100,"column_start":27,"column_end":35},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":603},"to":{"krate":0,"index":1406}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23048,"byte_end":23056,"line_start":126,"line_end":126,"column_start":30,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23518,"byte_end":23526,"line_start":144,"line_end":144,"column_start":12,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":23952,"byte_end":23960,"line_start":161,"line_end":161,"column_start":15,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":28146,"byte_end":28154,"line_start":302,"line_end":302,"column_start":15,"column_end":23},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":40874,"byte_end":40882,"line_start":703,"line_end":703,"column_start":15,"column_end":23},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43864,"byte_end":43868,"line_start":795,"line_end":795,"column_start":29,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":43983,"byte_end":43987,"line_start":801,"line_end":801,"column_start":36,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44145,"byte_end":44149,"line_start":807,"line_end":807,"column_start":34,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":7700}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44300,"byte_end":44304,"line_start":814,"line_end":814,"column_start":22,"column_end":26},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44456,"byte_end":44460,"line_start":822,"line_end":822,"column_start":39,"column_end":43},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":728},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":44953,"byte_end":44959,"line_start":839,"line_end":839,"column_start":29,"column_end":35},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":754},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45076,"byte_end":45082,"line_start":845,"line_end":845,"column_start":36,"column_end":42},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":754},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45242,"byte_end":45248,"line_start":851,"line_end":851,"column_start":34,"column_end":40},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":754},"to":{"krate":1,"index":7700}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45399,"byte_end":45405,"line_start":858,"line_end":858,"column_start":22,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":754},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":45559,"byte_end":45565,"line_start":866,"line_end":866,"column_start":39,"column_end":45},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":754},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46083,"byte_end":46092,"line_start":883,"line_end":883,"column_start":29,"column_end":38},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":780},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46213,"byte_end":46222,"line_start":889,"line_end":889,"column_start":36,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":780},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46382,"byte_end":46391,"line_start":895,"line_end":895,"column_start":34,"column_end":43},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":780},"to":{"krate":1,"index":7700}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46813,"byte_end":46817,"line_start":912,"line_end":912,"column_start":29,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":798},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":46938,"byte_end":46942,"line_start":918,"line_end":918,"column_start":36,"column_end":40},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":798},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47097,"byte_end":47101,"line_start":924,"line_end":924,"column_start":34,"column_end":38},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":798},"to":{"krate":1,"index":7700}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47252,"byte_end":47256,"line_start":931,"line_end":931,"column_start":22,"column_end":26},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":798},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47420,"byte_end":47424,"line_start":939,"line_end":939,"column_start":51,"column_end":55},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":798},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":47935,"byte_end":47942,"line_start":956,"line_end":956,"column_start":29,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48070,"byte_end":48077,"line_start":962,"line_end":962,"column_start":36,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48235,"byte_end":48242,"line_start":968,"line_end":968,"column_start":34,"column_end":41},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":824},"to":{"krate":1,"index":7700}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48732,"byte_end":48740,"line_start":985,"line_end":985,"column_start":25,"column_end":33},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":48854,"byte_end":48862,"line_start":991,"line_end":991,"column_start":36,"column_end":44},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49018,"byte_end":49026,"line_start":997,"line_end":997,"column_start":34,"column_end":42},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":7700}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49147,"byte_end":49155,"line_start":1003,"line_end":1003,"column_start":51,"column_end":59},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49715,"byte_end":49720,"line_start":1021,"line_end":1021,"column_start":25,"column_end":30},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":862},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":49838,"byte_end":49843,"line_start":1027,"line_end":1027,"column_start":36,"column_end":41},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":862},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":50358,"byte_end":50366,"line_start":1047,"line_end":1047,"column_start":32,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7631}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":51150,"byte_end":51158,"line_start":1079,"line_end":1079,"column_start":40,"column_end":48},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":3317}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":52326,"byte_end":52334,"line_start":1124,"line_end":1124,"column_start":43,"column_end":51},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":3321}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":53411,"byte_end":53419,"line_start":1166,"line_end":1166,"column_start":32,"column_end":40},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":3317}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":54513,"byte_end":54521,"line_start":1208,"line_end":1208,"column_start":35,"column_end":43},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":3321}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":54869,"byte_end":54877,"line_start":1219,"line_end":1219,"column_start":40,"column_end":48},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7627}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":55461,"byte_end":55469,"line_start":1238,"line_end":1238,"column_start":34,"column_end":42},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7640}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":56768,"byte_end":56776,"line_start":1271,"line_end":1271,"column_start":46,"column_end":54},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":7640}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":57172,"byte_end":57180,"line_start":1285,"line_end":1285,"column_start":27,"column_end":35},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":2995}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":57400,"byte_end":57408,"line_start":1295,"line_end":1295,"column_start":60,"column_end":68},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":2668}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/map.rs","byte_start":57773,"byte_end":57781,"line_start":1312,"line_end":1312,"column_start":22,"column_end":30},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":603},"to":{"krate":1,"index":2673}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":99760,"byte_end":99768,"line_start":71,"line_end":71,"column_start":22,"column_end":30},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":100030,"byte_end":100038,"line_start":87,"line_end":87,"column_start":24,"column_end":32},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1025},"to":{"krate":0,"index":1406}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":100549,"byte_end":100557,"line_start":113,"line_end":113,"column_start":27,"column_end":35},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":100954,"byte_end":100962,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":101395,"byte_end":101403,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":104439,"byte_end":104447,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":115412,"byte_end":115420,"line_start":595,"line_end":595,"column_start":12,"column_end":20},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":117920,"byte_end":117928,"line_start":681,"line_end":681,"column_start":29,"column_end":37},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":3317}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118610,"byte_end":118618,"line_start":704,"line_end":704,"column_start":22,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1147},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118715,"byte_end":118723,"line_start":710,"line_end":710,"column_start":33,"column_end":41},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1147},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118867,"byte_end":118875,"line_start":716,"line_end":716,"column_start":31,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1147},"to":{"krate":1,"index":7700}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":118978,"byte_end":118986,"line_start":722,"line_end":722,"column_start":36,"column_end":44},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1147},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119517,"byte_end":119521,"line_start":740,"line_end":740,"column_start":26,"column_end":30},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1162},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119630,"byte_end":119634,"line_start":746,"line_end":746,"column_start":33,"column_end":37},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1162},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119786,"byte_end":119790,"line_start":752,"line_end":752,"column_start":31,"column_end":35},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1162},"to":{"krate":1,"index":7700}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":119880,"byte_end":119884,"line_start":758,"line_end":758,"column_start":19,"column_end":23},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1162},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120030,"byte_end":120034,"line_start":766,"line_end":766,"column_start":36,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1162},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120515,"byte_end":120520,"line_start":783,"line_end":783,"column_start":22,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1182},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120621,"byte_end":120626,"line_start":789,"line_end":789,"column_start":33,"column_end":38},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1182},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":120898,"byte_end":120906,"line_start":802,"line_end":802,"column_start":29,"column_end":37},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":7631}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":121125,"byte_end":121133,"line_start":813,"line_end":813,"column_start":32,"column_end":40},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":7627}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":121428,"byte_end":121436,"line_start":826,"line_end":826,"column_start":26,"column_end":34},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":7640}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":121687,"byte_end":121695,"line_start":837,"line_end":837,"column_start":34,"column_end":42},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":7640}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":121940,"byte_end":121948,"line_start":848,"line_end":848,"column_start":24,"column_end":32},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":2995}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122164,"byte_end":122172,"line_start":860,"line_end":860,"column_start":48,"column_end":56},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":2668}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122386,"byte_end":122394,"line_start":871,"line_end":871,"column_start":19,"column_end":27},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1025},"to":{"krate":1,"index":2673}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":122461,"byte_end":122469,"line_start":878,"line_end":878,"column_start":12,"column_end":20},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":123814,"byte_end":123824,"line_start":924,"line_end":924,"column_start":29,"column_end":39},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1246},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":124258,"byte_end":124268,"line_start":945,"line_end":945,"column_start":36,"column_end":46},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1246},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":124578,"byte_end":124588,"line_start":960,"line_end":960,"column_start":22,"column_end":32},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1246},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":124754,"byte_end":124764,"line_start":969,"line_end":969,"column_start":27,"column_end":37},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1246},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125379,"byte_end":125391,"line_start":991,"line_end":991,"column_start":29,"column_end":41},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1271},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":125824,"byte_end":125836,"line_start":1012,"line_end":1012,"column_start":36,"column_end":48},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1271},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126145,"byte_end":126157,"line_start":1027,"line_end":1027,"column_start":22,"column_end":34},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1271},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":126325,"byte_end":126337,"line_start":1036,"line_end":1036,"column_start":27,"column_end":39},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1271},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":127010,"byte_end":127029,"line_start":1057,"line_end":1057,"column_start":34,"column_end":53},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1296},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":127484,"byte_end":127503,"line_start":1081,"line_end":1081,"column_start":41,"column_end":60},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1296},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":127704,"byte_end":127723,"line_start":1092,"line_end":1092,"column_start":27,"column_end":46},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1296},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":127888,"byte_end":127907,"line_start":1100,"line_end":1100,"column_start":32,"column_end":51},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1296},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128512,"byte_end":128517,"line_start":1122,"line_end":1122,"column_start":29,"column_end":34},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1328},"to":{"krate":1,"index":7820}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":128940,"byte_end":128945,"line_start":1145,"line_end":1145,"column_start":36,"column_end":41},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1328},"to":{"krate":1,"index":7675}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":129114,"byte_end":129119,"line_start":1155,"line_end":1155,"column_start":22,"column_end":27},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1328},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/set.rs","byte_start":129260,"byte_end":129265,"line_start":1163,"line_end":1163,"column_start":27,"column_end":32},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1328},"to":{"krate":1,"index":9548}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":3847,"byte_end":3856,"line_start":117,"line_end":117,"column_start":6,"column_end":15},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":4054,"byte_end":4060,"line_start":131,"line_end":131,"column_start":22,"column_end":28},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1497},"to":{"krate":1,"index":2638}},{"span":{"file_name":"/home/pegasus/.cargo/registry/src/github.com-1ecc6299db9ec823/indexmap-1.7.0/src/lib.rs","byte_start":4453,"byte_end":4459,"line_start":151,"line_end":151,"column_start":12,"column_end":18},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1497},"to":{"krate":4294967295,"index":4294967295}}]}